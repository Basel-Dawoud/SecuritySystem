
Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003148  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00003148  000031dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  00800160  00800160  000032dc  2**0
                  ALLOC
  3 .stab         00002c88  00000000  00000000  000032dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000013c3  00000000  00000000  00005f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007327  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007467  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000075d7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009220  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000a10b  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000aeb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000b018  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b2a5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ba73  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 c5 15 	jmp	0x2b8a	; 0x2b8a <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 f8 15 	jmp	0x2bf0	; 0x2bf0 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e4       	ldi	r30, 0x48	; 72
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 37       	cpi	r26, 0x75	; 117
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 a2 18 	jmp	0x3144	; 0x3144 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 26 18 	jmp	0x304c	; 0x304c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac e4       	ldi	r26, 0x4C	; 76
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 26 18 	jmp	0x304c	; 0x304c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c e4       	ldi	r24, 0x4C	; 76
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 42 18 	jmp	0x3084	; 0x3084 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 32 18 	jmp	0x3064	; 0x3064 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 4e 18 	jmp	0x309c	; 0x309c <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 36 18 	jmp	0x306c	; 0x306c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 52 18 	jmp	0x30a4	; 0x30a4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


/* Declaration of global arrays */
uint8 password[PASSWORD_LENGTH],confPass[PASSWORD_LENGTH];

int main(){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 56       	subi	r28, 0x66	; 102
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61

	uint8 passwordsMatch=1; /* Variable to track if password comparison is true */
     b60:	fe 01       	movw	r30, r28
     b62:	e8 5a       	subi	r30, 0xA8	; 168
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	81 e0       	ldi	r24, 0x01	; 1
     b68:	80 83       	st	Z, r24
	uint8 step=1; /* Variable to control the program's steps */
     b6a:	fe 01       	movw	r30, r28
     b6c:	e9 5a       	subi	r30, 0xA9	; 169
     b6e:	ff 4f       	sbci	r31, 0xFF	; 255
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	80 83       	st	Z, r24

	/* Initialize the LCD driver */
	LCD_init();
     b74:	0e 94 9a 10 	call	0x2134	; 0x2134 <LCD_init>

	/* UART Configuration */
	UART_ConfigType Config_Ptr = {UART_8_BIT_DATA,DISABLED,UART_STOP_1_BIT,UART_BAUDRATE_9600};
     b78:	ce 01       	movw	r24, r28
     b7a:	87 5a       	subi	r24, 0xA7	; 167
     b7c:	9f 4f       	sbci	r25, 0xFF	; 255
     b7e:	a4 96       	adiw	r28, 0x24	; 36
     b80:	9f af       	std	Y+63, r25	; 0x3f
     b82:	8e af       	std	Y+62, r24	; 0x3e
     b84:	a4 97       	sbiw	r28, 0x24	; 36
     b86:	2a e5       	ldi	r18, 0x5A	; 90
     b88:	31 e0       	ldi	r19, 0x01	; 1
     b8a:	a6 96       	adiw	r28, 0x26	; 38
     b8c:	3f af       	std	Y+63, r19	; 0x3f
     b8e:	2e af       	std	Y+62, r18	; 0x3e
     b90:	a6 97       	sbiw	r28, 0x26	; 38
     b92:	35 e0       	ldi	r19, 0x05	; 5
     b94:	a7 96       	adiw	r28, 0x27	; 39
     b96:	3f af       	std	Y+63, r19	; 0x3f
     b98:	a7 97       	sbiw	r28, 0x27	; 39
     b9a:	a6 96       	adiw	r28, 0x26	; 38
     b9c:	ee ad       	ldd	r30, Y+62	; 0x3e
     b9e:	ff ad       	ldd	r31, Y+63	; 0x3f
     ba0:	a6 97       	sbiw	r28, 0x26	; 38
     ba2:	00 80       	ld	r0, Z
     ba4:	a6 96       	adiw	r28, 0x26	; 38
     ba6:	2e ad       	ldd	r18, Y+62	; 0x3e
     ba8:	3f ad       	ldd	r19, Y+63	; 0x3f
     baa:	a6 97       	sbiw	r28, 0x26	; 38
     bac:	2f 5f       	subi	r18, 0xFF	; 255
     bae:	3f 4f       	sbci	r19, 0xFF	; 255
     bb0:	a6 96       	adiw	r28, 0x26	; 38
     bb2:	3f af       	std	Y+63, r19	; 0x3f
     bb4:	2e af       	std	Y+62, r18	; 0x3e
     bb6:	a6 97       	sbiw	r28, 0x26	; 38
     bb8:	a4 96       	adiw	r28, 0x24	; 36
     bba:	ee ad       	ldd	r30, Y+62	; 0x3e
     bbc:	ff ad       	ldd	r31, Y+63	; 0x3f
     bbe:	a4 97       	sbiw	r28, 0x24	; 36
     bc0:	00 82       	st	Z, r0
     bc2:	a4 96       	adiw	r28, 0x24	; 36
     bc4:	2e ad       	ldd	r18, Y+62	; 0x3e
     bc6:	3f ad       	ldd	r19, Y+63	; 0x3f
     bc8:	a4 97       	sbiw	r28, 0x24	; 36
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	a4 96       	adiw	r28, 0x24	; 36
     bd0:	3f af       	std	Y+63, r19	; 0x3f
     bd2:	2e af       	std	Y+62, r18	; 0x3e
     bd4:	a4 97       	sbiw	r28, 0x24	; 36
     bd6:	a7 96       	adiw	r28, 0x27	; 39
     bd8:	3f ad       	ldd	r19, Y+63	; 0x3f
     bda:	a7 97       	sbiw	r28, 0x27	; 39
     bdc:	31 50       	subi	r19, 0x01	; 1
     bde:	a7 96       	adiw	r28, 0x27	; 39
     be0:	3f af       	std	Y+63, r19	; 0x3f
     be2:	a7 97       	sbiw	r28, 0x27	; 39
     be4:	a7 96       	adiw	r28, 0x27	; 39
     be6:	8f ad       	ldd	r24, Y+63	; 0x3f
     be8:	a7 97       	sbiw	r28, 0x27	; 39
     bea:	88 23       	and	r24, r24
     bec:	b1 f6       	brne	.-84     	; 0xb9a <main+0x54>

	/* Initialize the UART driver */
	UART_init(&Config_Ptr);
     bee:	ce 01       	movw	r24, r28
     bf0:	87 5a       	subi	r24, 0xA7	; 167
     bf2:	9f 4f       	sbci	r25, 0xFF	; 255
     bf4:	0e 94 01 17 	call	0x2e02	; 0x2e02 <UART_init>

	uint8 counter = 0; /* Variable to count invalid password attempts */
     bf8:	fe 01       	movw	r30, r28
     bfa:	ea 5a       	subi	r30, 0xAA	; 170
     bfc:	ff 4f       	sbci	r31, 0xFF	; 255
     bfe:	10 82       	st	Z, r1
	uint8 choice = 0; /* Variable to store user's choice */
     c00:	fe 01       	movw	r30, r28
     c02:	eb 5a       	subi	r30, 0xAB	; 171
     c04:	ff 4f       	sbci	r31, 0xFF	; 255
     c06:	10 82       	st	Z, r1

	for (;;){
		/* Check if the current step satisfies the condition for the buzzer */
		if (step<3){
     c08:	fe 01       	movw	r30, r28
     c0a:	e9 5a       	subi	r30, 0xA9	; 169
     c0c:	ff 4f       	sbci	r31, 0xFF	; 255
     c0e:	80 81       	ld	r24, Z
     c10:	83 30       	cpi	r24, 0x03	; 3
     c12:	08 f0       	brcs	.+2      	; 0xc16 <main+0xd0>
     c14:	6f c1       	rjmp	.+734    	; 0xef4 <main+0x3ae>
			/* Collect and send passwords for verification */
			Start();
     c16:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <Start>
			collectPassword(password);
     c1a:	8a e6       	ldi	r24, 0x6A	; 106
     c1c:	91 e0       	ldi	r25, 0x01	; 1
     c1e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <collectPassword>

			/* Step 1 - Create a System Password */
			if (1==step){
     c22:	fe 01       	movw	r30, r28
     c24:	e9 5a       	subi	r30, 0xA9	; 169
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	80 81       	ld	r24, Z
     c2a:	81 30       	cpi	r24, 0x01	; 1
     c2c:	91 f4       	brne	.+36     	; 0xc52 <main+0x10c>
				/*Prompt user to re-enter password for confirmation */
				LCD_displayStringRowColumn(0,0,"Plz re-enter the");
     c2e:	20 e6       	ldi	r18, 0x60	; 96
     c30:	30 e0       	ldi	r19, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	60 e0       	ldi	r22, 0x00	; 0
     c36:	a9 01       	movw	r20, r18
     c38:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"same pass:");
     c3c:	21 e7       	ldi	r18, 0x71	; 113
     c3e:	30 e0       	ldi	r19, 0x00	; 0
     c40:	81 e0       	ldi	r24, 0x01	; 1
     c42:	60 e0       	ldi	r22, 0x00	; 0
     c44:	a9 01       	movw	r20, r18
     c46:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
				collectPassword(confPass);
     c4a:	8f e6       	ldi	r24, 0x6F	; 111
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0e 94 76 0a 	call	0x14ec	; 0x14ec <collectPassword>
     c52:	fe 01       	movw	r30, r28
     c54:	ef 5a       	subi	r30, 0xAF	; 175
     c56:	ff 4f       	sbci	r31, 0xFF	; 255
     c58:	80 e0       	ldi	r24, 0x00	; 0
     c5a:	90 e0       	ldi	r25, 0x00	; 0
     c5c:	a0 e2       	ldi	r26, 0x20	; 32
     c5e:	b1 e4       	ldi	r27, 0x41	; 65
     c60:	80 83       	st	Z, r24
     c62:	91 83       	std	Z+1, r25	; 0x01
     c64:	a2 83       	std	Z+2, r26	; 0x02
     c66:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c68:	8e 01       	movw	r16, r28
     c6a:	03 5b       	subi	r16, 0xB3	; 179
     c6c:	1f 4f       	sbci	r17, 0xFF	; 255
     c6e:	fe 01       	movw	r30, r28
     c70:	ef 5a       	subi	r30, 0xAF	; 175
     c72:	ff 4f       	sbci	r31, 0xFF	; 255
     c74:	60 81       	ld	r22, Z
     c76:	71 81       	ldd	r23, Z+1	; 0x01
     c78:	82 81       	ldd	r24, Z+2	; 0x02
     c7a:	93 81       	ldd	r25, Z+3	; 0x03
     c7c:	20 e0       	ldi	r18, 0x00	; 0
     c7e:	30 e0       	ldi	r19, 0x00	; 0
     c80:	4a ef       	ldi	r20, 0xFA	; 250
     c82:	54 e4       	ldi	r21, 0x44	; 68
     c84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c88:	dc 01       	movw	r26, r24
     c8a:	cb 01       	movw	r24, r22
     c8c:	f8 01       	movw	r30, r16
     c8e:	80 83       	st	Z, r24
     c90:	91 83       	std	Z+1, r25	; 0x01
     c92:	a2 83       	std	Z+2, r26	; 0x02
     c94:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c96:	fe 01       	movw	r30, r28
     c98:	e3 5b       	subi	r30, 0xB3	; 179
     c9a:	ff 4f       	sbci	r31, 0xFF	; 255
     c9c:	60 81       	ld	r22, Z
     c9e:	71 81       	ldd	r23, Z+1	; 0x01
     ca0:	82 81       	ldd	r24, Z+2	; 0x02
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	20 e0       	ldi	r18, 0x00	; 0
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	40 e8       	ldi	r20, 0x80	; 128
     caa:	5f e3       	ldi	r21, 0x3F	; 63
     cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cb0:	88 23       	and	r24, r24
     cb2:	44 f4       	brge	.+16     	; 0xcc4 <main+0x17e>
		__ticks = 1;
     cb4:	fe 01       	movw	r30, r28
     cb6:	e5 5b       	subi	r30, 0xB5	; 181
     cb8:	ff 4f       	sbci	r31, 0xFF	; 255
     cba:	81 e0       	ldi	r24, 0x01	; 1
     cbc:	90 e0       	ldi	r25, 0x00	; 0
     cbe:	91 83       	std	Z+1, r25	; 0x01
     cc0:	80 83       	st	Z, r24
     cc2:	64 c0       	rjmp	.+200    	; 0xd8c <main+0x246>
	else if (__tmp > 65535)
     cc4:	fe 01       	movw	r30, r28
     cc6:	e3 5b       	subi	r30, 0xB3	; 179
     cc8:	ff 4f       	sbci	r31, 0xFF	; 255
     cca:	60 81       	ld	r22, Z
     ccc:	71 81       	ldd	r23, Z+1	; 0x01
     cce:	82 81       	ldd	r24, Z+2	; 0x02
     cd0:	93 81       	ldd	r25, Z+3	; 0x03
     cd2:	20 e0       	ldi	r18, 0x00	; 0
     cd4:	3f ef       	ldi	r19, 0xFF	; 255
     cd6:	4f e7       	ldi	r20, 0x7F	; 127
     cd8:	57 e4       	ldi	r21, 0x47	; 71
     cda:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cde:	18 16       	cp	r1, r24
     ce0:	0c f0       	brlt	.+2      	; 0xce4 <main+0x19e>
     ce2:	43 c0       	rjmp	.+134    	; 0xd6a <main+0x224>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ce4:	fe 01       	movw	r30, r28
     ce6:	ef 5a       	subi	r30, 0xAF	; 175
     ce8:	ff 4f       	sbci	r31, 0xFF	; 255
     cea:	60 81       	ld	r22, Z
     cec:	71 81       	ldd	r23, Z+1	; 0x01
     cee:	82 81       	ldd	r24, Z+2	; 0x02
     cf0:	93 81       	ldd	r25, Z+3	; 0x03
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	40 e2       	ldi	r20, 0x20	; 32
     cf8:	51 e4       	ldi	r21, 0x41	; 65
     cfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	8e 01       	movw	r16, r28
     d04:	05 5b       	subi	r16, 0xB5	; 181
     d06:	1f 4f       	sbci	r17, 0xFF	; 255
     d08:	bc 01       	movw	r22, r24
     d0a:	cd 01       	movw	r24, r26
     d0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d10:	dc 01       	movw	r26, r24
     d12:	cb 01       	movw	r24, r22
     d14:	f8 01       	movw	r30, r16
     d16:	91 83       	std	Z+1, r25	; 0x01
     d18:	80 83       	st	Z, r24
     d1a:	1f c0       	rjmp	.+62     	; 0xd5a <main+0x214>
     d1c:	fe 01       	movw	r30, r28
     d1e:	e7 5b       	subi	r30, 0xB7	; 183
     d20:	ff 4f       	sbci	r31, 0xFF	; 255
     d22:	88 ec       	ldi	r24, 0xC8	; 200
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	91 83       	std	Z+1, r25	; 0x01
     d28:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d2a:	fe 01       	movw	r30, r28
     d2c:	e7 5b       	subi	r30, 0xB7	; 183
     d2e:	ff 4f       	sbci	r31, 0xFF	; 255
     d30:	80 81       	ld	r24, Z
     d32:	91 81       	ldd	r25, Z+1	; 0x01
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	f1 f7       	brne	.-4      	; 0xd34 <main+0x1ee>
     d38:	fe 01       	movw	r30, r28
     d3a:	e7 5b       	subi	r30, 0xB7	; 183
     d3c:	ff 4f       	sbci	r31, 0xFF	; 255
     d3e:	91 83       	std	Z+1, r25	; 0x01
     d40:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d42:	de 01       	movw	r26, r28
     d44:	a5 5b       	subi	r26, 0xB5	; 181
     d46:	bf 4f       	sbci	r27, 0xFF	; 255
     d48:	fe 01       	movw	r30, r28
     d4a:	e5 5b       	subi	r30, 0xB5	; 181
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	01 97       	sbiw	r24, 0x01	; 1
     d54:	11 96       	adiw	r26, 0x01	; 1
     d56:	9c 93       	st	X, r25
     d58:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d5a:	fe 01       	movw	r30, r28
     d5c:	e5 5b       	subi	r30, 0xB5	; 181
     d5e:	ff 4f       	sbci	r31, 0xFF	; 255
     d60:	80 81       	ld	r24, Z
     d62:	91 81       	ldd	r25, Z+1	; 0x01
     d64:	00 97       	sbiw	r24, 0x00	; 0
     d66:	d1 f6       	brne	.-76     	; 0xd1c <main+0x1d6>
     d68:	27 c0       	rjmp	.+78     	; 0xdb8 <main+0x272>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d6a:	8e 01       	movw	r16, r28
     d6c:	05 5b       	subi	r16, 0xB5	; 181
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	fe 01       	movw	r30, r28
     d72:	e3 5b       	subi	r30, 0xB3	; 179
     d74:	ff 4f       	sbci	r31, 0xFF	; 255
     d76:	60 81       	ld	r22, Z
     d78:	71 81       	ldd	r23, Z+1	; 0x01
     d7a:	82 81       	ldd	r24, Z+2	; 0x02
     d7c:	93 81       	ldd	r25, Z+3	; 0x03
     d7e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d82:	dc 01       	movw	r26, r24
     d84:	cb 01       	movw	r24, r22
     d86:	f8 01       	movw	r30, r16
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	80 83       	st	Z, r24
     d8c:	de 01       	movw	r26, r28
     d8e:	a9 5b       	subi	r26, 0xB9	; 185
     d90:	bf 4f       	sbci	r27, 0xFF	; 255
     d92:	fe 01       	movw	r30, r28
     d94:	e5 5b       	subi	r30, 0xB5	; 181
     d96:	ff 4f       	sbci	r31, 0xFF	; 255
     d98:	80 81       	ld	r24, Z
     d9a:	91 81       	ldd	r25, Z+1	; 0x01
     d9c:	8d 93       	st	X+, r24
     d9e:	9c 93       	st	X, r25
     da0:	fe 01       	movw	r30, r28
     da2:	e9 5b       	subi	r30, 0xB9	; 185
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	80 81       	ld	r24, Z
     da8:	91 81       	ldd	r25, Z+1	; 0x01
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <main+0x264>
     dae:	fe 01       	movw	r30, r28
     db0:	e9 5b       	subi	r30, 0xB9	; 185
     db2:	ff 4f       	sbci	r31, 0xFF	; 255
     db4:	91 83       	std	Z+1, r25	; 0x01
     db6:	80 83       	st	Z, r24
			}
			_delay_ms(10);

			/* Send the password to the slave */
			sendPassword(password);
     db8:	8a e6       	ldi	r24, 0x6A	; 106
     dba:	91 e0       	ldi	r25, 0x01	; 1
     dbc:	0e 94 33 0b 	call	0x1666	; 0x1666 <sendPassword>
     dc0:	fe 01       	movw	r30, r28
     dc2:	ed 5b       	subi	r30, 0xBD	; 189
     dc4:	ff 4f       	sbci	r31, 0xFF	; 255
     dc6:	80 e0       	ldi	r24, 0x00	; 0
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	a0 e2       	ldi	r26, 0x20	; 32
     dcc:	b1 e4       	ldi	r27, 0x41	; 65
     dce:	80 83       	st	Z, r24
     dd0:	91 83       	std	Z+1, r25	; 0x01
     dd2:	a2 83       	std	Z+2, r26	; 0x02
     dd4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd6:	8e 01       	movw	r16, r28
     dd8:	01 5c       	subi	r16, 0xC1	; 193
     dda:	1f 4f       	sbci	r17, 0xFF	; 255
     ddc:	fe 01       	movw	r30, r28
     dde:	ed 5b       	subi	r30, 0xBD	; 189
     de0:	ff 4f       	sbci	r31, 0xFF	; 255
     de2:	60 81       	ld	r22, Z
     de4:	71 81       	ldd	r23, Z+1	; 0x01
     de6:	82 81       	ldd	r24, Z+2	; 0x02
     de8:	93 81       	ldd	r25, Z+3	; 0x03
     dea:	20 e0       	ldi	r18, 0x00	; 0
     dec:	30 e0       	ldi	r19, 0x00	; 0
     dee:	4a ef       	ldi	r20, 0xFA	; 250
     df0:	54 e4       	ldi	r21, 0x44	; 68
     df2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df6:	dc 01       	movw	r26, r24
     df8:	cb 01       	movw	r24, r22
     dfa:	f8 01       	movw	r30, r16
     dfc:	80 83       	st	Z, r24
     dfe:	91 83       	std	Z+1, r25	; 0x01
     e00:	a2 83       	std	Z+2, r26	; 0x02
     e02:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e04:	fe 01       	movw	r30, r28
     e06:	ff 96       	adiw	r30, 0x3f	; 63
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5f e3       	ldi	r21, 0x3F	; 63
     e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1c:	88 23       	and	r24, r24
     e1e:	2c f4       	brge	.+10     	; 0xe2a <main+0x2e4>
		__ticks = 1;
     e20:	81 e0       	ldi	r24, 0x01	; 1
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	9e af       	std	Y+62, r25	; 0x3e
     e26:	8d af       	std	Y+61, r24	; 0x3d
     e28:	46 c0       	rjmp	.+140    	; 0xeb6 <main+0x370>
	else if (__tmp > 65535)
     e2a:	fe 01       	movw	r30, r28
     e2c:	ff 96       	adiw	r30, 0x3f	; 63
     e2e:	60 81       	ld	r22, Z
     e30:	71 81       	ldd	r23, Z+1	; 0x01
     e32:	82 81       	ldd	r24, Z+2	; 0x02
     e34:	93 81       	ldd	r25, Z+3	; 0x03
     e36:	20 e0       	ldi	r18, 0x00	; 0
     e38:	3f ef       	ldi	r19, 0xFF	; 255
     e3a:	4f e7       	ldi	r20, 0x7F	; 127
     e3c:	57 e4       	ldi	r21, 0x47	; 71
     e3e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e42:	18 16       	cp	r1, r24
     e44:	64 f5       	brge	.+88     	; 0xe9e <main+0x358>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e46:	fe 01       	movw	r30, r28
     e48:	ed 5b       	subi	r30, 0xBD	; 189
     e4a:	ff 4f       	sbci	r31, 0xFF	; 255
     e4c:	60 81       	ld	r22, Z
     e4e:	71 81       	ldd	r23, Z+1	; 0x01
     e50:	82 81       	ldd	r24, Z+2	; 0x02
     e52:	93 81       	ldd	r25, Z+3	; 0x03
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e2       	ldi	r20, 0x20	; 32
     e5a:	51 e4       	ldi	r21, 0x41	; 65
     e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e60:	dc 01       	movw	r26, r24
     e62:	cb 01       	movw	r24, r22
     e64:	bc 01       	movw	r22, r24
     e66:	cd 01       	movw	r24, r26
     e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e6c:	dc 01       	movw	r26, r24
     e6e:	cb 01       	movw	r24, r22
     e70:	9e af       	std	Y+62, r25	; 0x3e
     e72:	8d af       	std	Y+61, r24	; 0x3d
     e74:	0f c0       	rjmp	.+30     	; 0xe94 <main+0x34e>
     e76:	88 ec       	ldi	r24, 0xC8	; 200
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c af       	std	Y+60, r25	; 0x3c
     e7c:	8b af       	std	Y+59, r24	; 0x3b
     e7e:	8b ad       	ldd	r24, Y+59	; 0x3b
     e80:	9c ad       	ldd	r25, Y+60	; 0x3c
     e82:	01 97       	sbiw	r24, 0x01	; 1
     e84:	f1 f7       	brne	.-4      	; 0xe82 <main+0x33c>
     e86:	9c af       	std	Y+60, r25	; 0x3c
     e88:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e8a:	8d ad       	ldd	r24, Y+61	; 0x3d
     e8c:	9e ad       	ldd	r25, Y+62	; 0x3e
     e8e:	01 97       	sbiw	r24, 0x01	; 1
     e90:	9e af       	std	Y+62, r25	; 0x3e
     e92:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e94:	8d ad       	ldd	r24, Y+61	; 0x3d
     e96:	9e ad       	ldd	r25, Y+62	; 0x3e
     e98:	00 97       	sbiw	r24, 0x00	; 0
     e9a:	69 f7       	brne	.-38     	; 0xe76 <main+0x330>
     e9c:	16 c0       	rjmp	.+44     	; 0xeca <main+0x384>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e9e:	fe 01       	movw	r30, r28
     ea0:	ff 96       	adiw	r30, 0x3f	; 63
     ea2:	60 81       	ld	r22, Z
     ea4:	71 81       	ldd	r23, Z+1	; 0x01
     ea6:	82 81       	ldd	r24, Z+2	; 0x02
     ea8:	93 81       	ldd	r25, Z+3	; 0x03
     eaa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eae:	dc 01       	movw	r26, r24
     eb0:	cb 01       	movw	r24, r22
     eb2:	9e af       	std	Y+62, r25	; 0x3e
     eb4:	8d af       	std	Y+61, r24	; 0x3d
     eb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     eb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     eba:	9a af       	std	Y+58, r25	; 0x3a
     ebc:	89 af       	std	Y+57, r24	; 0x39
     ebe:	89 ad       	ldd	r24, Y+57	; 0x39
     ec0:	9a ad       	ldd	r25, Y+58	; 0x3a
     ec2:	01 97       	sbiw	r24, 0x01	; 1
     ec4:	f1 f7       	brne	.-4      	; 0xec2 <main+0x37c>
     ec6:	9a af       	std	Y+58, r25	; 0x3a
     ec8:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(10);

			if (1==step)
     eca:	fe 01       	movw	r30, r28
     ecc:	e9 5a       	subi	r30, 0xA9	; 169
     ece:	ff 4f       	sbci	r31, 0xFF	; 255
     ed0:	80 81       	ld	r24, Z
     ed2:	81 30       	cpi	r24, 0x01	; 1
     ed4:	21 f4       	brne	.+8      	; 0xede <main+0x398>
			{
				/* Send the confirmation password to the slave */
				sendPassword(confPass);
     ed6:	8f e6       	ldi	r24, 0x6F	; 111
     ed8:	91 e0       	ldi	r25, 0x01	; 1
     eda:	0e 94 33 0b 	call	0x1666	; 0x1666 <sendPassword>
			}
			/* Wait for verification result */
			while(UART_recieveByte() != PASS_CHECKED){}
     ede:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
     ee2:	81 31       	cpi	r24, 0x11	; 17
     ee4:	e1 f7       	brne	.-8      	; 0xede <main+0x398>
			passwordsMatch=UART_recieveByte();
     ee6:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
     eea:	fe 01       	movw	r30, r28
     eec:	e8 5a       	subi	r30, 0xA8	; 168
     eee:	ff 4f       	sbci	r31, 0xFF	; 255
     ef0:	80 83       	st	Z, r24
     ef2:	0a c0       	rjmp	.+20     	; 0xf08 <main+0x3c2>
		}

		else{
			passwordsMatch=1;
     ef4:	fe 01       	movw	r30, r28
     ef6:	e8 5a       	subi	r30, 0xA8	; 168
     ef8:	ff 4f       	sbci	r31, 0xFF	; 255
     efa:	81 e0       	ldi	r24, 0x01	; 1
     efc:	80 83       	st	Z, r24
			step=1; /* go to step1 */
     efe:	fe 01       	movw	r30, r28
     f00:	e9 5a       	subi	r30, 0xA9	; 169
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	81 e0       	ldi	r24, 0x01	; 1
     f06:	80 83       	st	Z, r24
		}

		if (passwordsMatch){
     f08:	fe 01       	movw	r30, r28
     f0a:	e8 5a       	subi	r30, 0xA8	; 168
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	88 23       	and	r24, r24
     f12:	09 f4       	brne	.+2      	; 0xf16 <main+0x3d0>
     f14:	9c c0       	rjmp	.+312    	; 0x104e <main+0x508>

			counter=0;	/* Clear the counter of the incorrect pass */
     f16:	fe 01       	movw	r30, r28
     f18:	ea 5a       	subi	r30, 0xAA	; 170
     f1a:	ff 4f       	sbci	r31, 0xFF	; 255
     f1c:	10 82       	st	Z, r1

			if (1 == step){
     f1e:	fe 01       	movw	r30, r28
     f20:	e9 5a       	subi	r30, 0xA9	; 169
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 81       	ld	r24, Z
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	59 f5       	brne	.+86     	; 0xf80 <main+0x43a>
				choice=0;
     f2a:	fe 01       	movw	r30, r28
     f2c:	eb 5a       	subi	r30, 0xAB	; 171
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	10 82       	st	Z, r1
				/* Display main system options */
				LCD_displayStringRowColumn(0,0,"+ : Open Door    ");
     f32:	2c e7       	ldi	r18, 0x7C	; 124
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	80 e0       	ldi	r24, 0x00	; 0
     f38:	60 e0       	ldi	r22, 0x00	; 0
     f3a:	a9 01       	movw	r20, r18
     f3c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"- : Change Pass  ");
     f40:	2e e8       	ldi	r18, 0x8E	; 142
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	81 e0       	ldi	r24, 0x01	; 1
     f46:	60 e0       	ldi	r22, 0x00	; 0
     f48:	a9 01       	movw	r20, r18
     f4a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
     f4e:	06 c0       	rjmp	.+12     	; 0xf5c <main+0x416>

				/* Wait for user's choice */
				while(choice!='+' && choice!= '-')
				{
					/* Get the pressed button from keypad */
					choice = KEYPAD_getPressedKey();
     f50:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <KEYPAD_getPressedKey>
     f54:	fe 01       	movw	r30, r28
     f56:	eb 5a       	subi	r30, 0xAB	; 171
     f58:	ff 4f       	sbci	r31, 0xFF	; 255
     f5a:	80 83       	st	Z, r24
				/* Display main system options */
				LCD_displayStringRowColumn(0,0,"+ : Open Door    ");
				LCD_displayStringRowColumn(1,0,"- : Change Pass  ");

				/* Wait for user's choice */
				while(choice!='+' && choice!= '-')
     f5c:	fe 01       	movw	r30, r28
     f5e:	eb 5a       	subi	r30, 0xAB	; 171
     f60:	ff 4f       	sbci	r31, 0xFF	; 255
     f62:	80 81       	ld	r24, Z
     f64:	8b 32       	cpi	r24, 0x2B	; 43
     f66:	31 f0       	breq	.+12     	; 0xf74 <main+0x42e>
     f68:	fe 01       	movw	r30, r28
     f6a:	eb 5a       	subi	r30, 0xAB	; 171
     f6c:	ff 4f       	sbci	r31, 0xFF	; 255
     f6e:	80 81       	ld	r24, Z
     f70:	8d 32       	cpi	r24, 0x2D	; 45
     f72:	71 f7       	brne	.-36     	; 0xf50 <main+0x40a>
				{
					/* Get the pressed button from keypad */
					choice = KEYPAD_getPressedKey();
				}
				step=1; /* Go to step 2 */
     f74:	fe 01       	movw	r30, r28
     f76:	e9 5a       	subi	r30, 0xA9	; 169
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	81 e0       	ldi	r24, 0x01	; 1
     f7c:	80 83       	st	Z, r24
     f7e:	98 c2       	rjmp	.+1328   	; 0x14b0 <main+0x96a>
			}

			else /*if (2 == step)*/{

				switch (choice){
     f80:	fe 01       	movw	r30, r28
     f82:	eb 5a       	subi	r30, 0xAB	; 171
     f84:	ff 4f       	sbci	r31, 0xFF	; 255
     f86:	80 81       	ld	r24, Z
     f88:	28 2f       	mov	r18, r24
     f8a:	30 e0       	ldi	r19, 0x00	; 0
     f8c:	a2 96       	adiw	r28, 0x22	; 34
     f8e:	3f af       	std	Y+63, r19	; 0x3f
     f90:	2e af       	std	Y+62, r18	; 0x3e
     f92:	a2 97       	sbiw	r28, 0x22	; 34
     f94:	a2 96       	adiw	r28, 0x22	; 34
     f96:	8e ad       	ldd	r24, Y+62	; 0x3e
     f98:	9f ad       	ldd	r25, Y+63	; 0x3f
     f9a:	a2 97       	sbiw	r28, 0x22	; 34
     f9c:	8b 32       	cpi	r24, 0x2B	; 43
     f9e:	91 05       	cpc	r25, r1
     fa0:	41 f0       	breq	.+16     	; 0xfb2 <main+0x46c>
     fa2:	a2 96       	adiw	r28, 0x22	; 34
     fa4:	ee ad       	ldd	r30, Y+62	; 0x3e
     fa6:	ff ad       	ldd	r31, Y+63	; 0x3f
     fa8:	a2 97       	sbiw	r28, 0x22	; 34
     faa:	ed 32       	cpi	r30, 0x2D	; 45
     fac:	f1 05       	cpc	r31, r1
     fae:	e9 f1       	breq	.+122    	; 0x102a <main+0x4e4>
     fb0:	7f c2       	rjmp	.+1278   	; 0x14b0 <main+0x96a>

				case '+':
					LCD_displayStringRowColumn(0,0,"Correct pass      ");
     fb2:	20 ea       	ldi	r18, 0xA0	; 160
     fb4:	30 e0       	ldi	r19, 0x00	; 0
     fb6:	80 e0       	ldi	r24, 0x00	; 0
     fb8:	60 e0       	ldi	r22, 0x00	; 0
     fba:	a9 01       	movw	r20, r18
     fbc:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					/* Send choice to slave and execute actions */
					UART_sendByte(CHOICE);
     fc0:	80 e1       	ldi	r24, 0x10	; 16
     fc2:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
					UART_sendByte(PLUS);
     fc6:	80 e1       	ldi	r24, 0x10	; 16
     fc8:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
					LCD_clearScreen();
     fcc:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is          ");
     fd0:	23 eb       	ldi	r18, 0xB3	; 179
     fd2:	30 e0       	ldi	r19, 0x00	; 0
     fd4:	80 e0       	ldi	r24, 0x00	; 0
     fd6:	60 e0       	ldi	r22, 0x00	; 0
     fd8:	a9 01       	movw	r20, r18
     fda:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					LCD_displayStringRowColumn(1,0,"Unlocking");
     fde:	25 ec       	ldi	r18, 0xC5	; 197
     fe0:	30 e0       	ldi	r19, 0x00	; 0
     fe2:	81 e0       	ldi	r24, 0x01	; 1
     fe4:	60 e0       	ldi	r22, 0x00	; 0
     fe6:	a9 01       	movw	r20, r18
     fe8:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					while(UART_recieveByte() != NEXT){}
     fec:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
     ff0:	81 31       	cpi	r24, 0x11	; 17
     ff2:	e1 f7       	brne	.-8      	; 0xfec <main+0x4a6>
					LCD_clearScreen();
     ff4:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is Stable");
     ff8:	2f ec       	ldi	r18, 0xCF	; 207
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	60 e0       	ldi	r22, 0x00	; 0
    1000:	a9 01       	movw	r20, r18
    1002:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					while(UART_recieveByte() != NEXT){}
    1006:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
    100a:	81 31       	cpi	r24, 0x11	; 17
    100c:	e1 f7       	brne	.-8      	; 0x1006 <main+0x4c0>
					LCD_clearScreen();
    100e:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
					LCD_displayStringRowColumn(0,0,"Door is Locking");
    1012:	2e ed       	ldi	r18, 0xDE	; 222
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	a9 01       	movw	r20, r18
    101c:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					while(UART_recieveByte() != NEXT){}
    1020:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
    1024:	81 31       	cpi	r24, 0x11	; 17
    1026:	e1 f7       	brne	.-8      	; 0x1020 <main+0x4da>
    1028:	43 c2       	rjmp	.+1158   	; 0x14b0 <main+0x96a>

					break;

				case '-':
					LCD_displayStringRowColumn(0,0,"Correct pass      ");
    102a:	20 ea       	ldi	r18, 0xA0	; 160
    102c:	30 e0       	ldi	r19, 0x00	; 0
    102e:	80 e0       	ldi	r24, 0x00	; 0
    1030:	60 e0       	ldi	r22, 0x00	; 0
    1032:	a9 01       	movw	r20, r18
    1034:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					/* Send choice to slave and repeat step 1 */
					UART_sendByte(CHOICE);
    1038:	80 e1       	ldi	r24, 0x10	; 16
    103a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
					UART_sendByte(MINUS);
    103e:	8c e0       	ldi	r24, 0x0C	; 12
    1040:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
					step=0;
    1044:	fe 01       	movw	r30, r28
    1046:	e9 5a       	subi	r30, 0xA9	; 169
    1048:	ff 4f       	sbci	r31, 0xFF	; 255
    104a:	10 82       	st	Z, r1
    104c:	31 c2       	rjmp	.+1122   	; 0x14b0 <main+0x96a>
				}
			}
		}

		else{
			switch (step){
    104e:	fe 01       	movw	r30, r28
    1050:	e9 5a       	subi	r30, 0xA9	; 169
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	28 2f       	mov	r18, r24
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	a0 96       	adiw	r28, 0x20	; 32
    105c:	3f af       	std	Y+63, r19	; 0x3f
    105e:	2e af       	std	Y+62, r18	; 0x3e
    1060:	a0 97       	sbiw	r28, 0x20	; 32
    1062:	a0 96       	adiw	r28, 0x20	; 32
    1064:	8e ad       	ldd	r24, Y+62	; 0x3e
    1066:	9f ad       	ldd	r25, Y+63	; 0x3f
    1068:	a0 97       	sbiw	r28, 0x20	; 32
    106a:	81 30       	cpi	r24, 0x01	; 1
    106c:	91 05       	cpc	r25, r1
    106e:	49 f0       	breq	.+18     	; 0x1082 <main+0x53c>
    1070:	a0 96       	adiw	r28, 0x20	; 32
    1072:	ee ad       	ldd	r30, Y+62	; 0x3e
    1074:	ff ad       	ldd	r31, Y+63	; 0x3f
    1076:	a0 97       	sbiw	r28, 0x20	; 32
    1078:	e2 30       	cpi	r30, 0x02	; 2
    107a:	f1 05       	cpc	r31, r1
    107c:	09 f4       	brne	.+2      	; 0x1080 <main+0x53a>
    107e:	03 c1       	rjmp	.+518    	; 0x1286 <main+0x740>
    1080:	17 c2       	rjmp	.+1070   	; 0x14b0 <main+0x96a>
			case 1:
				LCD_clearScreen();
    1082:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Passwords do not ");
    1086:	2e ee       	ldi	r18, 0xEE	; 238
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	80 e0       	ldi	r24, 0x00	; 0
    108c:	60 e0       	ldi	r22, 0x00	; 0
    108e:	a9 01       	movw	r20, r18
    1090:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
				LCD_displayStringRowColumn(1,0,"match");
    1094:	20 e0       	ldi	r18, 0x00	; 0
    1096:	31 e0       	ldi	r19, 0x01	; 1
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	60 e0       	ldi	r22, 0x00	; 0
    109c:	a9 01       	movw	r20, r18
    109e:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e0       	ldi	r25, 0x00	; 0
    10a6:	a0 e2       	ldi	r26, 0x20	; 32
    10a8:	b1 e4       	ldi	r27, 0x41	; 65
    10aa:	8d ab       	std	Y+53, r24	; 0x35
    10ac:	9e ab       	std	Y+54, r25	; 0x36
    10ae:	af ab       	std	Y+55, r26	; 0x37
    10b0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10b2:	6d a9       	ldd	r22, Y+53	; 0x35
    10b4:	7e a9       	ldd	r23, Y+54	; 0x36
    10b6:	8f a9       	ldd	r24, Y+55	; 0x37
    10b8:	98 ad       	ldd	r25, Y+56	; 0x38
    10ba:	20 e0       	ldi	r18, 0x00	; 0
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	4a ef       	ldi	r20, 0xFA	; 250
    10c0:	54 e4       	ldi	r21, 0x44	; 68
    10c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c6:	dc 01       	movw	r26, r24
    10c8:	cb 01       	movw	r24, r22
    10ca:	89 ab       	std	Y+49, r24	; 0x31
    10cc:	9a ab       	std	Y+50, r25	; 0x32
    10ce:	ab ab       	std	Y+51, r26	; 0x33
    10d0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    10d2:	69 a9       	ldd	r22, Y+49	; 0x31
    10d4:	7a a9       	ldd	r23, Y+50	; 0x32
    10d6:	8b a9       	ldd	r24, Y+51	; 0x33
    10d8:	9c a9       	ldd	r25, Y+52	; 0x34
    10da:	20 e0       	ldi	r18, 0x00	; 0
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	40 e8       	ldi	r20, 0x80	; 128
    10e0:	5f e3       	ldi	r21, 0x3F	; 63
    10e2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10e6:	88 23       	and	r24, r24
    10e8:	2c f4       	brge	.+10     	; 0x10f4 <main+0x5ae>
		__ticks = 1;
    10ea:	81 e0       	ldi	r24, 0x01	; 1
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	98 ab       	std	Y+48, r25	; 0x30
    10f0:	8f a7       	std	Y+47, r24	; 0x2f
    10f2:	3f c0       	rjmp	.+126    	; 0x1172 <main+0x62c>
	else if (__tmp > 65535)
    10f4:	69 a9       	ldd	r22, Y+49	; 0x31
    10f6:	7a a9       	ldd	r23, Y+50	; 0x32
    10f8:	8b a9       	ldd	r24, Y+51	; 0x33
    10fa:	9c a9       	ldd	r25, Y+52	; 0x34
    10fc:	20 e0       	ldi	r18, 0x00	; 0
    10fe:	3f ef       	ldi	r19, 0xFF	; 255
    1100:	4f e7       	ldi	r20, 0x7F	; 127
    1102:	57 e4       	ldi	r21, 0x47	; 71
    1104:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1108:	18 16       	cp	r1, r24
    110a:	4c f5       	brge	.+82     	; 0x115e <main+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    110c:	6d a9       	ldd	r22, Y+53	; 0x35
    110e:	7e a9       	ldd	r23, Y+54	; 0x36
    1110:	8f a9       	ldd	r24, Y+55	; 0x37
    1112:	98 ad       	ldd	r25, Y+56	; 0x38
    1114:	20 e0       	ldi	r18, 0x00	; 0
    1116:	30 e0       	ldi	r19, 0x00	; 0
    1118:	40 e2       	ldi	r20, 0x20	; 32
    111a:	51 e4       	ldi	r21, 0x41	; 65
    111c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1120:	dc 01       	movw	r26, r24
    1122:	cb 01       	movw	r24, r22
    1124:	bc 01       	movw	r22, r24
    1126:	cd 01       	movw	r24, r26
    1128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	98 ab       	std	Y+48, r25	; 0x30
    1132:	8f a7       	std	Y+47, r24	; 0x2f
    1134:	0f c0       	rjmp	.+30     	; 0x1154 <main+0x60e>
    1136:	88 ec       	ldi	r24, 0xC8	; 200
    1138:	90 e0       	ldi	r25, 0x00	; 0
    113a:	9e a7       	std	Y+46, r25	; 0x2e
    113c:	8d a7       	std	Y+45, r24	; 0x2d
    113e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1140:	9e a5       	ldd	r25, Y+46	; 0x2e
    1142:	01 97       	sbiw	r24, 0x01	; 1
    1144:	f1 f7       	brne	.-4      	; 0x1142 <main+0x5fc>
    1146:	9e a7       	std	Y+46, r25	; 0x2e
    1148:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    114a:	8f a5       	ldd	r24, Y+47	; 0x2f
    114c:	98 a9       	ldd	r25, Y+48	; 0x30
    114e:	01 97       	sbiw	r24, 0x01	; 1
    1150:	98 ab       	std	Y+48, r25	; 0x30
    1152:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1154:	8f a5       	ldd	r24, Y+47	; 0x2f
    1156:	98 a9       	ldd	r25, Y+48	; 0x30
    1158:	00 97       	sbiw	r24, 0x00	; 0
    115a:	69 f7       	brne	.-38     	; 0x1136 <main+0x5f0>
    115c:	14 c0       	rjmp	.+40     	; 0x1186 <main+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    115e:	69 a9       	ldd	r22, Y+49	; 0x31
    1160:	7a a9       	ldd	r23, Y+50	; 0x32
    1162:	8b a9       	ldd	r24, Y+51	; 0x33
    1164:	9c a9       	ldd	r25, Y+52	; 0x34
    1166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    116a:	dc 01       	movw	r26, r24
    116c:	cb 01       	movw	r24, r22
    116e:	98 ab       	std	Y+48, r25	; 0x30
    1170:	8f a7       	std	Y+47, r24	; 0x2f
    1172:	8f a5       	ldd	r24, Y+47	; 0x2f
    1174:	98 a9       	ldd	r25, Y+48	; 0x30
    1176:	9c a7       	std	Y+44, r25	; 0x2c
    1178:	8b a7       	std	Y+43, r24	; 0x2b
    117a:	8b a5       	ldd	r24, Y+43	; 0x2b
    117c:	9c a5       	ldd	r25, Y+44	; 0x2c
    117e:	01 97       	sbiw	r24, 0x01	; 1
    1180:	f1 f7       	brne	.-4      	; 0x117e <main+0x638>
    1182:	9c a7       	std	Y+44, r25	; 0x2c
    1184:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(10);
				LCD_clearScreen();
    1186:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Please try again ");
    118a:	26 e0       	ldi	r18, 0x06	; 6
    118c:	31 e0       	ldi	r19, 0x01	; 1
    118e:	80 e0       	ldi	r24, 0x00	; 0
    1190:	60 e0       	ldi	r22, 0x00	; 0
    1192:	a9 01       	movw	r20, r18
    1194:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	90 e0       	ldi	r25, 0x00	; 0
    119c:	a8 ec       	ldi	r26, 0xC8	; 200
    119e:	b2 e4       	ldi	r27, 0x42	; 66
    11a0:	8f a3       	std	Y+39, r24	; 0x27
    11a2:	98 a7       	std	Y+40, r25	; 0x28
    11a4:	a9 a7       	std	Y+41, r26	; 0x29
    11a6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a8:	6f a1       	ldd	r22, Y+39	; 0x27
    11aa:	78 a5       	ldd	r23, Y+40	; 0x28
    11ac:	89 a5       	ldd	r24, Y+41	; 0x29
    11ae:	9a a5       	ldd	r25, Y+42	; 0x2a
    11b0:	20 e0       	ldi	r18, 0x00	; 0
    11b2:	30 e0       	ldi	r19, 0x00	; 0
    11b4:	4a ef       	ldi	r20, 0xFA	; 250
    11b6:	54 e4       	ldi	r21, 0x44	; 68
    11b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11bc:	dc 01       	movw	r26, r24
    11be:	cb 01       	movw	r24, r22
    11c0:	8b a3       	std	Y+35, r24	; 0x23
    11c2:	9c a3       	std	Y+36, r25	; 0x24
    11c4:	ad a3       	std	Y+37, r26	; 0x25
    11c6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    11c8:	6b a1       	ldd	r22, Y+35	; 0x23
    11ca:	7c a1       	ldd	r23, Y+36	; 0x24
    11cc:	8d a1       	ldd	r24, Y+37	; 0x25
    11ce:	9e a1       	ldd	r25, Y+38	; 0x26
    11d0:	20 e0       	ldi	r18, 0x00	; 0
    11d2:	30 e0       	ldi	r19, 0x00	; 0
    11d4:	40 e8       	ldi	r20, 0x80	; 128
    11d6:	5f e3       	ldi	r21, 0x3F	; 63
    11d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11dc:	88 23       	and	r24, r24
    11de:	2c f4       	brge	.+10     	; 0x11ea <main+0x6a4>
		__ticks = 1;
    11e0:	81 e0       	ldi	r24, 0x01	; 1
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	9a a3       	std	Y+34, r25	; 0x22
    11e6:	89 a3       	std	Y+33, r24	; 0x21
    11e8:	3f c0       	rjmp	.+126    	; 0x1268 <main+0x722>
	else if (__tmp > 65535)
    11ea:	6b a1       	ldd	r22, Y+35	; 0x23
    11ec:	7c a1       	ldd	r23, Y+36	; 0x24
    11ee:	8d a1       	ldd	r24, Y+37	; 0x25
    11f0:	9e a1       	ldd	r25, Y+38	; 0x26
    11f2:	20 e0       	ldi	r18, 0x00	; 0
    11f4:	3f ef       	ldi	r19, 0xFF	; 255
    11f6:	4f e7       	ldi	r20, 0x7F	; 127
    11f8:	57 e4       	ldi	r21, 0x47	; 71
    11fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11fe:	18 16       	cp	r1, r24
    1200:	4c f5       	brge	.+82     	; 0x1254 <main+0x70e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1202:	6f a1       	ldd	r22, Y+39	; 0x27
    1204:	78 a5       	ldd	r23, Y+40	; 0x28
    1206:	89 a5       	ldd	r24, Y+41	; 0x29
    1208:	9a a5       	ldd	r25, Y+42	; 0x2a
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	30 e0       	ldi	r19, 0x00	; 0
    120e:	40 e2       	ldi	r20, 0x20	; 32
    1210:	51 e4       	ldi	r21, 0x41	; 65
    1212:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1216:	dc 01       	movw	r26, r24
    1218:	cb 01       	movw	r24, r22
    121a:	bc 01       	movw	r22, r24
    121c:	cd 01       	movw	r24, r26
    121e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	9a a3       	std	Y+34, r25	; 0x22
    1228:	89 a3       	std	Y+33, r24	; 0x21
    122a:	0f c0       	rjmp	.+30     	; 0x124a <main+0x704>
    122c:	88 ec       	ldi	r24, 0xC8	; 200
    122e:	90 e0       	ldi	r25, 0x00	; 0
    1230:	98 a3       	std	Y+32, r25	; 0x20
    1232:	8f 8f       	std	Y+31, r24	; 0x1f
    1234:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1236:	98 a1       	ldd	r25, Y+32	; 0x20
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <main+0x6f2>
    123c:	98 a3       	std	Y+32, r25	; 0x20
    123e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1240:	89 a1       	ldd	r24, Y+33	; 0x21
    1242:	9a a1       	ldd	r25, Y+34	; 0x22
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	9a a3       	std	Y+34, r25	; 0x22
    1248:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    124a:	89 a1       	ldd	r24, Y+33	; 0x21
    124c:	9a a1       	ldd	r25, Y+34	; 0x22
    124e:	00 97       	sbiw	r24, 0x00	; 0
    1250:	69 f7       	brne	.-38     	; 0x122c <main+0x6e6>
    1252:	14 c0       	rjmp	.+40     	; 0x127c <main+0x736>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1254:	6b a1       	ldd	r22, Y+35	; 0x23
    1256:	7c a1       	ldd	r23, Y+36	; 0x24
    1258:	8d a1       	ldd	r24, Y+37	; 0x25
    125a:	9e a1       	ldd	r25, Y+38	; 0x26
    125c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1260:	dc 01       	movw	r26, r24
    1262:	cb 01       	movw	r24, r22
    1264:	9a a3       	std	Y+34, r25	; 0x22
    1266:	89 a3       	std	Y+33, r24	; 0x21
    1268:	89 a1       	ldd	r24, Y+33	; 0x21
    126a:	9a a1       	ldd	r25, Y+34	; 0x22
    126c:	9e 8f       	std	Y+30, r25	; 0x1e
    126e:	8d 8f       	std	Y+29, r24	; 0x1d
    1270:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1272:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1274:	01 97       	sbiw	r24, 0x01	; 1
    1276:	f1 f7       	brne	.-4      	; 0x1274 <main+0x72e>
    1278:	9e 8f       	std	Y+30, r25	; 0x1e
    127a:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(100);
				step=0; /* return to repeat step 1 again */
    127c:	fe 01       	movw	r30, r28
    127e:	e9 5a       	subi	r30, 0xA9	; 169
    1280:	ff 4f       	sbci	r31, 0xFF	; 255
    1282:	10 82       	st	Z, r1
    1284:	15 c1       	rjmp	.+554    	; 0x14b0 <main+0x96a>
				break;
			case 2:
				LCD_clearScreen();
    1286:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
				LCD_displayStringRowColumn(0,0,"Invalid Password ");
    128a:	28 e1       	ldi	r18, 0x18	; 24
    128c:	31 e0       	ldi	r19, 0x01	; 1
    128e:	80 e0       	ldi	r24, 0x00	; 0
    1290:	60 e0       	ldi	r22, 0x00	; 0
    1292:	a9 01       	movw	r20, r18
    1294:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
    1298:	80 e0       	ldi	r24, 0x00	; 0
    129a:	90 e0       	ldi	r25, 0x00	; 0
    129c:	a8 ec       	ldi	r26, 0xC8	; 200
    129e:	b2 e4       	ldi	r27, 0x42	; 66
    12a0:	89 8f       	std	Y+25, r24	; 0x19
    12a2:	9a 8f       	std	Y+26, r25	; 0x1a
    12a4:	ab 8f       	std	Y+27, r26	; 0x1b
    12a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a8:	69 8d       	ldd	r22, Y+25	; 0x19
    12aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12b0:	20 e0       	ldi	r18, 0x00	; 0
    12b2:	30 e0       	ldi	r19, 0x00	; 0
    12b4:	4a ef       	ldi	r20, 0xFA	; 250
    12b6:	54 e4       	ldi	r21, 0x44	; 68
    12b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12bc:	dc 01       	movw	r26, r24
    12be:	cb 01       	movw	r24, r22
    12c0:	8d 8b       	std	Y+21, r24	; 0x15
    12c2:	9e 8b       	std	Y+22, r25	; 0x16
    12c4:	af 8b       	std	Y+23, r26	; 0x17
    12c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12c8:	6d 89       	ldd	r22, Y+21	; 0x15
    12ca:	7e 89       	ldd	r23, Y+22	; 0x16
    12cc:	8f 89       	ldd	r24, Y+23	; 0x17
    12ce:	98 8d       	ldd	r25, Y+24	; 0x18
    12d0:	20 e0       	ldi	r18, 0x00	; 0
    12d2:	30 e0       	ldi	r19, 0x00	; 0
    12d4:	40 e8       	ldi	r20, 0x80	; 128
    12d6:	5f e3       	ldi	r21, 0x3F	; 63
    12d8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12dc:	88 23       	and	r24, r24
    12de:	2c f4       	brge	.+10     	; 0x12ea <main+0x7a4>
		__ticks = 1;
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	9c 8b       	std	Y+20, r25	; 0x14
    12e6:	8b 8b       	std	Y+19, r24	; 0x13
    12e8:	3f c0       	rjmp	.+126    	; 0x1368 <main+0x822>
	else if (__tmp > 65535)
    12ea:	6d 89       	ldd	r22, Y+21	; 0x15
    12ec:	7e 89       	ldd	r23, Y+22	; 0x16
    12ee:	8f 89       	ldd	r24, Y+23	; 0x17
    12f0:	98 8d       	ldd	r25, Y+24	; 0x18
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	3f ef       	ldi	r19, 0xFF	; 255
    12f6:	4f e7       	ldi	r20, 0x7F	; 127
    12f8:	57 e4       	ldi	r21, 0x47	; 71
    12fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12fe:	18 16       	cp	r1, r24
    1300:	4c f5       	brge	.+82     	; 0x1354 <main+0x80e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1302:	69 8d       	ldd	r22, Y+25	; 0x19
    1304:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1306:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1308:	9c 8d       	ldd	r25, Y+28	; 0x1c
    130a:	20 e0       	ldi	r18, 0x00	; 0
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	40 e2       	ldi	r20, 0x20	; 32
    1310:	51 e4       	ldi	r21, 0x41	; 65
    1312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	bc 01       	movw	r22, r24
    131c:	cd 01       	movw	r24, r26
    131e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	9c 8b       	std	Y+20, r25	; 0x14
    1328:	8b 8b       	std	Y+19, r24	; 0x13
    132a:	0f c0       	rjmp	.+30     	; 0x134a <main+0x804>
    132c:	88 ec       	ldi	r24, 0xC8	; 200
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	9a 8b       	std	Y+18, r25	; 0x12
    1332:	89 8b       	std	Y+17, r24	; 0x11
    1334:	89 89       	ldd	r24, Y+17	; 0x11
    1336:	9a 89       	ldd	r25, Y+18	; 0x12
    1338:	01 97       	sbiw	r24, 0x01	; 1
    133a:	f1 f7       	brne	.-4      	; 0x1338 <main+0x7f2>
    133c:	9a 8b       	std	Y+18, r25	; 0x12
    133e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1340:	8b 89       	ldd	r24, Y+19	; 0x13
    1342:	9c 89       	ldd	r25, Y+20	; 0x14
    1344:	01 97       	sbiw	r24, 0x01	; 1
    1346:	9c 8b       	std	Y+20, r25	; 0x14
    1348:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    134a:	8b 89       	ldd	r24, Y+19	; 0x13
    134c:	9c 89       	ldd	r25, Y+20	; 0x14
    134e:	00 97       	sbiw	r24, 0x00	; 0
    1350:	69 f7       	brne	.-38     	; 0x132c <main+0x7e6>
    1352:	14 c0       	rjmp	.+40     	; 0x137c <main+0x836>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	8f 89       	ldd	r24, Y+23	; 0x17
    135a:	98 8d       	ldd	r25, Y+24	; 0x18
    135c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1360:	dc 01       	movw	r26, r24
    1362:	cb 01       	movw	r24, r22
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
    1368:	8b 89       	ldd	r24, Y+19	; 0x13
    136a:	9c 89       	ldd	r25, Y+20	; 0x14
    136c:	98 8b       	std	Y+16, r25	; 0x10
    136e:	8f 87       	std	Y+15, r24	; 0x0f
    1370:	8f 85       	ldd	r24, Y+15	; 0x0f
    1372:	98 89       	ldd	r25, Y+16	; 0x10
    1374:	01 97       	sbiw	r24, 0x01	; 1
    1376:	f1 f7       	brne	.-4      	; 0x1374 <main+0x82e>
    1378:	98 8b       	std	Y+16, r25	; 0x10
    137a:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(100);
				/* count 3 trials */
				counter++;
    137c:	de 01       	movw	r26, r28
    137e:	aa 5a       	subi	r26, 0xAA	; 170
    1380:	bf 4f       	sbci	r27, 0xFF	; 255
    1382:	fe 01       	movw	r30, r28
    1384:	ea 5a       	subi	r30, 0xAA	; 170
    1386:	ff 4f       	sbci	r31, 0xFF	; 255
    1388:	80 81       	ld	r24, Z
    138a:	8f 5f       	subi	r24, 0xFF	; 255
    138c:	8c 93       	st	X, r24
				/* go to step2 */
				step=1;
    138e:	fe 01       	movw	r30, r28
    1390:	e9 5a       	subi	r30, 0xA9	; 169
    1392:	ff 4f       	sbci	r31, 0xFF	; 255
    1394:	81 e0       	ldi	r24, 0x01	; 1
    1396:	80 83       	st	Z, r24

				if (3==counter){
    1398:	fe 01       	movw	r30, r28
    139a:	ea 5a       	subi	r30, 0xAA	; 170
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	83 30       	cpi	r24, 0x03	; 3
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <main+0x860>
    13a4:	85 c0       	rjmp	.+266    	; 0x14b0 <main+0x96a>
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	a0 e2       	ldi	r26, 0x20	; 32
    13ac:	b1 e4       	ldi	r27, 0x41	; 65
    13ae:	8b 87       	std	Y+11, r24	; 0x0b
    13b0:	9c 87       	std	Y+12, r25	; 0x0c
    13b2:	ad 87       	std	Y+13, r26	; 0x0d
    13b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    13bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13be:	20 e0       	ldi	r18, 0x00	; 0
    13c0:	30 e0       	ldi	r19, 0x00	; 0
    13c2:	4a ef       	ldi	r20, 0xFA	; 250
    13c4:	54 e4       	ldi	r21, 0x44	; 68
    13c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	8f 83       	std	Y+7, r24	; 0x07
    13d0:	98 87       	std	Y+8, r25	; 0x08
    13d2:	a9 87       	std	Y+9, r26	; 0x09
    13d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d6:	6f 81       	ldd	r22, Y+7	; 0x07
    13d8:	78 85       	ldd	r23, Y+8	; 0x08
    13da:	89 85       	ldd	r24, Y+9	; 0x09
    13dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    13de:	20 e0       	ldi	r18, 0x00	; 0
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e8       	ldi	r20, 0x80	; 128
    13e4:	5f e3       	ldi	r21, 0x3F	; 63
    13e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13ea:	88 23       	and	r24, r24
    13ec:	2c f4       	brge	.+10     	; 0x13f8 <main+0x8b2>
		__ticks = 1;
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	9e 83       	std	Y+6, r25	; 0x06
    13f4:	8d 83       	std	Y+5, r24	; 0x05
    13f6:	3f c0       	rjmp	.+126    	; 0x1476 <main+0x930>
	else if (__tmp > 65535)
    13f8:	6f 81       	ldd	r22, Y+7	; 0x07
    13fa:	78 85       	ldd	r23, Y+8	; 0x08
    13fc:	89 85       	ldd	r24, Y+9	; 0x09
    13fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	3f ef       	ldi	r19, 0xFF	; 255
    1404:	4f e7       	ldi	r20, 0x7F	; 127
    1406:	57 e4       	ldi	r21, 0x47	; 71
    1408:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    140c:	18 16       	cp	r1, r24
    140e:	4c f5       	brge	.+82     	; 0x1462 <main+0x91c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1410:	6b 85       	ldd	r22, Y+11	; 0x0b
    1412:	7c 85       	ldd	r23, Y+12	; 0x0c
    1414:	8d 85       	ldd	r24, Y+13	; 0x0d
    1416:	9e 85       	ldd	r25, Y+14	; 0x0e
    1418:	20 e0       	ldi	r18, 0x00	; 0
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	40 e2       	ldi	r20, 0x20	; 32
    141e:	51 e4       	ldi	r21, 0x41	; 65
    1420:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	bc 01       	movw	r22, r24
    142a:	cd 01       	movw	r24, r26
    142c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1430:	dc 01       	movw	r26, r24
    1432:	cb 01       	movw	r24, r22
    1434:	9e 83       	std	Y+6, r25	; 0x06
    1436:	8d 83       	std	Y+5, r24	; 0x05
    1438:	0f c0       	rjmp	.+30     	; 0x1458 <main+0x912>
    143a:	88 ec       	ldi	r24, 0xC8	; 200
    143c:	90 e0       	ldi	r25, 0x00	; 0
    143e:	9c 83       	std	Y+4, r25	; 0x04
    1440:	8b 83       	std	Y+3, r24	; 0x03
    1442:	8b 81       	ldd	r24, Y+3	; 0x03
    1444:	9c 81       	ldd	r25, Y+4	; 0x04
    1446:	01 97       	sbiw	r24, 0x01	; 1
    1448:	f1 f7       	brne	.-4      	; 0x1446 <main+0x900>
    144a:	9c 83       	std	Y+4, r25	; 0x04
    144c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    144e:	8d 81       	ldd	r24, Y+5	; 0x05
    1450:	9e 81       	ldd	r25, Y+6	; 0x06
    1452:	01 97       	sbiw	r24, 0x01	; 1
    1454:	9e 83       	std	Y+6, r25	; 0x06
    1456:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1458:	8d 81       	ldd	r24, Y+5	; 0x05
    145a:	9e 81       	ldd	r25, Y+6	; 0x06
    145c:	00 97       	sbiw	r24, 0x00	; 0
    145e:	69 f7       	brne	.-38     	; 0x143a <main+0x8f4>
    1460:	14 c0       	rjmp	.+40     	; 0x148a <main+0x944>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1462:	6f 81       	ldd	r22, Y+7	; 0x07
    1464:	78 85       	ldd	r23, Y+8	; 0x08
    1466:	89 85       	ldd	r24, Y+9	; 0x09
    1468:	9a 85       	ldd	r25, Y+10	; 0x0a
    146a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	9e 83       	std	Y+6, r25	; 0x06
    1474:	8d 83       	std	Y+5, r24	; 0x05
    1476:	8d 81       	ldd	r24, Y+5	; 0x05
    1478:	9e 81       	ldd	r25, Y+6	; 0x06
    147a:	9a 83       	std	Y+2, r25	; 0x02
    147c:	89 83       	std	Y+1, r24	; 0x01
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	9a 81       	ldd	r25, Y+2	; 0x02
    1482:	01 97       	sbiw	r24, 0x01	; 1
    1484:	f1 f7       	brne	.-4      	; 0x1482 <main+0x93c>
    1486:	9a 83       	std	Y+2, r25	; 0x02
    1488:	89 83       	std	Y+1, r24	; 0x01
					/* Activate Buzzer after 3 trials. */
					_delay_ms(10);
					UART_sendByte(BUZZER);
    148a:	80 e1       	ldi	r24, 0x10	; 16
    148c:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
					LCD_displayStringRowColumn(0,0,"Security Alert  ");
    1490:	2a e2       	ldi	r18, 0x2A	; 42
    1492:	31 e0       	ldi	r19, 0x01	; 1
    1494:	80 e0       	ldi	r24, 0x00	; 0
    1496:	60 e0       	ldi	r22, 0x00	; 0
    1498:	a9 01       	movw	r20, r18
    149a:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
					/* Activate Buzzer after 3 trials. */
					while(UART_recieveByte() != AFTERBUZZER){}
    149e:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
    14a2:	81 31       	cpi	r24, 0x11	; 17
    14a4:	e1 f7       	brne	.-8      	; 0x149e <main+0x958>
					/* Wait until the buzzer time duration elapses */
					step=2; /* return to the main options again */
    14a6:	fe 01       	movw	r30, r28
    14a8:	e9 5a       	subi	r30, 0xA9	; 169
    14aa:	ff 4f       	sbci	r31, 0xFF	; 255
    14ac:	82 e0       	ldi	r24, 0x02	; 2
    14ae:	80 83       	st	Z, r24
				}
				break;
			}
		}
		step++; /* Move to the next step. */
    14b0:	de 01       	movw	r26, r28
    14b2:	a9 5a       	subi	r26, 0xA9	; 169
    14b4:	bf 4f       	sbci	r27, 0xFF	; 255
    14b6:	fe 01       	movw	r30, r28
    14b8:	e9 5a       	subi	r30, 0xA9	; 169
    14ba:	ff 4f       	sbci	r31, 0xFF	; 255
    14bc:	80 81       	ld	r24, Z
    14be:	8f 5f       	subi	r24, 0xFF	; 255
    14c0:	8c 93       	st	X, r24
    14c2:	a2 cb       	rjmp	.-2236   	; 0xc08 <main+0xc2>

000014c4 <Start>:

uint8 key;

/* Functions Definitions */

void Start(){
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	cd b7       	in	r28, 0x3d	; 61
    14ca:	de b7       	in	r29, 0x3e	; 62
	LCD_clearScreen();
    14cc:	0e 94 bb 15 	call	0x2b76	; 0x2b76 <LCD_clearScreen>
	LCD_displayStringRowColumn(0,0," Plz enter pass ");
    14d0:	2b e3       	ldi	r18, 0x3B	; 59
    14d2:	31 e0       	ldi	r19, 0x01	; 1
    14d4:	80 e0       	ldi	r24, 0x00	; 0
    14d6:	60 e0       	ldi	r22, 0x00	; 0
    14d8:	a9 01       	movw	r20, r18
    14da:	0e 94 7f 15 	call	0x2afe	; 0x2afe <LCD_displayStringRowColumn>
	LCD_moveCursor(1,0); /* Move the cursor to the second row */
    14de:	81 e0       	ldi	r24, 0x01	; 1
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LCD_moveCursor>
}
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <collectPassword>:

void collectPassword(uint8 *password){
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	cd b7       	in	r28, 0x3d	; 61
    14f2:	de b7       	in	r29, 0x3e	; 62
    14f4:	61 97       	sbiw	r28, 0x11	; 17
    14f6:	0f b6       	in	r0, 0x3f	; 63
    14f8:	f8 94       	cli
    14fa:	de bf       	out	0x3e, r29	; 62
    14fc:	0f be       	out	0x3f, r0	; 63
    14fe:	cd bf       	out	0x3d, r28	; 61
    1500:	99 8b       	std	Y+17, r25	; 0x11
    1502:	88 8b       	std	Y+16, r24	; 0x10
	uint8 i=0;
    1504:	1f 86       	std	Y+15, r1	; 0x0f

	while(1){
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();
    1506:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <KEYPAD_getPressedKey>
    150a:	80 93 74 01 	sts	0x0174, r24
    150e:	95 c0       	rjmp	.+298    	; 0x163a <collectPassword+0x14e>

		while(i<PASSWORD_LENGTH){
			/* Get the pressed button from keypad */
			key = KEYPAD_getPressedKey();
    1510:	0e 94 0f 0f 	call	0x1e1e	; 0x1e1e <KEYPAD_getPressedKey>
    1514:	80 93 74 01 	sts	0x0174, r24
			if (key || key==0) {
    1518:	80 91 74 01 	lds	r24, 0x0174
    151c:	88 23       	and	r24, r24
    151e:	29 f4       	brne	.+10     	; 0x152a <collectPassword+0x3e>
    1520:	80 91 74 01 	lds	r24, 0x0174
    1524:	88 23       	and	r24, r24
    1526:	09 f0       	breq	.+2      	; 0x152a <collectPassword+0x3e>
    1528:	88 c0       	rjmp	.+272    	; 0x163a <collectPassword+0x14e>
				if (key!=ENTER){
    152a:	80 91 74 01 	lds	r24, 0x0174
    152e:	8d 30       	cpi	r24, 0x0D	; 13
    1530:	09 f4       	brne	.+2      	; 0x1534 <collectPassword+0x48>
    1532:	83 c0       	rjmp	.+262    	; 0x163a <collectPassword+0x14e>
					LCD_displayCharacter('*');
    1534:	8a e2       	ldi	r24, 0x2A	; 42
    1536:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_displayCharacter>
					password[i] = key;
    153a:	8f 85       	ldd	r24, Y+15	; 0x0f
    153c:	28 2f       	mov	r18, r24
    153e:	30 e0       	ldi	r19, 0x00	; 0
    1540:	88 89       	ldd	r24, Y+16	; 0x10
    1542:	99 89       	ldd	r25, Y+17	; 0x11
    1544:	fc 01       	movw	r30, r24
    1546:	e2 0f       	add	r30, r18
    1548:	f3 1f       	adc	r31, r19
    154a:	80 91 74 01 	lds	r24, 0x0174
    154e:	80 83       	st	Z, r24
					i++;
    1550:	8f 85       	ldd	r24, Y+15	; 0x0f
    1552:	8f 5f       	subi	r24, 0xFF	; 255
    1554:	8f 87       	std	Y+15, r24	; 0x0f
    1556:	80 e0       	ldi	r24, 0x00	; 0
    1558:	90 e0       	ldi	r25, 0x00	; 0
    155a:	a0 e7       	ldi	r26, 0x70	; 112
    155c:	b1 e4       	ldi	r27, 0x41	; 65
    155e:	8b 87       	std	Y+11, r24	; 0x0b
    1560:	9c 87       	std	Y+12, r25	; 0x0c
    1562:	ad 87       	std	Y+13, r26	; 0x0d
    1564:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1566:	6b 85       	ldd	r22, Y+11	; 0x0b
    1568:	7c 85       	ldd	r23, Y+12	; 0x0c
    156a:	8d 85       	ldd	r24, Y+13	; 0x0d
    156c:	9e 85       	ldd	r25, Y+14	; 0x0e
    156e:	20 e0       	ldi	r18, 0x00	; 0
    1570:	30 e0       	ldi	r19, 0x00	; 0
    1572:	4a ef       	ldi	r20, 0xFA	; 250
    1574:	54 e4       	ldi	r21, 0x44	; 68
    1576:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    157a:	dc 01       	movw	r26, r24
    157c:	cb 01       	movw	r24, r22
    157e:	8f 83       	std	Y+7, r24	; 0x07
    1580:	98 87       	std	Y+8, r25	; 0x08
    1582:	a9 87       	std	Y+9, r26	; 0x09
    1584:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1586:	6f 81       	ldd	r22, Y+7	; 0x07
    1588:	78 85       	ldd	r23, Y+8	; 0x08
    158a:	89 85       	ldd	r24, Y+9	; 0x09
    158c:	9a 85       	ldd	r25, Y+10	; 0x0a
    158e:	20 e0       	ldi	r18, 0x00	; 0
    1590:	30 e0       	ldi	r19, 0x00	; 0
    1592:	40 e8       	ldi	r20, 0x80	; 128
    1594:	5f e3       	ldi	r21, 0x3F	; 63
    1596:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    159a:	88 23       	and	r24, r24
    159c:	2c f4       	brge	.+10     	; 0x15a8 <collectPassword+0xbc>
		__ticks = 1;
    159e:	81 e0       	ldi	r24, 0x01	; 1
    15a0:	90 e0       	ldi	r25, 0x00	; 0
    15a2:	9e 83       	std	Y+6, r25	; 0x06
    15a4:	8d 83       	std	Y+5, r24	; 0x05
    15a6:	3f c0       	rjmp	.+126    	; 0x1626 <collectPassword+0x13a>
	else if (__tmp > 65535)
    15a8:	6f 81       	ldd	r22, Y+7	; 0x07
    15aa:	78 85       	ldd	r23, Y+8	; 0x08
    15ac:	89 85       	ldd	r24, Y+9	; 0x09
    15ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b0:	20 e0       	ldi	r18, 0x00	; 0
    15b2:	3f ef       	ldi	r19, 0xFF	; 255
    15b4:	4f e7       	ldi	r20, 0x7F	; 127
    15b6:	57 e4       	ldi	r21, 0x47	; 71
    15b8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15bc:	18 16       	cp	r1, r24
    15be:	4c f5       	brge	.+82     	; 0x1612 <collectPassword+0x126>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    15c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    15c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    15c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    15c8:	20 e0       	ldi	r18, 0x00	; 0
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	40 e2       	ldi	r20, 0x20	; 32
    15ce:	51 e4       	ldi	r21, 0x41	; 65
    15d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15d4:	dc 01       	movw	r26, r24
    15d6:	cb 01       	movw	r24, r22
    15d8:	bc 01       	movw	r22, r24
    15da:	cd 01       	movw	r24, r26
    15dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e0:	dc 01       	movw	r26, r24
    15e2:	cb 01       	movw	r24, r22
    15e4:	9e 83       	std	Y+6, r25	; 0x06
    15e6:	8d 83       	std	Y+5, r24	; 0x05
    15e8:	0f c0       	rjmp	.+30     	; 0x1608 <collectPassword+0x11c>
    15ea:	88 ec       	ldi	r24, 0xC8	; 200
    15ec:	90 e0       	ldi	r25, 0x00	; 0
    15ee:	9c 83       	std	Y+4, r25	; 0x04
    15f0:	8b 83       	std	Y+3, r24	; 0x03
    15f2:	8b 81       	ldd	r24, Y+3	; 0x03
    15f4:	9c 81       	ldd	r25, Y+4	; 0x04
    15f6:	01 97       	sbiw	r24, 0x01	; 1
    15f8:	f1 f7       	brne	.-4      	; 0x15f6 <collectPassword+0x10a>
    15fa:	9c 83       	std	Y+4, r25	; 0x04
    15fc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15fe:	8d 81       	ldd	r24, Y+5	; 0x05
    1600:	9e 81       	ldd	r25, Y+6	; 0x06
    1602:	01 97       	sbiw	r24, 0x01	; 1
    1604:	9e 83       	std	Y+6, r25	; 0x06
    1606:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1608:	8d 81       	ldd	r24, Y+5	; 0x05
    160a:	9e 81       	ldd	r25, Y+6	; 0x06
    160c:	00 97       	sbiw	r24, 0x00	; 0
    160e:	69 f7       	brne	.-38     	; 0x15ea <collectPassword+0xfe>
    1610:	14 c0       	rjmp	.+40     	; 0x163a <collectPassword+0x14e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1612:	6f 81       	ldd	r22, Y+7	; 0x07
    1614:	78 85       	ldd	r23, Y+8	; 0x08
    1616:	89 85       	ldd	r24, Y+9	; 0x09
    1618:	9a 85       	ldd	r25, Y+10	; 0x0a
    161a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    161e:	dc 01       	movw	r26, r24
    1620:	cb 01       	movw	r24, r22
    1622:	9e 83       	std	Y+6, r25	; 0x06
    1624:	8d 83       	std	Y+5, r24	; 0x05
    1626:	8d 81       	ldd	r24, Y+5	; 0x05
    1628:	9e 81       	ldd	r25, Y+6	; 0x06
    162a:	9a 83       	std	Y+2, r25	; 0x02
    162c:	89 83       	std	Y+1, r24	; 0x01
    162e:	89 81       	ldd	r24, Y+1	; 0x01
    1630:	9a 81       	ldd	r25, Y+2	; 0x02
    1632:	01 97       	sbiw	r24, 0x01	; 1
    1634:	f1 f7       	brne	.-4      	; 0x1632 <collectPassword+0x146>
    1636:	9a 83       	std	Y+2, r25	; 0x02
    1638:	89 83       	std	Y+1, r24	; 0x01

	while(1){
		/* Get the pressed button from keypad */
		key = KEYPAD_getPressedKey();

		while(i<PASSWORD_LENGTH){
    163a:	8f 85       	ldd	r24, Y+15	; 0x0f
    163c:	85 30       	cpi	r24, 0x05	; 5
    163e:	08 f4       	brcc	.+2      	; 0x1642 <collectPassword+0x156>
    1640:	67 cf       	rjmp	.-306    	; 0x1510 <collectPassword+0x24>
					i++;
					_delay_ms(15);
				}
			}
		}
		if (ENTER==key && PASSWORD_LENGTH==i){
    1642:	80 91 74 01 	lds	r24, 0x0174
    1646:	8d 30       	cpi	r24, 0x0D	; 13
    1648:	09 f0       	breq	.+2      	; 0x164c <collectPassword+0x160>
    164a:	5d cf       	rjmp	.-326    	; 0x1506 <collectPassword+0x1a>
    164c:	8f 85       	ldd	r24, Y+15	; 0x0f
    164e:	85 30       	cpi	r24, 0x05	; 5
    1650:	09 f0       	breq	.+2      	; 0x1654 <collectPassword+0x168>
    1652:	59 cf       	rjmp	.-334    	; 0x1506 <collectPassword+0x1a>
			break;
		}
	}
}
    1654:	61 96       	adiw	r28, 0x11	; 17
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <sendPassword>:

void sendPassword(uint8 *password){
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	61 97       	sbiw	r28, 0x11	; 17
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	99 8b       	std	Y+17, r25	; 0x11
    167c:	88 8b       	std	Y+16, r24	; 0x10
	/* Send MC2_READY byte to Slave to ask it to start receiving the password */
	UART_sendByte(MASTER_READY);
    167e:	80 e1       	ldi	r24, 0x10	; 16
    1680:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>

	for (uint8 i=0;i<PASSWORD_LENGTH;i++){
    1684:	1f 86       	std	Y+15, r1	; 0x0f
    1686:	80 c0       	rjmp	.+256    	; 0x1788 <sendPassword+0x122>
		/* Send the pass to the other micro-controller through the UART */
		UART_sendByte(password[i]);
    1688:	8f 85       	ldd	r24, Y+15	; 0x0f
    168a:	28 2f       	mov	r18, r24
    168c:	30 e0       	ldi	r19, 0x00	; 0
    168e:	88 89       	ldd	r24, Y+16	; 0x10
    1690:	99 89       	ldd	r25, Y+17	; 0x11
    1692:	fc 01       	movw	r30, r24
    1694:	e2 0f       	add	r30, r18
    1696:	f3 1f       	adc	r31, r19
    1698:	80 81       	ld	r24, Z
    169a:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	90 e0       	ldi	r25, 0x00	; 0
    16a2:	a0 e2       	ldi	r26, 0x20	; 32
    16a4:	b1 e4       	ldi	r27, 0x41	; 65
    16a6:	8b 87       	std	Y+11, r24	; 0x0b
    16a8:	9c 87       	std	Y+12, r25	; 0x0c
    16aa:	ad 87       	std	Y+13, r26	; 0x0d
    16ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    16b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    16b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b6:	20 e0       	ldi	r18, 0x00	; 0
    16b8:	30 e0       	ldi	r19, 0x00	; 0
    16ba:	4a ef       	ldi	r20, 0xFA	; 250
    16bc:	54 e4       	ldi	r21, 0x44	; 68
    16be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c2:	dc 01       	movw	r26, r24
    16c4:	cb 01       	movw	r24, r22
    16c6:	8f 83       	std	Y+7, r24	; 0x07
    16c8:	98 87       	std	Y+8, r25	; 0x08
    16ca:	a9 87       	std	Y+9, r26	; 0x09
    16cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16ce:	6f 81       	ldd	r22, Y+7	; 0x07
    16d0:	78 85       	ldd	r23, Y+8	; 0x08
    16d2:	89 85       	ldd	r24, Y+9	; 0x09
    16d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    16d6:	20 e0       	ldi	r18, 0x00	; 0
    16d8:	30 e0       	ldi	r19, 0x00	; 0
    16da:	40 e8       	ldi	r20, 0x80	; 128
    16dc:	5f e3       	ldi	r21, 0x3F	; 63
    16de:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16e2:	88 23       	and	r24, r24
    16e4:	2c f4       	brge	.+10     	; 0x16f0 <sendPassword+0x8a>
		__ticks = 1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	9e 83       	std	Y+6, r25	; 0x06
    16ec:	8d 83       	std	Y+5, r24	; 0x05
    16ee:	3f c0       	rjmp	.+126    	; 0x176e <sendPassword+0x108>
	else if (__tmp > 65535)
    16f0:	6f 81       	ldd	r22, Y+7	; 0x07
    16f2:	78 85       	ldd	r23, Y+8	; 0x08
    16f4:	89 85       	ldd	r24, Y+9	; 0x09
    16f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16f8:	20 e0       	ldi	r18, 0x00	; 0
    16fa:	3f ef       	ldi	r19, 0xFF	; 255
    16fc:	4f e7       	ldi	r20, 0x7F	; 127
    16fe:	57 e4       	ldi	r21, 0x47	; 71
    1700:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1704:	18 16       	cp	r1, r24
    1706:	4c f5       	brge	.+82     	; 0x175a <sendPassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1708:	6b 85       	ldd	r22, Y+11	; 0x0b
    170a:	7c 85       	ldd	r23, Y+12	; 0x0c
    170c:	8d 85       	ldd	r24, Y+13	; 0x0d
    170e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1710:	20 e0       	ldi	r18, 0x00	; 0
    1712:	30 e0       	ldi	r19, 0x00	; 0
    1714:	40 e2       	ldi	r20, 0x20	; 32
    1716:	51 e4       	ldi	r21, 0x41	; 65
    1718:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    171c:	dc 01       	movw	r26, r24
    171e:	cb 01       	movw	r24, r22
    1720:	bc 01       	movw	r22, r24
    1722:	cd 01       	movw	r24, r26
    1724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1728:	dc 01       	movw	r26, r24
    172a:	cb 01       	movw	r24, r22
    172c:	9e 83       	std	Y+6, r25	; 0x06
    172e:	8d 83       	std	Y+5, r24	; 0x05
    1730:	0f c0       	rjmp	.+30     	; 0x1750 <sendPassword+0xea>
    1732:	88 ec       	ldi	r24, 0xC8	; 200
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	9c 83       	std	Y+4, r25	; 0x04
    1738:	8b 83       	std	Y+3, r24	; 0x03
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	9c 81       	ldd	r25, Y+4	; 0x04
    173e:	01 97       	sbiw	r24, 0x01	; 1
    1740:	f1 f7       	brne	.-4      	; 0x173e <sendPassword+0xd8>
    1742:	9c 83       	std	Y+4, r25	; 0x04
    1744:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	01 97       	sbiw	r24, 0x01	; 1
    174c:	9e 83       	std	Y+6, r25	; 0x06
    174e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1750:	8d 81       	ldd	r24, Y+5	; 0x05
    1752:	9e 81       	ldd	r25, Y+6	; 0x06
    1754:	00 97       	sbiw	r24, 0x00	; 0
    1756:	69 f7       	brne	.-38     	; 0x1732 <sendPassword+0xcc>
    1758:	14 c0       	rjmp	.+40     	; 0x1782 <sendPassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    175a:	6f 81       	ldd	r22, Y+7	; 0x07
    175c:	78 85       	ldd	r23, Y+8	; 0x08
    175e:	89 85       	ldd	r24, Y+9	; 0x09
    1760:	9a 85       	ldd	r25, Y+10	; 0x0a
    1762:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1766:	dc 01       	movw	r26, r24
    1768:	cb 01       	movw	r24, r22
    176a:	9e 83       	std	Y+6, r25	; 0x06
    176c:	8d 83       	std	Y+5, r24	; 0x05
    176e:	8d 81       	ldd	r24, Y+5	; 0x05
    1770:	9e 81       	ldd	r25, Y+6	; 0x06
    1772:	9a 83       	std	Y+2, r25	; 0x02
    1774:	89 83       	std	Y+1, r24	; 0x01
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	9a 81       	ldd	r25, Y+2	; 0x02
    177a:	01 97       	sbiw	r24, 0x01	; 1
    177c:	f1 f7       	brne	.-4      	; 0x177a <sendPassword+0x114>
    177e:	9a 83       	std	Y+2, r25	; 0x02
    1780:	89 83       	std	Y+1, r24	; 0x01

void sendPassword(uint8 *password){
	/* Send MC2_READY byte to Slave to ask it to start receiving the password */
	UART_sendByte(MASTER_READY);

	for (uint8 i=0;i<PASSWORD_LENGTH;i++){
    1782:	8f 85       	ldd	r24, Y+15	; 0x0f
    1784:	8f 5f       	subi	r24, 0xFF	; 255
    1786:	8f 87       	std	Y+15, r24	; 0x0f
    1788:	8f 85       	ldd	r24, Y+15	; 0x0f
    178a:	85 30       	cpi	r24, 0x05	; 5
    178c:	08 f4       	brcc	.+2      	; 0x1790 <sendPassword+0x12a>
    178e:	7c cf       	rjmp	.-264    	; 0x1688 <sendPassword+0x22>
		/* Send the pass to the other micro-controller through the UART */
		UART_sendByte(password[i]);
		_delay_ms(10);
	}
}
    1790:	61 96       	adiw	r28, 0x11	; 17
    1792:	0f b6       	in	r0, 0x3f	; 63
    1794:	f8 94       	cli
    1796:	de bf       	out	0x3e, r29	; 62
    1798:	0f be       	out	0x3f, r0	; 63
    179a:	cd bf       	out	0x3d, r28	; 61
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <GPIO_setupPinDirection+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_setupPinDirection+0x8>
    17aa:	0f 92       	push	r0
    17ac:	cd b7       	in	r28, 0x3d	; 61
    17ae:	de b7       	in	r29, 0x3e	; 62
    17b0:	89 83       	std	Y+1, r24	; 0x01
    17b2:	6a 83       	std	Y+2, r22	; 0x02
    17b4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	88 30       	cpi	r24, 0x08	; 8
    17ba:	08 f0       	brcs	.+2      	; 0x17be <GPIO_setupPinDirection+0x1c>
    17bc:	d5 c0       	rjmp	.+426    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
    17be:	89 81       	ldd	r24, Y+1	; 0x01
    17c0:	84 30       	cpi	r24, 0x04	; 4
    17c2:	08 f0       	brcs	.+2      	; 0x17c6 <GPIO_setupPinDirection+0x24>
    17c4:	d1 c0       	rjmp	.+418    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    17c6:	89 81       	ldd	r24, Y+1	; 0x01
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	3d 83       	std	Y+5, r19	; 0x05
    17ce:	2c 83       	std	Y+4, r18	; 0x04
    17d0:	8c 81       	ldd	r24, Y+4	; 0x04
    17d2:	9d 81       	ldd	r25, Y+5	; 0x05
    17d4:	81 30       	cpi	r24, 0x01	; 1
    17d6:	91 05       	cpc	r25, r1
    17d8:	09 f4       	brne	.+2      	; 0x17dc <GPIO_setupPinDirection+0x3a>
    17da:	43 c0       	rjmp	.+134    	; 0x1862 <GPIO_setupPinDirection+0xc0>
    17dc:	2c 81       	ldd	r18, Y+4	; 0x04
    17de:	3d 81       	ldd	r19, Y+5	; 0x05
    17e0:	22 30       	cpi	r18, 0x02	; 2
    17e2:	31 05       	cpc	r19, r1
    17e4:	2c f4       	brge	.+10     	; 0x17f0 <GPIO_setupPinDirection+0x4e>
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ea:	00 97       	sbiw	r24, 0x00	; 0
    17ec:	71 f0       	breq	.+28     	; 0x180a <GPIO_setupPinDirection+0x68>
    17ee:	bc c0       	rjmp	.+376    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
    17f0:	2c 81       	ldd	r18, Y+4	; 0x04
    17f2:	3d 81       	ldd	r19, Y+5	; 0x05
    17f4:	22 30       	cpi	r18, 0x02	; 2
    17f6:	31 05       	cpc	r19, r1
    17f8:	09 f4       	brne	.+2      	; 0x17fc <GPIO_setupPinDirection+0x5a>
    17fa:	5f c0       	rjmp	.+190    	; 0x18ba <GPIO_setupPinDirection+0x118>
    17fc:	8c 81       	ldd	r24, Y+4	; 0x04
    17fe:	9d 81       	ldd	r25, Y+5	; 0x05
    1800:	83 30       	cpi	r24, 0x03	; 3
    1802:	91 05       	cpc	r25, r1
    1804:	09 f4       	brne	.+2      	; 0x1808 <GPIO_setupPinDirection+0x66>
    1806:	85 c0       	rjmp	.+266    	; 0x1912 <GPIO_setupPinDirection+0x170>
    1808:	af c0       	rjmp	.+350    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	a1 f4       	brne	.+40     	; 0x1838 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1810:	aa e3       	ldi	r26, 0x3A	; 58
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ea e3       	ldi	r30, 0x3A	; 58
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	48 2f       	mov	r20, r24
    181c:	8a 81       	ldd	r24, Y+2	; 0x02
    181e:	28 2f       	mov	r18, r24
    1820:	30 e0       	ldi	r19, 0x00	; 0
    1822:	81 e0       	ldi	r24, 0x01	; 1
    1824:	90 e0       	ldi	r25, 0x00	; 0
    1826:	02 2e       	mov	r0, r18
    1828:	02 c0       	rjmp	.+4      	; 0x182e <GPIO_setupPinDirection+0x8c>
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	0a 94       	dec	r0
    1830:	e2 f7       	brpl	.-8      	; 0x182a <GPIO_setupPinDirection+0x88>
    1832:	84 2b       	or	r24, r20
    1834:	8c 93       	st	X, r24
    1836:	98 c0       	rjmp	.+304    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1838:	aa e3       	ldi	r26, 0x3A	; 58
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ea e3       	ldi	r30, 0x3A	; 58
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	48 2f       	mov	r20, r24
    1844:	8a 81       	ldd	r24, Y+2	; 0x02
    1846:	28 2f       	mov	r18, r24
    1848:	30 e0       	ldi	r19, 0x00	; 0
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	90 e0       	ldi	r25, 0x00	; 0
    184e:	02 2e       	mov	r0, r18
    1850:	02 c0       	rjmp	.+4      	; 0x1856 <GPIO_setupPinDirection+0xb4>
    1852:	88 0f       	add	r24, r24
    1854:	99 1f       	adc	r25, r25
    1856:	0a 94       	dec	r0
    1858:	e2 f7       	brpl	.-8      	; 0x1852 <GPIO_setupPinDirection+0xb0>
    185a:	80 95       	com	r24
    185c:	84 23       	and	r24, r20
    185e:	8c 93       	st	X, r24
    1860:	83 c0       	rjmp	.+262    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1862:	8b 81       	ldd	r24, Y+3	; 0x03
    1864:	81 30       	cpi	r24, 0x01	; 1
    1866:	a1 f4       	brne	.+40     	; 0x1890 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1868:	a7 e3       	ldi	r26, 0x37	; 55
    186a:	b0 e0       	ldi	r27, 0x00	; 0
    186c:	e7 e3       	ldi	r30, 0x37	; 55
    186e:	f0 e0       	ldi	r31, 0x00	; 0
    1870:	80 81       	ld	r24, Z
    1872:	48 2f       	mov	r20, r24
    1874:	8a 81       	ldd	r24, Y+2	; 0x02
    1876:	28 2f       	mov	r18, r24
    1878:	30 e0       	ldi	r19, 0x00	; 0
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	02 2e       	mov	r0, r18
    1880:	02 c0       	rjmp	.+4      	; 0x1886 <GPIO_setupPinDirection+0xe4>
    1882:	88 0f       	add	r24, r24
    1884:	99 1f       	adc	r25, r25
    1886:	0a 94       	dec	r0
    1888:	e2 f7       	brpl	.-8      	; 0x1882 <GPIO_setupPinDirection+0xe0>
    188a:	84 2b       	or	r24, r20
    188c:	8c 93       	st	X, r24
    188e:	6c c0       	rjmp	.+216    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1890:	a7 e3       	ldi	r26, 0x37	; 55
    1892:	b0 e0       	ldi	r27, 0x00	; 0
    1894:	e7 e3       	ldi	r30, 0x37	; 55
    1896:	f0 e0       	ldi	r31, 0x00	; 0
    1898:	80 81       	ld	r24, Z
    189a:	48 2f       	mov	r20, r24
    189c:	8a 81       	ldd	r24, Y+2	; 0x02
    189e:	28 2f       	mov	r18, r24
    18a0:	30 e0       	ldi	r19, 0x00	; 0
    18a2:	81 e0       	ldi	r24, 0x01	; 1
    18a4:	90 e0       	ldi	r25, 0x00	; 0
    18a6:	02 2e       	mov	r0, r18
    18a8:	02 c0       	rjmp	.+4      	; 0x18ae <GPIO_setupPinDirection+0x10c>
    18aa:	88 0f       	add	r24, r24
    18ac:	99 1f       	adc	r25, r25
    18ae:	0a 94       	dec	r0
    18b0:	e2 f7       	brpl	.-8      	; 0x18aa <GPIO_setupPinDirection+0x108>
    18b2:	80 95       	com	r24
    18b4:	84 23       	and	r24, r20
    18b6:	8c 93       	st	X, r24
    18b8:	57 c0       	rjmp	.+174    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    18ba:	8b 81       	ldd	r24, Y+3	; 0x03
    18bc:	81 30       	cpi	r24, 0x01	; 1
    18be:	a1 f4       	brne	.+40     	; 0x18e8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    18c0:	a4 e3       	ldi	r26, 0x34	; 52
    18c2:	b0 e0       	ldi	r27, 0x00	; 0
    18c4:	e4 e3       	ldi	r30, 0x34	; 52
    18c6:	f0 e0       	ldi	r31, 0x00	; 0
    18c8:	80 81       	ld	r24, Z
    18ca:	48 2f       	mov	r20, r24
    18cc:	8a 81       	ldd	r24, Y+2	; 0x02
    18ce:	28 2f       	mov	r18, r24
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	81 e0       	ldi	r24, 0x01	; 1
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	02 2e       	mov	r0, r18
    18d8:	02 c0       	rjmp	.+4      	; 0x18de <GPIO_setupPinDirection+0x13c>
    18da:	88 0f       	add	r24, r24
    18dc:	99 1f       	adc	r25, r25
    18de:	0a 94       	dec	r0
    18e0:	e2 f7       	brpl	.-8      	; 0x18da <GPIO_setupPinDirection+0x138>
    18e2:	84 2b       	or	r24, r20
    18e4:	8c 93       	st	X, r24
    18e6:	40 c0       	rjmp	.+128    	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    18e8:	a4 e3       	ldi	r26, 0x34	; 52
    18ea:	b0 e0       	ldi	r27, 0x00	; 0
    18ec:	e4 e3       	ldi	r30, 0x34	; 52
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	80 81       	ld	r24, Z
    18f2:	48 2f       	mov	r20, r24
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	28 2f       	mov	r18, r24
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	02 2e       	mov	r0, r18
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <GPIO_setupPinDirection+0x164>
    1902:	88 0f       	add	r24, r24
    1904:	99 1f       	adc	r25, r25
    1906:	0a 94       	dec	r0
    1908:	e2 f7       	brpl	.-8      	; 0x1902 <GPIO_setupPinDirection+0x160>
    190a:	80 95       	com	r24
    190c:	84 23       	and	r24, r20
    190e:	8c 93       	st	X, r24
    1910:	2b c0       	rjmp	.+86     	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1912:	8b 81       	ldd	r24, Y+3	; 0x03
    1914:	81 30       	cpi	r24, 0x01	; 1
    1916:	a1 f4       	brne	.+40     	; 0x1940 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1918:	a1 e3       	ldi	r26, 0x31	; 49
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e1 e3       	ldi	r30, 0x31	; 49
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	48 2f       	mov	r20, r24
    1924:	8a 81       	ldd	r24, Y+2	; 0x02
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	90 e0       	ldi	r25, 0x00	; 0
    192e:	02 2e       	mov	r0, r18
    1930:	02 c0       	rjmp	.+4      	; 0x1936 <GPIO_setupPinDirection+0x194>
    1932:	88 0f       	add	r24, r24
    1934:	99 1f       	adc	r25, r25
    1936:	0a 94       	dec	r0
    1938:	e2 f7       	brpl	.-8      	; 0x1932 <GPIO_setupPinDirection+0x190>
    193a:	84 2b       	or	r24, r20
    193c:	8c 93       	st	X, r24
    193e:	14 c0       	rjmp	.+40     	; 0x1968 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1940:	a1 e3       	ldi	r26, 0x31	; 49
    1942:	b0 e0       	ldi	r27, 0x00	; 0
    1944:	e1 e3       	ldi	r30, 0x31	; 49
    1946:	f0 e0       	ldi	r31, 0x00	; 0
    1948:	80 81       	ld	r24, Z
    194a:	48 2f       	mov	r20, r24
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	28 2f       	mov	r18, r24
    1950:	30 e0       	ldi	r19, 0x00	; 0
    1952:	81 e0       	ldi	r24, 0x01	; 1
    1954:	90 e0       	ldi	r25, 0x00	; 0
    1956:	02 2e       	mov	r0, r18
    1958:	02 c0       	rjmp	.+4      	; 0x195e <GPIO_setupPinDirection+0x1bc>
    195a:	88 0f       	add	r24, r24
    195c:	99 1f       	adc	r25, r25
    195e:	0a 94       	dec	r0
    1960:	e2 f7       	brpl	.-8      	; 0x195a <GPIO_setupPinDirection+0x1b8>
    1962:	80 95       	com	r24
    1964:	84 23       	and	r24, r20
    1966:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1968:	0f 90       	pop	r0
    196a:	0f 90       	pop	r0
    196c:	0f 90       	pop	r0
    196e:	0f 90       	pop	r0
    1970:	0f 90       	pop	r0
    1972:	cf 91       	pop	r28
    1974:	df 91       	pop	r29
    1976:	08 95       	ret

00001978 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1978:	df 93       	push	r29
    197a:	cf 93       	push	r28
    197c:	00 d0       	rcall	.+0      	; 0x197e <GPIO_writePin+0x6>
    197e:	00 d0       	rcall	.+0      	; 0x1980 <GPIO_writePin+0x8>
    1980:	0f 92       	push	r0
    1982:	cd b7       	in	r28, 0x3d	; 61
    1984:	de b7       	in	r29, 0x3e	; 62
    1986:	89 83       	std	Y+1, r24	; 0x01
    1988:	6a 83       	std	Y+2, r22	; 0x02
    198a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	88 30       	cpi	r24, 0x08	; 8
    1990:	08 f0       	brcs	.+2      	; 0x1994 <GPIO_writePin+0x1c>
    1992:	d5 c0       	rjmp	.+426    	; 0x1b3e <GPIO_writePin+0x1c6>
    1994:	89 81       	ldd	r24, Y+1	; 0x01
    1996:	84 30       	cpi	r24, 0x04	; 4
    1998:	08 f0       	brcs	.+2      	; 0x199c <GPIO_writePin+0x24>
    199a:	d1 c0       	rjmp	.+418    	; 0x1b3e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    199c:	89 81       	ldd	r24, Y+1	; 0x01
    199e:	28 2f       	mov	r18, r24
    19a0:	30 e0       	ldi	r19, 0x00	; 0
    19a2:	3d 83       	std	Y+5, r19	; 0x05
    19a4:	2c 83       	std	Y+4, r18	; 0x04
    19a6:	8c 81       	ldd	r24, Y+4	; 0x04
    19a8:	9d 81       	ldd	r25, Y+5	; 0x05
    19aa:	81 30       	cpi	r24, 0x01	; 1
    19ac:	91 05       	cpc	r25, r1
    19ae:	09 f4       	brne	.+2      	; 0x19b2 <GPIO_writePin+0x3a>
    19b0:	43 c0       	rjmp	.+134    	; 0x1a38 <GPIO_writePin+0xc0>
    19b2:	2c 81       	ldd	r18, Y+4	; 0x04
    19b4:	3d 81       	ldd	r19, Y+5	; 0x05
    19b6:	22 30       	cpi	r18, 0x02	; 2
    19b8:	31 05       	cpc	r19, r1
    19ba:	2c f4       	brge	.+10     	; 0x19c6 <GPIO_writePin+0x4e>
    19bc:	8c 81       	ldd	r24, Y+4	; 0x04
    19be:	9d 81       	ldd	r25, Y+5	; 0x05
    19c0:	00 97       	sbiw	r24, 0x00	; 0
    19c2:	71 f0       	breq	.+28     	; 0x19e0 <GPIO_writePin+0x68>
    19c4:	bc c0       	rjmp	.+376    	; 0x1b3e <GPIO_writePin+0x1c6>
    19c6:	2c 81       	ldd	r18, Y+4	; 0x04
    19c8:	3d 81       	ldd	r19, Y+5	; 0x05
    19ca:	22 30       	cpi	r18, 0x02	; 2
    19cc:	31 05       	cpc	r19, r1
    19ce:	09 f4       	brne	.+2      	; 0x19d2 <GPIO_writePin+0x5a>
    19d0:	5f c0       	rjmp	.+190    	; 0x1a90 <GPIO_writePin+0x118>
    19d2:	8c 81       	ldd	r24, Y+4	; 0x04
    19d4:	9d 81       	ldd	r25, Y+5	; 0x05
    19d6:	83 30       	cpi	r24, 0x03	; 3
    19d8:	91 05       	cpc	r25, r1
    19da:	09 f4       	brne	.+2      	; 0x19de <GPIO_writePin+0x66>
    19dc:	85 c0       	rjmp	.+266    	; 0x1ae8 <GPIO_writePin+0x170>
    19de:	af c0       	rjmp	.+350    	; 0x1b3e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    19e0:	8b 81       	ldd	r24, Y+3	; 0x03
    19e2:	81 30       	cpi	r24, 0x01	; 1
    19e4:	a1 f4       	brne	.+40     	; 0x1a0e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    19e6:	ab e3       	ldi	r26, 0x3B	; 59
    19e8:	b0 e0       	ldi	r27, 0x00	; 0
    19ea:	eb e3       	ldi	r30, 0x3B	; 59
    19ec:	f0 e0       	ldi	r31, 0x00	; 0
    19ee:	80 81       	ld	r24, Z
    19f0:	48 2f       	mov	r20, r24
    19f2:	8a 81       	ldd	r24, Y+2	; 0x02
    19f4:	28 2f       	mov	r18, r24
    19f6:	30 e0       	ldi	r19, 0x00	; 0
    19f8:	81 e0       	ldi	r24, 0x01	; 1
    19fa:	90 e0       	ldi	r25, 0x00	; 0
    19fc:	02 2e       	mov	r0, r18
    19fe:	02 c0       	rjmp	.+4      	; 0x1a04 <GPIO_writePin+0x8c>
    1a00:	88 0f       	add	r24, r24
    1a02:	99 1f       	adc	r25, r25
    1a04:	0a 94       	dec	r0
    1a06:	e2 f7       	brpl	.-8      	; 0x1a00 <GPIO_writePin+0x88>
    1a08:	84 2b       	or	r24, r20
    1a0a:	8c 93       	st	X, r24
    1a0c:	98 c0       	rjmp	.+304    	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1a0e:	ab e3       	ldi	r26, 0x3B	; 59
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	eb e3       	ldi	r30, 0x3B	; 59
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	80 81       	ld	r24, Z
    1a18:	48 2f       	mov	r20, r24
    1a1a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a1c:	28 2f       	mov	r18, r24
    1a1e:	30 e0       	ldi	r19, 0x00	; 0
    1a20:	81 e0       	ldi	r24, 0x01	; 1
    1a22:	90 e0       	ldi	r25, 0x00	; 0
    1a24:	02 2e       	mov	r0, r18
    1a26:	02 c0       	rjmp	.+4      	; 0x1a2c <GPIO_writePin+0xb4>
    1a28:	88 0f       	add	r24, r24
    1a2a:	99 1f       	adc	r25, r25
    1a2c:	0a 94       	dec	r0
    1a2e:	e2 f7       	brpl	.-8      	; 0x1a28 <GPIO_writePin+0xb0>
    1a30:	80 95       	com	r24
    1a32:	84 23       	and	r24, r20
    1a34:	8c 93       	st	X, r24
    1a36:	83 c0       	rjmp	.+262    	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1a38:	8b 81       	ldd	r24, Y+3	; 0x03
    1a3a:	81 30       	cpi	r24, 0x01	; 1
    1a3c:	a1 f4       	brne	.+40     	; 0x1a66 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1a3e:	a8 e3       	ldi	r26, 0x38	; 56
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e8 e3       	ldi	r30, 0x38	; 56
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	80 81       	ld	r24, Z
    1a48:	48 2f       	mov	r20, r24
    1a4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4c:	28 2f       	mov	r18, r24
    1a4e:	30 e0       	ldi	r19, 0x00	; 0
    1a50:	81 e0       	ldi	r24, 0x01	; 1
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	02 2e       	mov	r0, r18
    1a56:	02 c0       	rjmp	.+4      	; 0x1a5c <GPIO_writePin+0xe4>
    1a58:	88 0f       	add	r24, r24
    1a5a:	99 1f       	adc	r25, r25
    1a5c:	0a 94       	dec	r0
    1a5e:	e2 f7       	brpl	.-8      	; 0x1a58 <GPIO_writePin+0xe0>
    1a60:	84 2b       	or	r24, r20
    1a62:	8c 93       	st	X, r24
    1a64:	6c c0       	rjmp	.+216    	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1a66:	a8 e3       	ldi	r26, 0x38	; 56
    1a68:	b0 e0       	ldi	r27, 0x00	; 0
    1a6a:	e8 e3       	ldi	r30, 0x38	; 56
    1a6c:	f0 e0       	ldi	r31, 0x00	; 0
    1a6e:	80 81       	ld	r24, Z
    1a70:	48 2f       	mov	r20, r24
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	28 2f       	mov	r18, r24
    1a76:	30 e0       	ldi	r19, 0x00	; 0
    1a78:	81 e0       	ldi	r24, 0x01	; 1
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	02 2e       	mov	r0, r18
    1a7e:	02 c0       	rjmp	.+4      	; 0x1a84 <GPIO_writePin+0x10c>
    1a80:	88 0f       	add	r24, r24
    1a82:	99 1f       	adc	r25, r25
    1a84:	0a 94       	dec	r0
    1a86:	e2 f7       	brpl	.-8      	; 0x1a80 <GPIO_writePin+0x108>
    1a88:	80 95       	com	r24
    1a8a:	84 23       	and	r24, r20
    1a8c:	8c 93       	st	X, r24
    1a8e:	57 c0       	rjmp	.+174    	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	81 30       	cpi	r24, 0x01	; 1
    1a94:	a1 f4       	brne	.+40     	; 0x1abe <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1a96:	a5 e3       	ldi	r26, 0x35	; 53
    1a98:	b0 e0       	ldi	r27, 0x00	; 0
    1a9a:	e5 e3       	ldi	r30, 0x35	; 53
    1a9c:	f0 e0       	ldi	r31, 0x00	; 0
    1a9e:	80 81       	ld	r24, Z
    1aa0:	48 2f       	mov	r20, r24
    1aa2:	8a 81       	ldd	r24, Y+2	; 0x02
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	02 2e       	mov	r0, r18
    1aae:	02 c0       	rjmp	.+4      	; 0x1ab4 <GPIO_writePin+0x13c>
    1ab0:	88 0f       	add	r24, r24
    1ab2:	99 1f       	adc	r25, r25
    1ab4:	0a 94       	dec	r0
    1ab6:	e2 f7       	brpl	.-8      	; 0x1ab0 <GPIO_writePin+0x138>
    1ab8:	84 2b       	or	r24, r20
    1aba:	8c 93       	st	X, r24
    1abc:	40 c0       	rjmp	.+128    	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1abe:	a5 e3       	ldi	r26, 0x35	; 53
    1ac0:	b0 e0       	ldi	r27, 0x00	; 0
    1ac2:	e5 e3       	ldi	r30, 0x35	; 53
    1ac4:	f0 e0       	ldi	r31, 0x00	; 0
    1ac6:	80 81       	ld	r24, Z
    1ac8:	48 2f       	mov	r20, r24
    1aca:	8a 81       	ldd	r24, Y+2	; 0x02
    1acc:	28 2f       	mov	r18, r24
    1ace:	30 e0       	ldi	r19, 0x00	; 0
    1ad0:	81 e0       	ldi	r24, 0x01	; 1
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	02 2e       	mov	r0, r18
    1ad6:	02 c0       	rjmp	.+4      	; 0x1adc <GPIO_writePin+0x164>
    1ad8:	88 0f       	add	r24, r24
    1ada:	99 1f       	adc	r25, r25
    1adc:	0a 94       	dec	r0
    1ade:	e2 f7       	brpl	.-8      	; 0x1ad8 <GPIO_writePin+0x160>
    1ae0:	80 95       	com	r24
    1ae2:	84 23       	and	r24, r20
    1ae4:	8c 93       	st	X, r24
    1ae6:	2b c0       	rjmp	.+86     	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1ae8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aea:	81 30       	cpi	r24, 0x01	; 1
    1aec:	a1 f4       	brne	.+40     	; 0x1b16 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1aee:	a2 e3       	ldi	r26, 0x32	; 50
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	e2 e3       	ldi	r30, 0x32	; 50
    1af4:	f0 e0       	ldi	r31, 0x00	; 0
    1af6:	80 81       	ld	r24, Z
    1af8:	48 2f       	mov	r20, r24
    1afa:	8a 81       	ldd	r24, Y+2	; 0x02
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	02 2e       	mov	r0, r18
    1b06:	02 c0       	rjmp	.+4      	; 0x1b0c <GPIO_writePin+0x194>
    1b08:	88 0f       	add	r24, r24
    1b0a:	99 1f       	adc	r25, r25
    1b0c:	0a 94       	dec	r0
    1b0e:	e2 f7       	brpl	.-8      	; 0x1b08 <GPIO_writePin+0x190>
    1b10:	84 2b       	or	r24, r20
    1b12:	8c 93       	st	X, r24
    1b14:	14 c0       	rjmp	.+40     	; 0x1b3e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1b16:	a2 e3       	ldi	r26, 0x32	; 50
    1b18:	b0 e0       	ldi	r27, 0x00	; 0
    1b1a:	e2 e3       	ldi	r30, 0x32	; 50
    1b1c:	f0 e0       	ldi	r31, 0x00	; 0
    1b1e:	80 81       	ld	r24, Z
    1b20:	48 2f       	mov	r20, r24
    1b22:	8a 81       	ldd	r24, Y+2	; 0x02
    1b24:	28 2f       	mov	r18, r24
    1b26:	30 e0       	ldi	r19, 0x00	; 0
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	90 e0       	ldi	r25, 0x00	; 0
    1b2c:	02 2e       	mov	r0, r18
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <GPIO_writePin+0x1bc>
    1b30:	88 0f       	add	r24, r24
    1b32:	99 1f       	adc	r25, r25
    1b34:	0a 94       	dec	r0
    1b36:	e2 f7       	brpl	.-8      	; 0x1b30 <GPIO_writePin+0x1b8>
    1b38:	80 95       	com	r24
    1b3a:	84 23       	and	r24, r20
    1b3c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1b3e:	0f 90       	pop	r0
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	0f 90       	pop	r0
    1b46:	0f 90       	pop	r0
    1b48:	cf 91       	pop	r28
    1b4a:	df 91       	pop	r29
    1b4c:	08 95       	ret

00001b4e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1b4e:	df 93       	push	r29
    1b50:	cf 93       	push	r28
    1b52:	00 d0       	rcall	.+0      	; 0x1b54 <GPIO_readPin+0x6>
    1b54:	00 d0       	rcall	.+0      	; 0x1b56 <GPIO_readPin+0x8>
    1b56:	0f 92       	push	r0
    1b58:	cd b7       	in	r28, 0x3d	; 61
    1b5a:	de b7       	in	r29, 0x3e	; 62
    1b5c:	8a 83       	std	Y+2, r24	; 0x02
    1b5e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1b60:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1b62:	8b 81       	ldd	r24, Y+3	; 0x03
    1b64:	88 30       	cpi	r24, 0x08	; 8
    1b66:	08 f0       	brcs	.+2      	; 0x1b6a <GPIO_readPin+0x1c>
    1b68:	84 c0       	rjmp	.+264    	; 0x1c72 <GPIO_readPin+0x124>
    1b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b6c:	84 30       	cpi	r24, 0x04	; 4
    1b6e:	08 f0       	brcs	.+2      	; 0x1b72 <GPIO_readPin+0x24>
    1b70:	80 c0       	rjmp	.+256    	; 0x1c72 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	28 2f       	mov	r18, r24
    1b76:	30 e0       	ldi	r19, 0x00	; 0
    1b78:	3d 83       	std	Y+5, r19	; 0x05
    1b7a:	2c 83       	std	Y+4, r18	; 0x04
    1b7c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b7e:	5d 81       	ldd	r21, Y+5	; 0x05
    1b80:	41 30       	cpi	r20, 0x01	; 1
    1b82:	51 05       	cpc	r21, r1
    1b84:	79 f1       	breq	.+94     	; 0x1be4 <GPIO_readPin+0x96>
    1b86:	8c 81       	ldd	r24, Y+4	; 0x04
    1b88:	9d 81       	ldd	r25, Y+5	; 0x05
    1b8a:	82 30       	cpi	r24, 0x02	; 2
    1b8c:	91 05       	cpc	r25, r1
    1b8e:	34 f4       	brge	.+12     	; 0x1b9c <GPIO_readPin+0x4e>
    1b90:	2c 81       	ldd	r18, Y+4	; 0x04
    1b92:	3d 81       	ldd	r19, Y+5	; 0x05
    1b94:	21 15       	cp	r18, r1
    1b96:	31 05       	cpc	r19, r1
    1b98:	69 f0       	breq	.+26     	; 0x1bb4 <GPIO_readPin+0x66>
    1b9a:	6b c0       	rjmp	.+214    	; 0x1c72 <GPIO_readPin+0x124>
    1b9c:	4c 81       	ldd	r20, Y+4	; 0x04
    1b9e:	5d 81       	ldd	r21, Y+5	; 0x05
    1ba0:	42 30       	cpi	r20, 0x02	; 2
    1ba2:	51 05       	cpc	r21, r1
    1ba4:	b9 f1       	breq	.+110    	; 0x1c14 <GPIO_readPin+0xc6>
    1ba6:	8c 81       	ldd	r24, Y+4	; 0x04
    1ba8:	9d 81       	ldd	r25, Y+5	; 0x05
    1baa:	83 30       	cpi	r24, 0x03	; 3
    1bac:	91 05       	cpc	r25, r1
    1bae:	09 f4       	brne	.+2      	; 0x1bb2 <GPIO_readPin+0x64>
    1bb0:	49 c0       	rjmp	.+146    	; 0x1c44 <GPIO_readPin+0xf6>
    1bb2:	5f c0       	rjmp	.+190    	; 0x1c72 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1bb4:	e9 e3       	ldi	r30, 0x39	; 57
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	28 2f       	mov	r18, r24
    1bbc:	30 e0       	ldi	r19, 0x00	; 0
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	88 2f       	mov	r24, r24
    1bc2:	90 e0       	ldi	r25, 0x00	; 0
    1bc4:	a9 01       	movw	r20, r18
    1bc6:	02 c0       	rjmp	.+4      	; 0x1bcc <GPIO_readPin+0x7e>
    1bc8:	55 95       	asr	r21
    1bca:	47 95       	ror	r20
    1bcc:	8a 95       	dec	r24
    1bce:	e2 f7       	brpl	.-8      	; 0x1bc8 <GPIO_readPin+0x7a>
    1bd0:	ca 01       	movw	r24, r20
    1bd2:	81 70       	andi	r24, 0x01	; 1
    1bd4:	90 70       	andi	r25, 0x00	; 0
    1bd6:	88 23       	and	r24, r24
    1bd8:	19 f0       	breq	.+6      	; 0x1be0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1bda:	81 e0       	ldi	r24, 0x01	; 1
    1bdc:	89 83       	std	Y+1, r24	; 0x01
    1bde:	49 c0       	rjmp	.+146    	; 0x1c72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1be0:	19 82       	std	Y+1, r1	; 0x01
    1be2:	47 c0       	rjmp	.+142    	; 0x1c72 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1be4:	e6 e3       	ldi	r30, 0x36	; 54
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	28 2f       	mov	r18, r24
    1bec:	30 e0       	ldi	r19, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	88 2f       	mov	r24, r24
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	a9 01       	movw	r20, r18
    1bf6:	02 c0       	rjmp	.+4      	; 0x1bfc <GPIO_readPin+0xae>
    1bf8:	55 95       	asr	r21
    1bfa:	47 95       	ror	r20
    1bfc:	8a 95       	dec	r24
    1bfe:	e2 f7       	brpl	.-8      	; 0x1bf8 <GPIO_readPin+0xaa>
    1c00:	ca 01       	movw	r24, r20
    1c02:	81 70       	andi	r24, 0x01	; 1
    1c04:	90 70       	andi	r25, 0x00	; 0
    1c06:	88 23       	and	r24, r24
    1c08:	19 f0       	breq	.+6      	; 0x1c10 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1c0a:	81 e0       	ldi	r24, 0x01	; 1
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	31 c0       	rjmp	.+98     	; 0x1c72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c10:	19 82       	std	Y+1, r1	; 0x01
    1c12:	2f c0       	rjmp	.+94     	; 0x1c72 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1c14:	e3 e3       	ldi	r30, 0x33	; 51
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	80 81       	ld	r24, Z
    1c1a:	28 2f       	mov	r18, r24
    1c1c:	30 e0       	ldi	r19, 0x00	; 0
    1c1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c20:	88 2f       	mov	r24, r24
    1c22:	90 e0       	ldi	r25, 0x00	; 0
    1c24:	a9 01       	movw	r20, r18
    1c26:	02 c0       	rjmp	.+4      	; 0x1c2c <GPIO_readPin+0xde>
    1c28:	55 95       	asr	r21
    1c2a:	47 95       	ror	r20
    1c2c:	8a 95       	dec	r24
    1c2e:	e2 f7       	brpl	.-8      	; 0x1c28 <GPIO_readPin+0xda>
    1c30:	ca 01       	movw	r24, r20
    1c32:	81 70       	andi	r24, 0x01	; 1
    1c34:	90 70       	andi	r25, 0x00	; 0
    1c36:	88 23       	and	r24, r24
    1c38:	19 f0       	breq	.+6      	; 0x1c40 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1c3a:	81 e0       	ldi	r24, 0x01	; 1
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	19 c0       	rjmp	.+50     	; 0x1c72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c40:	19 82       	std	Y+1, r1	; 0x01
    1c42:	17 c0       	rjmp	.+46     	; 0x1c72 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1c44:	e0 e3       	ldi	r30, 0x30	; 48
    1c46:	f0 e0       	ldi	r31, 0x00	; 0
    1c48:	80 81       	ld	r24, Z
    1c4a:	28 2f       	mov	r18, r24
    1c4c:	30 e0       	ldi	r19, 0x00	; 0
    1c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c50:	88 2f       	mov	r24, r24
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	a9 01       	movw	r20, r18
    1c56:	02 c0       	rjmp	.+4      	; 0x1c5c <GPIO_readPin+0x10e>
    1c58:	55 95       	asr	r21
    1c5a:	47 95       	ror	r20
    1c5c:	8a 95       	dec	r24
    1c5e:	e2 f7       	brpl	.-8      	; 0x1c58 <GPIO_readPin+0x10a>
    1c60:	ca 01       	movw	r24, r20
    1c62:	81 70       	andi	r24, 0x01	; 1
    1c64:	90 70       	andi	r25, 0x00	; 0
    1c66:	88 23       	and	r24, r24
    1c68:	19 f0       	breq	.+6      	; 0x1c70 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1c6a:	81 e0       	ldi	r24, 0x01	; 1
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	01 c0       	rjmp	.+2      	; 0x1c72 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1c70:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1c72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1c74:	0f 90       	pop	r0
    1c76:	0f 90       	pop	r0
    1c78:	0f 90       	pop	r0
    1c7a:	0f 90       	pop	r0
    1c7c:	0f 90       	pop	r0
    1c7e:	cf 91       	pop	r28
    1c80:	df 91       	pop	r29
    1c82:	08 95       	ret

00001c84 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1c84:	df 93       	push	r29
    1c86:	cf 93       	push	r28
    1c88:	00 d0       	rcall	.+0      	; 0x1c8a <GPIO_setupPortDirection+0x6>
    1c8a:	00 d0       	rcall	.+0      	; 0x1c8c <GPIO_setupPortDirection+0x8>
    1c8c:	cd b7       	in	r28, 0x3d	; 61
    1c8e:	de b7       	in	r29, 0x3e	; 62
    1c90:	89 83       	std	Y+1, r24	; 0x01
    1c92:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c94:	89 81       	ldd	r24, Y+1	; 0x01
    1c96:	84 30       	cpi	r24, 0x04	; 4
    1c98:	90 f5       	brcc	.+100    	; 0x1cfe <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1c9a:	89 81       	ldd	r24, Y+1	; 0x01
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	3c 83       	std	Y+4, r19	; 0x04
    1ca2:	2b 83       	std	Y+3, r18	; 0x03
    1ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca8:	81 30       	cpi	r24, 0x01	; 1
    1caa:	91 05       	cpc	r25, r1
    1cac:	d1 f0       	breq	.+52     	; 0x1ce2 <GPIO_setupPortDirection+0x5e>
    1cae:	2b 81       	ldd	r18, Y+3	; 0x03
    1cb0:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb2:	22 30       	cpi	r18, 0x02	; 2
    1cb4:	31 05       	cpc	r19, r1
    1cb6:	2c f4       	brge	.+10     	; 0x1cc2 <GPIO_setupPortDirection+0x3e>
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	00 97       	sbiw	r24, 0x00	; 0
    1cbe:	61 f0       	breq	.+24     	; 0x1cd8 <GPIO_setupPortDirection+0x54>
    1cc0:	1e c0       	rjmp	.+60     	; 0x1cfe <GPIO_setupPortDirection+0x7a>
    1cc2:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc4:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc6:	22 30       	cpi	r18, 0x02	; 2
    1cc8:	31 05       	cpc	r19, r1
    1cca:	81 f0       	breq	.+32     	; 0x1cec <GPIO_setupPortDirection+0x68>
    1ccc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cce:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd0:	83 30       	cpi	r24, 0x03	; 3
    1cd2:	91 05       	cpc	r25, r1
    1cd4:	81 f0       	breq	.+32     	; 0x1cf6 <GPIO_setupPortDirection+0x72>
    1cd6:	13 c0       	rjmp	.+38     	; 0x1cfe <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1cd8:	ea e3       	ldi	r30, 0x3A	; 58
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    1cde:	80 83       	st	Z, r24
    1ce0:	0e c0       	rjmp	.+28     	; 0x1cfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1ce2:	e7 e3       	ldi	r30, 0x37	; 55
    1ce4:	f0 e0       	ldi	r31, 0x00	; 0
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	80 83       	st	Z, r24
    1cea:	09 c0       	rjmp	.+18     	; 0x1cfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1cec:	e4 e3       	ldi	r30, 0x34	; 52
    1cee:	f0 e0       	ldi	r31, 0x00	; 0
    1cf0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cf2:	80 83       	st	Z, r24
    1cf4:	04 c0       	rjmp	.+8      	; 0x1cfe <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1cf6:	e1 e3       	ldi	r30, 0x31	; 49
    1cf8:	f0 e0       	ldi	r31, 0x00	; 0
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	0f 90       	pop	r0
    1d04:	0f 90       	pop	r0
    1d06:	cf 91       	pop	r28
    1d08:	df 91       	pop	r29
    1d0a:	08 95       	ret

00001d0c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1d0c:	df 93       	push	r29
    1d0e:	cf 93       	push	r28
    1d10:	00 d0       	rcall	.+0      	; 0x1d12 <GPIO_writePort+0x6>
    1d12:	00 d0       	rcall	.+0      	; 0x1d14 <GPIO_writePort+0x8>
    1d14:	cd b7       	in	r28, 0x3d	; 61
    1d16:	de b7       	in	r29, 0x3e	; 62
    1d18:	89 83       	std	Y+1, r24	; 0x01
    1d1a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	84 30       	cpi	r24, 0x04	; 4
    1d20:	90 f5       	brcc	.+100    	; 0x1d86 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1d22:	89 81       	ldd	r24, Y+1	; 0x01
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	3c 83       	std	Y+4, r19	; 0x04
    1d2a:	2b 83       	std	Y+3, r18	; 0x03
    1d2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d30:	81 30       	cpi	r24, 0x01	; 1
    1d32:	91 05       	cpc	r25, r1
    1d34:	d1 f0       	breq	.+52     	; 0x1d6a <GPIO_writePort+0x5e>
    1d36:	2b 81       	ldd	r18, Y+3	; 0x03
    1d38:	3c 81       	ldd	r19, Y+4	; 0x04
    1d3a:	22 30       	cpi	r18, 0x02	; 2
    1d3c:	31 05       	cpc	r19, r1
    1d3e:	2c f4       	brge	.+10     	; 0x1d4a <GPIO_writePort+0x3e>
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	9c 81       	ldd	r25, Y+4	; 0x04
    1d44:	00 97       	sbiw	r24, 0x00	; 0
    1d46:	61 f0       	breq	.+24     	; 0x1d60 <GPIO_writePort+0x54>
    1d48:	1e c0       	rjmp	.+60     	; 0x1d86 <GPIO_writePort+0x7a>
    1d4a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d4c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d4e:	22 30       	cpi	r18, 0x02	; 2
    1d50:	31 05       	cpc	r19, r1
    1d52:	81 f0       	breq	.+32     	; 0x1d74 <GPIO_writePort+0x68>
    1d54:	8b 81       	ldd	r24, Y+3	; 0x03
    1d56:	9c 81       	ldd	r25, Y+4	; 0x04
    1d58:	83 30       	cpi	r24, 0x03	; 3
    1d5a:	91 05       	cpc	r25, r1
    1d5c:	81 f0       	breq	.+32     	; 0x1d7e <GPIO_writePort+0x72>
    1d5e:	13 c0       	rjmp	.+38     	; 0x1d86 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1d60:	eb e3       	ldi	r30, 0x3B	; 59
    1d62:	f0 e0       	ldi	r31, 0x00	; 0
    1d64:	8a 81       	ldd	r24, Y+2	; 0x02
    1d66:	80 83       	st	Z, r24
    1d68:	0e c0       	rjmp	.+28     	; 0x1d86 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1d6a:	e8 e3       	ldi	r30, 0x38	; 56
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	8a 81       	ldd	r24, Y+2	; 0x02
    1d70:	80 83       	st	Z, r24
    1d72:	09 c0       	rjmp	.+18     	; 0x1d86 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1d74:	e5 e3       	ldi	r30, 0x35	; 53
    1d76:	f0 e0       	ldi	r31, 0x00	; 0
    1d78:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7a:	80 83       	st	Z, r24
    1d7c:	04 c0       	rjmp	.+8      	; 0x1d86 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1d7e:	e2 e3       	ldi	r30, 0x32	; 50
    1d80:	f0 e0       	ldi	r31, 0x00	; 0
    1d82:	8a 81       	ldd	r24, Y+2	; 0x02
    1d84:	80 83       	st	Z, r24
			break;
		}
	}
}
    1d86:	0f 90       	pop	r0
    1d88:	0f 90       	pop	r0
    1d8a:	0f 90       	pop	r0
    1d8c:	0f 90       	pop	r0
    1d8e:	cf 91       	pop	r28
    1d90:	df 91       	pop	r29
    1d92:	08 95       	ret

00001d94 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1d94:	df 93       	push	r29
    1d96:	cf 93       	push	r28
    1d98:	00 d0       	rcall	.+0      	; 0x1d9a <GPIO_readPort+0x6>
    1d9a:	00 d0       	rcall	.+0      	; 0x1d9c <GPIO_readPort+0x8>
    1d9c:	cd b7       	in	r28, 0x3d	; 61
    1d9e:	de b7       	in	r29, 0x3e	; 62
    1da0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1da2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1da4:	8a 81       	ldd	r24, Y+2	; 0x02
    1da6:	84 30       	cpi	r24, 0x04	; 4
    1da8:	90 f5       	brcc	.+100    	; 0x1e0e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	3c 83       	std	Y+4, r19	; 0x04
    1db2:	2b 83       	std	Y+3, r18	; 0x03
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	81 30       	cpi	r24, 0x01	; 1
    1dba:	91 05       	cpc	r25, r1
    1dbc:	d1 f0       	breq	.+52     	; 0x1df2 <GPIO_readPort+0x5e>
    1dbe:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc0:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc2:	22 30       	cpi	r18, 0x02	; 2
    1dc4:	31 05       	cpc	r19, r1
    1dc6:	2c f4       	brge	.+10     	; 0x1dd2 <GPIO_readPort+0x3e>
    1dc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dca:	9c 81       	ldd	r25, Y+4	; 0x04
    1dcc:	00 97       	sbiw	r24, 0x00	; 0
    1dce:	61 f0       	breq	.+24     	; 0x1de8 <GPIO_readPort+0x54>
    1dd0:	1e c0       	rjmp	.+60     	; 0x1e0e <GPIO_readPort+0x7a>
    1dd2:	2b 81       	ldd	r18, Y+3	; 0x03
    1dd4:	3c 81       	ldd	r19, Y+4	; 0x04
    1dd6:	22 30       	cpi	r18, 0x02	; 2
    1dd8:	31 05       	cpc	r19, r1
    1dda:	81 f0       	breq	.+32     	; 0x1dfc <GPIO_readPort+0x68>
    1ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dde:	9c 81       	ldd	r25, Y+4	; 0x04
    1de0:	83 30       	cpi	r24, 0x03	; 3
    1de2:	91 05       	cpc	r25, r1
    1de4:	81 f0       	breq	.+32     	; 0x1e06 <GPIO_readPort+0x72>
    1de6:	13 c0       	rjmp	.+38     	; 0x1e0e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1de8:	e9 e3       	ldi	r30, 0x39	; 57
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	89 83       	std	Y+1, r24	; 0x01
    1df0:	0e c0       	rjmp	.+28     	; 0x1e0e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1df2:	e6 e3       	ldi	r30, 0x36	; 54
    1df4:	f0 e0       	ldi	r31, 0x00	; 0
    1df6:	80 81       	ld	r24, Z
    1df8:	89 83       	std	Y+1, r24	; 0x01
    1dfa:	09 c0       	rjmp	.+18     	; 0x1e0e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1dfc:	e3 e3       	ldi	r30, 0x33	; 51
    1dfe:	f0 e0       	ldi	r31, 0x00	; 0
    1e00:	80 81       	ld	r24, Z
    1e02:	89 83       	std	Y+1, r24	; 0x01
    1e04:	04 c0       	rjmp	.+8      	; 0x1e0e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1e06:	e0 e3       	ldi	r30, 0x30	; 48
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	80 81       	ld	r24, Z
    1e0c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1e0e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1e10:	0f 90       	pop	r0
    1e12:	0f 90       	pop	r0
    1e14:	0f 90       	pop	r0
    1e16:	0f 90       	pop	r0
    1e18:	cf 91       	pop	r28
    1e1a:	df 91       	pop	r29
    1e1c:	08 95       	ret

00001e1e <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    1e1e:	df 93       	push	r29
    1e20:	cf 93       	push	r28
    1e22:	cd b7       	in	r28, 0x3d	; 61
    1e24:	de b7       	in	r29, 0x3e	; 62
    1e26:	60 97       	sbiw	r28, 0x10	; 16
    1e28:	0f b6       	in	r0, 0x3f	; 63
    1e2a:	f8 94       	cli
    1e2c:	de bf       	out	0x3e, r29	; 62
    1e2e:	0f be       	out	0x3f, r0	; 63
    1e30:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1e32:	82 e0       	ldi	r24, 0x02	; 2
    1e34:	60 e0       	ldi	r22, 0x00	; 0
    1e36:	40 e0       	ldi	r20, 0x00	; 0
    1e38:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    1e3c:	82 e0       	ldi	r24, 0x02	; 2
    1e3e:	61 e0       	ldi	r22, 0x01	; 1
    1e40:	40 e0       	ldi	r20, 0x00	; 0
    1e42:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1e46:	82 e0       	ldi	r24, 0x02	; 2
    1e48:	62 e0       	ldi	r22, 0x02	; 2
    1e4a:	40 e0       	ldi	r20, 0x00	; 0
    1e4c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    1e50:	82 e0       	ldi	r24, 0x02	; 2
    1e52:	63 e0       	ldi	r22, 0x03	; 3
    1e54:	40 e0       	ldi	r20, 0x00	; 0
    1e56:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1e5a:	82 e0       	ldi	r24, 0x02	; 2
    1e5c:	64 e0       	ldi	r22, 0x04	; 4
    1e5e:	40 e0       	ldi	r20, 0x00	; 0
    1e60:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1e64:	82 e0       	ldi	r24, 0x02	; 2
    1e66:	65 e0       	ldi	r22, 0x05	; 5
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    1e6e:	82 e0       	ldi	r24, 0x02	; 2
    1e70:	66 e0       	ldi	r22, 0x06	; 6
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1e78:	82 e0       	ldi	r24, 0x02	; 2
    1e7a:	67 e0       	ldi	r22, 0x07	; 7
    1e7c:	40 e0       	ldi	r20, 0x00	; 0
    1e7e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1e82:	1f 86       	std	Y+15, r1	; 0x0f
    1e84:	ab c0       	rjmp	.+342    	; 0x1fdc <KEYPAD_getPressedKey+0x1be>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    1e86:	82 e0       	ldi	r24, 0x02	; 2
    1e88:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    1e90:	82 e0       	ldi	r24, 0x02	; 2
    1e92:	6f 85       	ldd	r22, Y+15	; 0x0f
    1e94:	40 e0       	ldi	r20, 0x00	; 0
    1e96:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1e9a:	18 8a       	std	Y+16, r1	; 0x10
    1e9c:	22 c0       	rjmp	.+68     	; 0x1ee2 <KEYPAD_getPressedKey+0xc4>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    1e9e:	88 89       	ldd	r24, Y+16	; 0x10
    1ea0:	98 2f       	mov	r25, r24
    1ea2:	9c 5f       	subi	r25, 0xFC	; 252
    1ea4:	82 e0       	ldi	r24, 0x02	; 2
    1ea6:	69 2f       	mov	r22, r25
    1ea8:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <GPIO_readPin>
    1eac:	88 23       	and	r24, r24
    1eae:	b1 f4       	brne	.+44     	; 0x1edc <KEYPAD_getPressedKey+0xbe>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1eb0:	8f 85       	ldd	r24, Y+15	; 0x0f
    1eb2:	88 2f       	mov	r24, r24
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	88 0f       	add	r24, r24
    1eb8:	99 1f       	adc	r25, r25
    1eba:	88 0f       	add	r24, r24
    1ebc:	99 1f       	adc	r25, r25
    1ebe:	98 2f       	mov	r25, r24
    1ec0:	88 89       	ldd	r24, Y+16	; 0x10
    1ec2:	89 0f       	add	r24, r25
    1ec4:	8f 5f       	subi	r24, 0xFF	; 255
    1ec6:	0e 94 f3 0f 	call	0x1fe6	; 0x1fe6 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    1eca:	60 96       	adiw	r28, 0x10	; 16
    1ecc:	0f b6       	in	r0, 0x3f	; 63
    1ece:	f8 94       	cli
    1ed0:	de bf       	out	0x3e, r29	; 62
    1ed2:	0f be       	out	0x3f, r0	; 63
    1ed4:	cd bf       	out	0x3d, r28	; 61
    1ed6:	cf 91       	pop	r28
    1ed8:	df 91       	pop	r29
    1eda:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1edc:	88 89       	ldd	r24, Y+16	; 0x10
    1ede:	8f 5f       	subi	r24, 0xFF	; 255
    1ee0:	88 8b       	std	Y+16, r24	; 0x10
    1ee2:	88 89       	ldd	r24, Y+16	; 0x10
    1ee4:	84 30       	cpi	r24, 0x04	; 4
    1ee6:	d8 f2       	brcs	.-74     	; 0x1e9e <KEYPAD_getPressedKey+0x80>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1ee8:	82 e0       	ldi	r24, 0x02	; 2
    1eea:	6f 85       	ldd	r22, Y+15	; 0x0f
    1eec:	40 e0       	ldi	r20, 0x00	; 0
    1eee:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
    1ef2:	80 e0       	ldi	r24, 0x00	; 0
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	a0 ea       	ldi	r26, 0xA0	; 160
    1ef8:	b0 e4       	ldi	r27, 0x40	; 64
    1efa:	8b 87       	std	Y+11, r24	; 0x0b
    1efc:	9c 87       	std	Y+12, r25	; 0x0c
    1efe:	ad 87       	std	Y+13, r26	; 0x0d
    1f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f02:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f04:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f06:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f08:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	30 e0       	ldi	r19, 0x00	; 0
    1f0e:	4a ef       	ldi	r20, 0xFA	; 250
    1f10:	54 e4       	ldi	r21, 0x44	; 68
    1f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f16:	dc 01       	movw	r26, r24
    1f18:	cb 01       	movw	r24, r22
    1f1a:	8f 83       	std	Y+7, r24	; 0x07
    1f1c:	98 87       	std	Y+8, r25	; 0x08
    1f1e:	a9 87       	std	Y+9, r26	; 0x09
    1f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f22:	6f 81       	ldd	r22, Y+7	; 0x07
    1f24:	78 85       	ldd	r23, Y+8	; 0x08
    1f26:	89 85       	ldd	r24, Y+9	; 0x09
    1f28:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f2a:	20 e0       	ldi	r18, 0x00	; 0
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	40 e8       	ldi	r20, 0x80	; 128
    1f30:	5f e3       	ldi	r21, 0x3F	; 63
    1f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f36:	88 23       	and	r24, r24
    1f38:	2c f4       	brge	.+10     	; 0x1f44 <KEYPAD_getPressedKey+0x126>
		__ticks = 1;
    1f3a:	81 e0       	ldi	r24, 0x01	; 1
    1f3c:	90 e0       	ldi	r25, 0x00	; 0
    1f3e:	9e 83       	std	Y+6, r25	; 0x06
    1f40:	8d 83       	std	Y+5, r24	; 0x05
    1f42:	3f c0       	rjmp	.+126    	; 0x1fc2 <KEYPAD_getPressedKey+0x1a4>
	else if (__tmp > 65535)
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	3f ef       	ldi	r19, 0xFF	; 255
    1f50:	4f e7       	ldi	r20, 0x7F	; 127
    1f52:	57 e4       	ldi	r21, 0x47	; 71
    1f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f58:	18 16       	cp	r1, r24
    1f5a:	4c f5       	brge	.+82     	; 0x1fae <KEYPAD_getPressedKey+0x190>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f60:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f62:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f64:	20 e0       	ldi	r18, 0x00	; 0
    1f66:	30 e0       	ldi	r19, 0x00	; 0
    1f68:	40 e2       	ldi	r20, 0x20	; 32
    1f6a:	51 e4       	ldi	r21, 0x41	; 65
    1f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	bc 01       	movw	r22, r24
    1f76:	cd 01       	movw	r24, r26
    1f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	cb 01       	movw	r24, r22
    1f80:	9e 83       	std	Y+6, r25	; 0x06
    1f82:	8d 83       	std	Y+5, r24	; 0x05
    1f84:	0f c0       	rjmp	.+30     	; 0x1fa4 <KEYPAD_getPressedKey+0x186>
    1f86:	88 ec       	ldi	r24, 0xC8	; 200
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	9c 83       	std	Y+4, r25	; 0x04
    1f8c:	8b 83       	std	Y+3, r24	; 0x03
    1f8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f90:	9c 81       	ldd	r25, Y+4	; 0x04
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	f1 f7       	brne	.-4      	; 0x1f92 <KEYPAD_getPressedKey+0x174>
    1f96:	9c 83       	std	Y+4, r25	; 0x04
    1f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9c:	9e 81       	ldd	r25, Y+6	; 0x06
    1f9e:	01 97       	sbiw	r24, 0x01	; 1
    1fa0:	9e 83       	std	Y+6, r25	; 0x06
    1fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fa4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fa6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	69 f7       	brne	.-38     	; 0x1f86 <KEYPAD_getPressedKey+0x168>
    1fac:	14 c0       	rjmp	.+40     	; 0x1fd6 <KEYPAD_getPressedKey+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fae:	6f 81       	ldd	r22, Y+7	; 0x07
    1fb0:	78 85       	ldd	r23, Y+8	; 0x08
    1fb2:	89 85       	ldd	r24, Y+9	; 0x09
    1fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	9e 83       	std	Y+6, r25	; 0x06
    1fc0:	8d 83       	std	Y+5, r24	; 0x05
    1fc2:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc4:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc6:	9a 83       	std	Y+2, r25	; 0x02
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	9a 81       	ldd	r25, Y+2	; 0x02
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	f1 f7       	brne	.-4      	; 0x1fce <KEYPAD_getPressedKey+0x1b0>
    1fd2:	9a 83       	std	Y+2, r25	; 0x02
    1fd4:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1fd6:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fd8:	8f 5f       	subi	r24, 0xFF	; 255
    1fda:	8f 87       	std	Y+15, r24	; 0x0f
    1fdc:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fde:	84 30       	cpi	r24, 0x04	; 4
    1fe0:	08 f4       	brcc	.+2      	; 0x1fe4 <KEYPAD_getPressedKey+0x1c6>
    1fe2:	51 cf       	rjmp	.-350    	; 0x1e86 <KEYPAD_getPressedKey+0x68>
    1fe4:	4e cf       	rjmp	.-356    	; 0x1e82 <KEYPAD_getPressedKey+0x64>

00001fe6 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1fe6:	df 93       	push	r29
    1fe8:	cf 93       	push	r28
    1fea:	00 d0       	rcall	.+0      	; 0x1fec <KEYPAD_4x4_adjustKeyNumber+0x6>
    1fec:	00 d0       	rcall	.+0      	; 0x1fee <KEYPAD_4x4_adjustKeyNumber+0x8>
    1fee:	cd b7       	in	r28, 0x3d	; 61
    1ff0:	de b7       	in	r29, 0x3e	; 62
    1ff2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1ff4:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1ff6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff8:	28 2f       	mov	r18, r24
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	3c 83       	std	Y+4, r19	; 0x04
    1ffe:	2b 83       	std	Y+3, r18	; 0x03
    2000:	8b 81       	ldd	r24, Y+3	; 0x03
    2002:	9c 81       	ldd	r25, Y+4	; 0x04
    2004:	88 30       	cpi	r24, 0x08	; 8
    2006:	91 05       	cpc	r25, r1
    2008:	09 f4       	brne	.+2      	; 0x200c <KEYPAD_4x4_adjustKeyNumber+0x26>
    200a:	70 c0       	rjmp	.+224    	; 0x20ec <KEYPAD_4x4_adjustKeyNumber+0x106>
    200c:	2b 81       	ldd	r18, Y+3	; 0x03
    200e:	3c 81       	ldd	r19, Y+4	; 0x04
    2010:	29 30       	cpi	r18, 0x09	; 9
    2012:	31 05       	cpc	r19, r1
    2014:	5c f5       	brge	.+86     	; 0x206c <KEYPAD_4x4_adjustKeyNumber+0x86>
    2016:	8b 81       	ldd	r24, Y+3	; 0x03
    2018:	9c 81       	ldd	r25, Y+4	; 0x04
    201a:	84 30       	cpi	r24, 0x04	; 4
    201c:	91 05       	cpc	r25, r1
    201e:	09 f4       	brne	.+2      	; 0x2022 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    2020:	59 c0       	rjmp	.+178    	; 0x20d4 <KEYPAD_4x4_adjustKeyNumber+0xee>
    2022:	2b 81       	ldd	r18, Y+3	; 0x03
    2024:	3c 81       	ldd	r19, Y+4	; 0x04
    2026:	25 30       	cpi	r18, 0x05	; 5
    2028:	31 05       	cpc	r19, r1
    202a:	9c f4       	brge	.+38     	; 0x2052 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    202c:	8b 81       	ldd	r24, Y+3	; 0x03
    202e:	9c 81       	ldd	r25, Y+4	; 0x04
    2030:	82 30       	cpi	r24, 0x02	; 2
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <KEYPAD_4x4_adjustKeyNumber+0x52>
    2036:	48 c0       	rjmp	.+144    	; 0x20c8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    2038:	2b 81       	ldd	r18, Y+3	; 0x03
    203a:	3c 81       	ldd	r19, Y+4	; 0x04
    203c:	23 30       	cpi	r18, 0x03	; 3
    203e:	31 05       	cpc	r19, r1
    2040:	0c f0       	brlt	.+2      	; 0x2044 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    2042:	45 c0       	rjmp	.+138    	; 0x20ce <KEYPAD_4x4_adjustKeyNumber+0xe8>
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	9c 81       	ldd	r25, Y+4	; 0x04
    2048:	81 30       	cpi	r24, 0x01	; 1
    204a:	91 05       	cpc	r25, r1
    204c:	09 f4       	brne	.+2      	; 0x2050 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    204e:	39 c0       	rjmp	.+114    	; 0x20c2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    2050:	67 c0       	rjmp	.+206    	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    2052:	2b 81       	ldd	r18, Y+3	; 0x03
    2054:	3c 81       	ldd	r19, Y+4	; 0x04
    2056:	26 30       	cpi	r18, 0x06	; 6
    2058:	31 05       	cpc	r19, r1
    205a:	09 f4       	brne	.+2      	; 0x205e <KEYPAD_4x4_adjustKeyNumber+0x78>
    205c:	41 c0       	rjmp	.+130    	; 0x20e0 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    205e:	8b 81       	ldd	r24, Y+3	; 0x03
    2060:	9c 81       	ldd	r25, Y+4	; 0x04
    2062:	87 30       	cpi	r24, 0x07	; 7
    2064:	91 05       	cpc	r25, r1
    2066:	0c f0       	brlt	.+2      	; 0x206a <KEYPAD_4x4_adjustKeyNumber+0x84>
    2068:	3e c0       	rjmp	.+124    	; 0x20e6 <KEYPAD_4x4_adjustKeyNumber+0x100>
    206a:	37 c0       	rjmp	.+110    	; 0x20da <KEYPAD_4x4_adjustKeyNumber+0xf4>
    206c:	2b 81       	ldd	r18, Y+3	; 0x03
    206e:	3c 81       	ldd	r19, Y+4	; 0x04
    2070:	2c 30       	cpi	r18, 0x0C	; 12
    2072:	31 05       	cpc	r19, r1
    2074:	09 f4       	brne	.+2      	; 0x2078 <KEYPAD_4x4_adjustKeyNumber+0x92>
    2076:	46 c0       	rjmp	.+140    	; 0x2104 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    2078:	8b 81       	ldd	r24, Y+3	; 0x03
    207a:	9c 81       	ldd	r25, Y+4	; 0x04
    207c:	8d 30       	cpi	r24, 0x0D	; 13
    207e:	91 05       	cpc	r25, r1
    2080:	5c f4       	brge	.+22     	; 0x2098 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    2082:	2b 81       	ldd	r18, Y+3	; 0x03
    2084:	3c 81       	ldd	r19, Y+4	; 0x04
    2086:	2a 30       	cpi	r18, 0x0A	; 10
    2088:	31 05       	cpc	r19, r1
    208a:	b1 f1       	breq	.+108    	; 0x20f8 <KEYPAD_4x4_adjustKeyNumber+0x112>
    208c:	8b 81       	ldd	r24, Y+3	; 0x03
    208e:	9c 81       	ldd	r25, Y+4	; 0x04
    2090:	8b 30       	cpi	r24, 0x0B	; 11
    2092:	91 05       	cpc	r25, r1
    2094:	a4 f5       	brge	.+104    	; 0x20fe <KEYPAD_4x4_adjustKeyNumber+0x118>
    2096:	2d c0       	rjmp	.+90     	; 0x20f2 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    2098:	2b 81       	ldd	r18, Y+3	; 0x03
    209a:	3c 81       	ldd	r19, Y+4	; 0x04
    209c:	2e 30       	cpi	r18, 0x0E	; 14
    209e:	31 05       	cpc	r19, r1
    20a0:	b9 f1       	breq	.+110    	; 0x2110 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    20a2:	8b 81       	ldd	r24, Y+3	; 0x03
    20a4:	9c 81       	ldd	r25, Y+4	; 0x04
    20a6:	8e 30       	cpi	r24, 0x0E	; 14
    20a8:	91 05       	cpc	r25, r1
    20aa:	7c f1       	brlt	.+94     	; 0x210a <KEYPAD_4x4_adjustKeyNumber+0x124>
    20ac:	2b 81       	ldd	r18, Y+3	; 0x03
    20ae:	3c 81       	ldd	r19, Y+4	; 0x04
    20b0:	2f 30       	cpi	r18, 0x0F	; 15
    20b2:	31 05       	cpc	r19, r1
    20b4:	79 f1       	breq	.+94     	; 0x2114 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    20b6:	8b 81       	ldd	r24, Y+3	; 0x03
    20b8:	9c 81       	ldd	r25, Y+4	; 0x04
    20ba:	80 31       	cpi	r24, 0x10	; 16
    20bc:	91 05       	cpc	r25, r1
    20be:	69 f1       	breq	.+90     	; 0x211a <KEYPAD_4x4_adjustKeyNumber+0x134>
    20c0:	2f c0       	rjmp	.+94     	; 0x2120 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    20c2:	87 e0       	ldi	r24, 0x07	; 7
    20c4:	89 83       	std	Y+1, r24	; 0x01
    20c6:	2e c0       	rjmp	.+92     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    20c8:	88 e0       	ldi	r24, 0x08	; 8
    20ca:	89 83       	std	Y+1, r24	; 0x01
    20cc:	2b c0       	rjmp	.+86     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    20ce:	89 e0       	ldi	r24, 0x09	; 9
    20d0:	89 83       	std	Y+1, r24	; 0x01
    20d2:	28 c0       	rjmp	.+80     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    20d4:	85 e2       	ldi	r24, 0x25	; 37
    20d6:	89 83       	std	Y+1, r24	; 0x01
    20d8:	25 c0       	rjmp	.+74     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    20da:	84 e0       	ldi	r24, 0x04	; 4
    20dc:	89 83       	std	Y+1, r24	; 0x01
    20de:	22 c0       	rjmp	.+68     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    20e0:	85 e0       	ldi	r24, 0x05	; 5
    20e2:	89 83       	std	Y+1, r24	; 0x01
    20e4:	1f c0       	rjmp	.+62     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    20e6:	86 e0       	ldi	r24, 0x06	; 6
    20e8:	89 83       	std	Y+1, r24	; 0x01
    20ea:	1c c0       	rjmp	.+56     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    20ec:	8a e2       	ldi	r24, 0x2A	; 42
    20ee:	89 83       	std	Y+1, r24	; 0x01
    20f0:	19 c0       	rjmp	.+50     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    20f2:	81 e0       	ldi	r24, 0x01	; 1
    20f4:	89 83       	std	Y+1, r24	; 0x01
    20f6:	16 c0       	rjmp	.+44     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	89 83       	std	Y+1, r24	; 0x01
    20fc:	13 c0       	rjmp	.+38     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    20fe:	83 e0       	ldi	r24, 0x03	; 3
    2100:	89 83       	std	Y+1, r24	; 0x01
    2102:	10 c0       	rjmp	.+32     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    2104:	8d e2       	ldi	r24, 0x2D	; 45
    2106:	89 83       	std	Y+1, r24	; 0x01
    2108:	0d c0       	rjmp	.+26     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    210a:	8d e0       	ldi	r24, 0x0D	; 13
    210c:	89 83       	std	Y+1, r24	; 0x01
    210e:	0a c0       	rjmp	.+20     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    2110:	19 82       	std	Y+1, r1	; 0x01
    2112:	08 c0       	rjmp	.+16     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    2114:	8d e3       	ldi	r24, 0x3D	; 61
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	05 c0       	rjmp	.+10     	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    211a:	8b e2       	ldi	r24, 0x2B	; 43
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	02 c0       	rjmp	.+4      	; 0x2124 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    2120:	8a 81       	ldd	r24, Y+2	; 0x02
    2122:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    2124:	89 81       	ldd	r24, Y+1	; 0x01
} 
    2126:	0f 90       	pop	r0
    2128:	0f 90       	pop	r0
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	cf 91       	pop	r28
    2130:	df 91       	pop	r29
    2132:	08 95       	ret

00002134 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    2134:	df 93       	push	r29
    2136:	cf 93       	push	r28
    2138:	cd b7       	in	r28, 0x3d	; 61
    213a:	de b7       	in	r29, 0x3e	; 62
    213c:	2e 97       	sbiw	r28, 0x0e	; 14
    213e:	0f b6       	in	r0, 0x3f	; 63
    2140:	f8 94       	cli
    2142:	de bf       	out	0x3e, r29	; 62
    2144:	0f be       	out	0x3f, r0	; 63
    2146:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    2148:	81 e0       	ldi	r24, 0x01	; 1
    214a:	60 e0       	ldi	r22, 0x00	; 0
    214c:	41 e0       	ldi	r20, 0x01	; 1
    214e:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	61 e0       	ldi	r22, 0x01	; 1
    2156:	41 e0       	ldi	r20, 0x01	; 1
    2158:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPinDirection>
    215c:	80 e0       	ldi	r24, 0x00	; 0
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	a0 ea       	ldi	r26, 0xA0	; 160
    2162:	b1 e4       	ldi	r27, 0x41	; 65
    2164:	8b 87       	std	Y+11, r24	; 0x0b
    2166:	9c 87       	std	Y+12, r25	; 0x0c
    2168:	ad 87       	std	Y+13, r26	; 0x0d
    216a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    216c:	6b 85       	ldd	r22, Y+11	; 0x0b
    216e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2170:	8d 85       	ldd	r24, Y+13	; 0x0d
    2172:	9e 85       	ldd	r25, Y+14	; 0x0e
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	4a ef       	ldi	r20, 0xFA	; 250
    217a:	54 e4       	ldi	r21, 0x44	; 68
    217c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2180:	dc 01       	movw	r26, r24
    2182:	cb 01       	movw	r24, r22
    2184:	8f 83       	std	Y+7, r24	; 0x07
    2186:	98 87       	std	Y+8, r25	; 0x08
    2188:	a9 87       	std	Y+9, r26	; 0x09
    218a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    218c:	6f 81       	ldd	r22, Y+7	; 0x07
    218e:	78 85       	ldd	r23, Y+8	; 0x08
    2190:	89 85       	ldd	r24, Y+9	; 0x09
    2192:	9a 85       	ldd	r25, Y+10	; 0x0a
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e8       	ldi	r20, 0x80	; 128
    219a:	5f e3       	ldi	r21, 0x3F	; 63
    219c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21a0:	88 23       	and	r24, r24
    21a2:	2c f4       	brge	.+10     	; 0x21ae <LCD_init+0x7a>
		__ticks = 1;
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	90 e0       	ldi	r25, 0x00	; 0
    21a8:	9e 83       	std	Y+6, r25	; 0x06
    21aa:	8d 83       	std	Y+5, r24	; 0x05
    21ac:	3f c0       	rjmp	.+126    	; 0x222c <LCD_init+0xf8>
	else if (__tmp > 65535)
    21ae:	6f 81       	ldd	r22, Y+7	; 0x07
    21b0:	78 85       	ldd	r23, Y+8	; 0x08
    21b2:	89 85       	ldd	r24, Y+9	; 0x09
    21b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	3f ef       	ldi	r19, 0xFF	; 255
    21ba:	4f e7       	ldi	r20, 0x7F	; 127
    21bc:	57 e4       	ldi	r21, 0x47	; 71
    21be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	4c f5       	brge	.+82     	; 0x2218 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    21cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ce:	20 e0       	ldi	r18, 0x00	; 0
    21d0:	30 e0       	ldi	r19, 0x00	; 0
    21d2:	40 e2       	ldi	r20, 0x20	; 32
    21d4:	51 e4       	ldi	r21, 0x41	; 65
    21d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21da:	dc 01       	movw	r26, r24
    21dc:	cb 01       	movw	r24, r22
    21de:	bc 01       	movw	r22, r24
    21e0:	cd 01       	movw	r24, r26
    21e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e6:	dc 01       	movw	r26, r24
    21e8:	cb 01       	movw	r24, r22
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
    21ee:	0f c0       	rjmp	.+30     	; 0x220e <LCD_init+0xda>
    21f0:	88 ec       	ldi	r24, 0xC8	; 200
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	9c 83       	std	Y+4, r25	; 0x04
    21f6:	8b 83       	std	Y+3, r24	; 0x03
    21f8:	8b 81       	ldd	r24, Y+3	; 0x03
    21fa:	9c 81       	ldd	r25, Y+4	; 0x04
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <LCD_init+0xc8>
    2200:	9c 83       	std	Y+4, r25	; 0x04
    2202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2204:	8d 81       	ldd	r24, Y+5	; 0x05
    2206:	9e 81       	ldd	r25, Y+6	; 0x06
    2208:	01 97       	sbiw	r24, 0x01	; 1
    220a:	9e 83       	std	Y+6, r25	; 0x06
    220c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    220e:	8d 81       	ldd	r24, Y+5	; 0x05
    2210:	9e 81       	ldd	r25, Y+6	; 0x06
    2212:	00 97       	sbiw	r24, 0x00	; 0
    2214:	69 f7       	brne	.-38     	; 0x21f0 <LCD_init+0xbc>
    2216:	14 c0       	rjmp	.+40     	; 0x2240 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2218:	6f 81       	ldd	r22, Y+7	; 0x07
    221a:	78 85       	ldd	r23, Y+8	; 0x08
    221c:	89 85       	ldd	r24, Y+9	; 0x09
    221e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9e 83       	std	Y+6, r25	; 0x06
    222a:	8d 83       	std	Y+5, r24	; 0x05
    222c:	8d 81       	ldd	r24, Y+5	; 0x05
    222e:	9e 81       	ldd	r25, Y+6	; 0x06
    2230:	9a 83       	std	Y+2, r25	; 0x02
    2232:	89 83       	std	Y+1, r24	; 0x01
    2234:	89 81       	ldd	r24, Y+1	; 0x01
    2236:	9a 81       	ldd	r25, Y+2	; 0x02
    2238:	01 97       	sbiw	r24, 0x01	; 1
    223a:	f1 f7       	brne	.-4      	; 0x2238 <LCD_init+0x104>
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    2240:	80 e0       	ldi	r24, 0x00	; 0
    2242:	6f ef       	ldi	r22, 0xFF	; 255
    2244:	0e 94 42 0e 	call	0x1c84	; 0x1c84 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    2248:	88 e3       	ldi	r24, 0x38	; 56
    224a:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    224e:	8c e0       	ldi	r24, 0x0C	; 12
    2250:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    2254:	81 e0       	ldi	r24, 0x01	; 1
    2256:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_sendCommand>
}
    225a:	2e 96       	adiw	r28, 0x0e	; 14
    225c:	0f b6       	in	r0, 0x3f	; 63
    225e:	f8 94       	cli
    2260:	de bf       	out	0x3e, r29	; 62
    2262:	0f be       	out	0x3f, r0	; 63
    2264:	cd bf       	out	0x3d, r28	; 61
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	e9 97       	sbiw	r28, 0x39	; 57
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    2282:	81 e0       	ldi	r24, 0x01	; 1
    2284:	60 e0       	ldi	r22, 0x00	; 0
    2286:	40 e0       	ldi	r20, 0x00	; 0
    2288:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    228c:	80 e0       	ldi	r24, 0x00	; 0
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	a0 e8       	ldi	r26, 0x80	; 128
    2292:	bf e3       	ldi	r27, 0x3F	; 63
    2294:	8d ab       	std	Y+53, r24	; 0x35
    2296:	9e ab       	std	Y+54, r25	; 0x36
    2298:	af ab       	std	Y+55, r26	; 0x37
    229a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229c:	6d a9       	ldd	r22, Y+53	; 0x35
    229e:	7e a9       	ldd	r23, Y+54	; 0x36
    22a0:	8f a9       	ldd	r24, Y+55	; 0x37
    22a2:	98 ad       	ldd	r25, Y+56	; 0x38
    22a4:	20 e0       	ldi	r18, 0x00	; 0
    22a6:	30 e0       	ldi	r19, 0x00	; 0
    22a8:	4a ef       	ldi	r20, 0xFA	; 250
    22aa:	54 e4       	ldi	r21, 0x44	; 68
    22ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	89 ab       	std	Y+49, r24	; 0x31
    22b6:	9a ab       	std	Y+50, r25	; 0x32
    22b8:	ab ab       	std	Y+51, r26	; 0x33
    22ba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    22bc:	69 a9       	ldd	r22, Y+49	; 0x31
    22be:	7a a9       	ldd	r23, Y+50	; 0x32
    22c0:	8b a9       	ldd	r24, Y+51	; 0x33
    22c2:	9c a9       	ldd	r25, Y+52	; 0x34
    22c4:	20 e0       	ldi	r18, 0x00	; 0
    22c6:	30 e0       	ldi	r19, 0x00	; 0
    22c8:	40 e8       	ldi	r20, 0x80	; 128
    22ca:	5f e3       	ldi	r21, 0x3F	; 63
    22cc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22d0:	88 23       	and	r24, r24
    22d2:	2c f4       	brge	.+10     	; 0x22de <LCD_sendCommand+0x72>
		__ticks = 1;
    22d4:	81 e0       	ldi	r24, 0x01	; 1
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	98 ab       	std	Y+48, r25	; 0x30
    22da:	8f a7       	std	Y+47, r24	; 0x2f
    22dc:	3f c0       	rjmp	.+126    	; 0x235c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    22de:	69 a9       	ldd	r22, Y+49	; 0x31
    22e0:	7a a9       	ldd	r23, Y+50	; 0x32
    22e2:	8b a9       	ldd	r24, Y+51	; 0x33
    22e4:	9c a9       	ldd	r25, Y+52	; 0x34
    22e6:	20 e0       	ldi	r18, 0x00	; 0
    22e8:	3f ef       	ldi	r19, 0xFF	; 255
    22ea:	4f e7       	ldi	r20, 0x7F	; 127
    22ec:	57 e4       	ldi	r21, 0x47	; 71
    22ee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22f2:	18 16       	cp	r1, r24
    22f4:	4c f5       	brge	.+82     	; 0x2348 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f6:	6d a9       	ldd	r22, Y+53	; 0x35
    22f8:	7e a9       	ldd	r23, Y+54	; 0x36
    22fa:	8f a9       	ldd	r24, Y+55	; 0x37
    22fc:	98 ad       	ldd	r25, Y+56	; 0x38
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	40 e2       	ldi	r20, 0x20	; 32
    2304:	51 e4       	ldi	r21, 0x41	; 65
    2306:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230a:	dc 01       	movw	r26, r24
    230c:	cb 01       	movw	r24, r22
    230e:	bc 01       	movw	r22, r24
    2310:	cd 01       	movw	r24, r26
    2312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	98 ab       	std	Y+48, r25	; 0x30
    231c:	8f a7       	std	Y+47, r24	; 0x2f
    231e:	0f c0       	rjmp	.+30     	; 0x233e <LCD_sendCommand+0xd2>
    2320:	88 ec       	ldi	r24, 0xC8	; 200
    2322:	90 e0       	ldi	r25, 0x00	; 0
    2324:	9e a7       	std	Y+46, r25	; 0x2e
    2326:	8d a7       	std	Y+45, r24	; 0x2d
    2328:	8d a5       	ldd	r24, Y+45	; 0x2d
    232a:	9e a5       	ldd	r25, Y+46	; 0x2e
    232c:	01 97       	sbiw	r24, 0x01	; 1
    232e:	f1 f7       	brne	.-4      	; 0x232c <LCD_sendCommand+0xc0>
    2330:	9e a7       	std	Y+46, r25	; 0x2e
    2332:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2334:	8f a5       	ldd	r24, Y+47	; 0x2f
    2336:	98 a9       	ldd	r25, Y+48	; 0x30
    2338:	01 97       	sbiw	r24, 0x01	; 1
    233a:	98 ab       	std	Y+48, r25	; 0x30
    233c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2340:	98 a9       	ldd	r25, Y+48	; 0x30
    2342:	00 97       	sbiw	r24, 0x00	; 0
    2344:	69 f7       	brne	.-38     	; 0x2320 <LCD_sendCommand+0xb4>
    2346:	14 c0       	rjmp	.+40     	; 0x2370 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2348:	69 a9       	ldd	r22, Y+49	; 0x31
    234a:	7a a9       	ldd	r23, Y+50	; 0x32
    234c:	8b a9       	ldd	r24, Y+51	; 0x33
    234e:	9c a9       	ldd	r25, Y+52	; 0x34
    2350:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2354:	dc 01       	movw	r26, r24
    2356:	cb 01       	movw	r24, r22
    2358:	98 ab       	std	Y+48, r25	; 0x30
    235a:	8f a7       	std	Y+47, r24	; 0x2f
    235c:	8f a5       	ldd	r24, Y+47	; 0x2f
    235e:	98 a9       	ldd	r25, Y+48	; 0x30
    2360:	9c a7       	std	Y+44, r25	; 0x2c
    2362:	8b a7       	std	Y+43, r24	; 0x2b
    2364:	8b a5       	ldd	r24, Y+43	; 0x2b
    2366:	9c a5       	ldd	r25, Y+44	; 0x2c
    2368:	01 97       	sbiw	r24, 0x01	; 1
    236a:	f1 f7       	brne	.-4      	; 0x2368 <LCD_sendCommand+0xfc>
    236c:	9c a7       	std	Y+44, r25	; 0x2c
    236e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	61 e0       	ldi	r22, 0x01	; 1
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    237a:	80 e0       	ldi	r24, 0x00	; 0
    237c:	90 e0       	ldi	r25, 0x00	; 0
    237e:	a0 e8       	ldi	r26, 0x80	; 128
    2380:	bf e3       	ldi	r27, 0x3F	; 63
    2382:	8f a3       	std	Y+39, r24	; 0x27
    2384:	98 a7       	std	Y+40, r25	; 0x28
    2386:	a9 a7       	std	Y+41, r26	; 0x29
    2388:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238a:	6f a1       	ldd	r22, Y+39	; 0x27
    238c:	78 a5       	ldd	r23, Y+40	; 0x28
    238e:	89 a5       	ldd	r24, Y+41	; 0x29
    2390:	9a a5       	ldd	r25, Y+42	; 0x2a
    2392:	20 e0       	ldi	r18, 0x00	; 0
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	4a ef       	ldi	r20, 0xFA	; 250
    2398:	54 e4       	ldi	r21, 0x44	; 68
    239a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    239e:	dc 01       	movw	r26, r24
    23a0:	cb 01       	movw	r24, r22
    23a2:	8b a3       	std	Y+35, r24	; 0x23
    23a4:	9c a3       	std	Y+36, r25	; 0x24
    23a6:	ad a3       	std	Y+37, r26	; 0x25
    23a8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23aa:	6b a1       	ldd	r22, Y+35	; 0x23
    23ac:	7c a1       	ldd	r23, Y+36	; 0x24
    23ae:	8d a1       	ldd	r24, Y+37	; 0x25
    23b0:	9e a1       	ldd	r25, Y+38	; 0x26
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	30 e0       	ldi	r19, 0x00	; 0
    23b6:	40 e8       	ldi	r20, 0x80	; 128
    23b8:	5f e3       	ldi	r21, 0x3F	; 63
    23ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23be:	88 23       	and	r24, r24
    23c0:	2c f4       	brge	.+10     	; 0x23cc <LCD_sendCommand+0x160>
		__ticks = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	90 e0       	ldi	r25, 0x00	; 0
    23c6:	9a a3       	std	Y+34, r25	; 0x22
    23c8:	89 a3       	std	Y+33, r24	; 0x21
    23ca:	3f c0       	rjmp	.+126    	; 0x244a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    23cc:	6b a1       	ldd	r22, Y+35	; 0x23
    23ce:	7c a1       	ldd	r23, Y+36	; 0x24
    23d0:	8d a1       	ldd	r24, Y+37	; 0x25
    23d2:	9e a1       	ldd	r25, Y+38	; 0x26
    23d4:	20 e0       	ldi	r18, 0x00	; 0
    23d6:	3f ef       	ldi	r19, 0xFF	; 255
    23d8:	4f e7       	ldi	r20, 0x7F	; 127
    23da:	57 e4       	ldi	r21, 0x47	; 71
    23dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23e0:	18 16       	cp	r1, r24
    23e2:	4c f5       	brge	.+82     	; 0x2436 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23e4:	6f a1       	ldd	r22, Y+39	; 0x27
    23e6:	78 a5       	ldd	r23, Y+40	; 0x28
    23e8:	89 a5       	ldd	r24, Y+41	; 0x29
    23ea:	9a a5       	ldd	r25, Y+42	; 0x2a
    23ec:	20 e0       	ldi	r18, 0x00	; 0
    23ee:	30 e0       	ldi	r19, 0x00	; 0
    23f0:	40 e2       	ldi	r20, 0x20	; 32
    23f2:	51 e4       	ldi	r21, 0x41	; 65
    23f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f8:	dc 01       	movw	r26, r24
    23fa:	cb 01       	movw	r24, r22
    23fc:	bc 01       	movw	r22, r24
    23fe:	cd 01       	movw	r24, r26
    2400:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2404:	dc 01       	movw	r26, r24
    2406:	cb 01       	movw	r24, r22
    2408:	9a a3       	std	Y+34, r25	; 0x22
    240a:	89 a3       	std	Y+33, r24	; 0x21
    240c:	0f c0       	rjmp	.+30     	; 0x242c <LCD_sendCommand+0x1c0>
    240e:	88 ec       	ldi	r24, 0xC8	; 200
    2410:	90 e0       	ldi	r25, 0x00	; 0
    2412:	98 a3       	std	Y+32, r25	; 0x20
    2414:	8f 8f       	std	Y+31, r24	; 0x1f
    2416:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2418:	98 a1       	ldd	r25, Y+32	; 0x20
    241a:	01 97       	sbiw	r24, 0x01	; 1
    241c:	f1 f7       	brne	.-4      	; 0x241a <LCD_sendCommand+0x1ae>
    241e:	98 a3       	std	Y+32, r25	; 0x20
    2420:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2422:	89 a1       	ldd	r24, Y+33	; 0x21
    2424:	9a a1       	ldd	r25, Y+34	; 0x22
    2426:	01 97       	sbiw	r24, 0x01	; 1
    2428:	9a a3       	std	Y+34, r25	; 0x22
    242a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    242c:	89 a1       	ldd	r24, Y+33	; 0x21
    242e:	9a a1       	ldd	r25, Y+34	; 0x22
    2430:	00 97       	sbiw	r24, 0x00	; 0
    2432:	69 f7       	brne	.-38     	; 0x240e <LCD_sendCommand+0x1a2>
    2434:	14 c0       	rjmp	.+40     	; 0x245e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2436:	6b a1       	ldd	r22, Y+35	; 0x23
    2438:	7c a1       	ldd	r23, Y+36	; 0x24
    243a:	8d a1       	ldd	r24, Y+37	; 0x25
    243c:	9e a1       	ldd	r25, Y+38	; 0x26
    243e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2442:	dc 01       	movw	r26, r24
    2444:	cb 01       	movw	r24, r22
    2446:	9a a3       	std	Y+34, r25	; 0x22
    2448:	89 a3       	std	Y+33, r24	; 0x21
    244a:	89 a1       	ldd	r24, Y+33	; 0x21
    244c:	9a a1       	ldd	r25, Y+34	; 0x22
    244e:	9e 8f       	std	Y+30, r25	; 0x1e
    2450:	8d 8f       	std	Y+29, r24	; 0x1d
    2452:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2454:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2456:	01 97       	sbiw	r24, 0x01	; 1
    2458:	f1 f7       	brne	.-4      	; 0x2456 <LCD_sendCommand+0x1ea>
    245a:	9e 8f       	std	Y+30, r25	; 0x1e
    245c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	69 ad       	ldd	r22, Y+57	; 0x39
    2462:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePort>
    2466:	80 e0       	ldi	r24, 0x00	; 0
    2468:	90 e0       	ldi	r25, 0x00	; 0
    246a:	a0 e8       	ldi	r26, 0x80	; 128
    246c:	bf e3       	ldi	r27, 0x3F	; 63
    246e:	89 8f       	std	Y+25, r24	; 0x19
    2470:	9a 8f       	std	Y+26, r25	; 0x1a
    2472:	ab 8f       	std	Y+27, r26	; 0x1b
    2474:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2476:	69 8d       	ldd	r22, Y+25	; 0x19
    2478:	7a 8d       	ldd	r23, Y+26	; 0x1a
    247a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247e:	20 e0       	ldi	r18, 0x00	; 0
    2480:	30 e0       	ldi	r19, 0x00	; 0
    2482:	4a ef       	ldi	r20, 0xFA	; 250
    2484:	54 e4       	ldi	r21, 0x44	; 68
    2486:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    248a:	dc 01       	movw	r26, r24
    248c:	cb 01       	movw	r24, r22
    248e:	8d 8b       	std	Y+21, r24	; 0x15
    2490:	9e 8b       	std	Y+22, r25	; 0x16
    2492:	af 8b       	std	Y+23, r26	; 0x17
    2494:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2496:	6d 89       	ldd	r22, Y+21	; 0x15
    2498:	7e 89       	ldd	r23, Y+22	; 0x16
    249a:	8f 89       	ldd	r24, Y+23	; 0x17
    249c:	98 8d       	ldd	r25, Y+24	; 0x18
    249e:	20 e0       	ldi	r18, 0x00	; 0
    24a0:	30 e0       	ldi	r19, 0x00	; 0
    24a2:	40 e8       	ldi	r20, 0x80	; 128
    24a4:	5f e3       	ldi	r21, 0x3F	; 63
    24a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24aa:	88 23       	and	r24, r24
    24ac:	2c f4       	brge	.+10     	; 0x24b8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    24ae:	81 e0       	ldi	r24, 0x01	; 1
    24b0:	90 e0       	ldi	r25, 0x00	; 0
    24b2:	9c 8b       	std	Y+20, r25	; 0x14
    24b4:	8b 8b       	std	Y+19, r24	; 0x13
    24b6:	3f c0       	rjmp	.+126    	; 0x2536 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    24b8:	6d 89       	ldd	r22, Y+21	; 0x15
    24ba:	7e 89       	ldd	r23, Y+22	; 0x16
    24bc:	8f 89       	ldd	r24, Y+23	; 0x17
    24be:	98 8d       	ldd	r25, Y+24	; 0x18
    24c0:	20 e0       	ldi	r18, 0x00	; 0
    24c2:	3f ef       	ldi	r19, 0xFF	; 255
    24c4:	4f e7       	ldi	r20, 0x7F	; 127
    24c6:	57 e4       	ldi	r21, 0x47	; 71
    24c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24cc:	18 16       	cp	r1, r24
    24ce:	4c f5       	brge	.+82     	; 0x2522 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24d0:	69 8d       	ldd	r22, Y+25	; 0x19
    24d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	40 e2       	ldi	r20, 0x20	; 32
    24de:	51 e4       	ldi	r21, 0x41	; 65
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	bc 01       	movw	r22, r24
    24ea:	cd 01       	movw	r24, r26
    24ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24f0:	dc 01       	movw	r26, r24
    24f2:	cb 01       	movw	r24, r22
    24f4:	9c 8b       	std	Y+20, r25	; 0x14
    24f6:	8b 8b       	std	Y+19, r24	; 0x13
    24f8:	0f c0       	rjmp	.+30     	; 0x2518 <LCD_sendCommand+0x2ac>
    24fa:	88 ec       	ldi	r24, 0xC8	; 200
    24fc:	90 e0       	ldi	r25, 0x00	; 0
    24fe:	9a 8b       	std	Y+18, r25	; 0x12
    2500:	89 8b       	std	Y+17, r24	; 0x11
    2502:	89 89       	ldd	r24, Y+17	; 0x11
    2504:	9a 89       	ldd	r25, Y+18	; 0x12
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	f1 f7       	brne	.-4      	; 0x2506 <LCD_sendCommand+0x29a>
    250a:	9a 8b       	std	Y+18, r25	; 0x12
    250c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250e:	8b 89       	ldd	r24, Y+19	; 0x13
    2510:	9c 89       	ldd	r25, Y+20	; 0x14
    2512:	01 97       	sbiw	r24, 0x01	; 1
    2514:	9c 8b       	std	Y+20, r25	; 0x14
    2516:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2518:	8b 89       	ldd	r24, Y+19	; 0x13
    251a:	9c 89       	ldd	r25, Y+20	; 0x14
    251c:	00 97       	sbiw	r24, 0x00	; 0
    251e:	69 f7       	brne	.-38     	; 0x24fa <LCD_sendCommand+0x28e>
    2520:	14 c0       	rjmp	.+40     	; 0x254a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2522:	6d 89       	ldd	r22, Y+21	; 0x15
    2524:	7e 89       	ldd	r23, Y+22	; 0x16
    2526:	8f 89       	ldd	r24, Y+23	; 0x17
    2528:	98 8d       	ldd	r25, Y+24	; 0x18
    252a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252e:	dc 01       	movw	r26, r24
    2530:	cb 01       	movw	r24, r22
    2532:	9c 8b       	std	Y+20, r25	; 0x14
    2534:	8b 8b       	std	Y+19, r24	; 0x13
    2536:	8b 89       	ldd	r24, Y+19	; 0x13
    2538:	9c 89       	ldd	r25, Y+20	; 0x14
    253a:	98 8b       	std	Y+16, r25	; 0x10
    253c:	8f 87       	std	Y+15, r24	; 0x0f
    253e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2540:	98 89       	ldd	r25, Y+16	; 0x10
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	f1 f7       	brne	.-4      	; 0x2542 <LCD_sendCommand+0x2d6>
    2546:	98 8b       	std	Y+16, r25	; 0x10
    2548:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	61 e0       	ldi	r22, 0x01	; 1
    254e:	40 e0       	ldi	r20, 0x00	; 0
    2550:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	90 e0       	ldi	r25, 0x00	; 0
    2558:	a0 e8       	ldi	r26, 0x80	; 128
    255a:	bf e3       	ldi	r27, 0x3F	; 63
    255c:	8b 87       	std	Y+11, r24	; 0x0b
    255e:	9c 87       	std	Y+12, r25	; 0x0c
    2560:	ad 87       	std	Y+13, r26	; 0x0d
    2562:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2564:	6b 85       	ldd	r22, Y+11	; 0x0b
    2566:	7c 85       	ldd	r23, Y+12	; 0x0c
    2568:	8d 85       	ldd	r24, Y+13	; 0x0d
    256a:	9e 85       	ldd	r25, Y+14	; 0x0e
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4a ef       	ldi	r20, 0xFA	; 250
    2572:	54 e4       	ldi	r21, 0x44	; 68
    2574:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2578:	dc 01       	movw	r26, r24
    257a:	cb 01       	movw	r24, r22
    257c:	8f 83       	std	Y+7, r24	; 0x07
    257e:	98 87       	std	Y+8, r25	; 0x08
    2580:	a9 87       	std	Y+9, r26	; 0x09
    2582:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2584:	6f 81       	ldd	r22, Y+7	; 0x07
    2586:	78 85       	ldd	r23, Y+8	; 0x08
    2588:	89 85       	ldd	r24, Y+9	; 0x09
    258a:	9a 85       	ldd	r25, Y+10	; 0x0a
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	40 e8       	ldi	r20, 0x80	; 128
    2592:	5f e3       	ldi	r21, 0x3F	; 63
    2594:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2598:	88 23       	and	r24, r24
    259a:	2c f4       	brge	.+10     	; 0x25a6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	9e 83       	std	Y+6, r25	; 0x06
    25a2:	8d 83       	std	Y+5, r24	; 0x05
    25a4:	3f c0       	rjmp	.+126    	; 0x2624 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    25a6:	6f 81       	ldd	r22, Y+7	; 0x07
    25a8:	78 85       	ldd	r23, Y+8	; 0x08
    25aa:	89 85       	ldd	r24, Y+9	; 0x09
    25ac:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ae:	20 e0       	ldi	r18, 0x00	; 0
    25b0:	3f ef       	ldi	r19, 0xFF	; 255
    25b2:	4f e7       	ldi	r20, 0x7F	; 127
    25b4:	57 e4       	ldi	r21, 0x47	; 71
    25b6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ba:	18 16       	cp	r1, r24
    25bc:	4c f5       	brge	.+82     	; 0x2610 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25be:	6b 85       	ldd	r22, Y+11	; 0x0b
    25c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e2       	ldi	r20, 0x20	; 32
    25cc:	51 e4       	ldi	r21, 0x41	; 65
    25ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	bc 01       	movw	r22, r24
    25d8:	cd 01       	movw	r24, r26
    25da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22
    25e2:	9e 83       	std	Y+6, r25	; 0x06
    25e4:	8d 83       	std	Y+5, r24	; 0x05
    25e6:	0f c0       	rjmp	.+30     	; 0x2606 <LCD_sendCommand+0x39a>
    25e8:	88 ec       	ldi	r24, 0xC8	; 200
    25ea:	90 e0       	ldi	r25, 0x00	; 0
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
    25f0:	8b 81       	ldd	r24, Y+3	; 0x03
    25f2:	9c 81       	ldd	r25, Y+4	; 0x04
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	f1 f7       	brne	.-4      	; 0x25f4 <LCD_sendCommand+0x388>
    25f8:	9c 83       	std	Y+4, r25	; 0x04
    25fa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fc:	8d 81       	ldd	r24, Y+5	; 0x05
    25fe:	9e 81       	ldd	r25, Y+6	; 0x06
    2600:	01 97       	sbiw	r24, 0x01	; 1
    2602:	9e 83       	std	Y+6, r25	; 0x06
    2604:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2606:	8d 81       	ldd	r24, Y+5	; 0x05
    2608:	9e 81       	ldd	r25, Y+6	; 0x06
    260a:	00 97       	sbiw	r24, 0x00	; 0
    260c:	69 f7       	brne	.-38     	; 0x25e8 <LCD_sendCommand+0x37c>
    260e:	14 c0       	rjmp	.+40     	; 0x2638 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2610:	6f 81       	ldd	r22, Y+7	; 0x07
    2612:	78 85       	ldd	r23, Y+8	; 0x08
    2614:	89 85       	ldd	r24, Y+9	; 0x09
    2616:	9a 85       	ldd	r25, Y+10	; 0x0a
    2618:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	9e 83       	std	Y+6, r25	; 0x06
    2622:	8d 83       	std	Y+5, r24	; 0x05
    2624:	8d 81       	ldd	r24, Y+5	; 0x05
    2626:	9e 81       	ldd	r25, Y+6	; 0x06
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	89 81       	ldd	r24, Y+1	; 0x01
    262e:	9a 81       	ldd	r25, Y+2	; 0x02
    2630:	01 97       	sbiw	r24, 0x01	; 1
    2632:	f1 f7       	brne	.-4      	; 0x2630 <LCD_sendCommand+0x3c4>
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2638:	e9 96       	adiw	r28, 0x39	; 57
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	08 95       	ret

0000264a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    264a:	df 93       	push	r29
    264c:	cf 93       	push	r28
    264e:	cd b7       	in	r28, 0x3d	; 61
    2650:	de b7       	in	r29, 0x3e	; 62
    2652:	e9 97       	sbiw	r28, 0x39	; 57
    2654:	0f b6       	in	r0, 0x3f	; 63
    2656:	f8 94       	cli
    2658:	de bf       	out	0x3e, r29	; 62
    265a:	0f be       	out	0x3f, r0	; 63
    265c:	cd bf       	out	0x3d, r28	; 61
    265e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	60 e0       	ldi	r22, 0x00	; 0
    2664:	41 e0       	ldi	r20, 0x01	; 1
    2666:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    266a:	80 e0       	ldi	r24, 0x00	; 0
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	a0 e8       	ldi	r26, 0x80	; 128
    2670:	bf e3       	ldi	r27, 0x3F	; 63
    2672:	8d ab       	std	Y+53, r24	; 0x35
    2674:	9e ab       	std	Y+54, r25	; 0x36
    2676:	af ab       	std	Y+55, r26	; 0x37
    2678:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6d a9       	ldd	r22, Y+53	; 0x35
    267c:	7e a9       	ldd	r23, Y+54	; 0x36
    267e:	8f a9       	ldd	r24, Y+55	; 0x37
    2680:	98 ad       	ldd	r25, Y+56	; 0x38
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	89 ab       	std	Y+49, r24	; 0x31
    2694:	9a ab       	std	Y+50, r25	; 0x32
    2696:	ab ab       	std	Y+51, r26	; 0x33
    2698:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    269a:	69 a9       	ldd	r22, Y+49	; 0x31
    269c:	7a a9       	ldd	r23, Y+50	; 0x32
    269e:	8b a9       	ldd	r24, Y+51	; 0x33
    26a0:	9c a9       	ldd	r25, Y+52	; 0x34
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <LCD_displayCharacter+0x72>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	98 ab       	std	Y+48, r25	; 0x30
    26b8:	8f a7       	std	Y+47, r24	; 0x2f
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    26bc:	69 a9       	ldd	r22, Y+49	; 0x31
    26be:	7a a9       	ldd	r23, Y+50	; 0x32
    26c0:	8b a9       	ldd	r24, Y+51	; 0x33
    26c2:	9c a9       	ldd	r25, Y+52	; 0x34
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6d a9       	ldd	r22, Y+53	; 0x35
    26d6:	7e a9       	ldd	r23, Y+54	; 0x36
    26d8:	8f a9       	ldd	r24, Y+55	; 0x37
    26da:	98 ad       	ldd	r25, Y+56	; 0x38
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	98 ab       	std	Y+48, r25	; 0x30
    26fa:	8f a7       	std	Y+47, r24	; 0x2f
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <LCD_displayCharacter+0xd2>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9e a7       	std	Y+46, r25	; 0x2e
    2704:	8d a7       	std	Y+45, r24	; 0x2d
    2706:	8d a5       	ldd	r24, Y+45	; 0x2d
    2708:	9e a5       	ldd	r25, Y+46	; 0x2e
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <LCD_displayCharacter+0xc0>
    270e:	9e a7       	std	Y+46, r25	; 0x2e
    2710:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8f a5       	ldd	r24, Y+47	; 0x2f
    2714:	98 a9       	ldd	r25, Y+48	; 0x30
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	98 ab       	std	Y+48, r25	; 0x30
    271a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8f a5       	ldd	r24, Y+47	; 0x2f
    271e:	98 a9       	ldd	r25, Y+48	; 0x30
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <LCD_displayCharacter+0xb4>
    2724:	14 c0       	rjmp	.+40     	; 0x274e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	69 a9       	ldd	r22, Y+49	; 0x31
    2728:	7a a9       	ldd	r23, Y+50	; 0x32
    272a:	8b a9       	ldd	r24, Y+51	; 0x33
    272c:	9c a9       	ldd	r25, Y+52	; 0x34
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	98 ab       	std	Y+48, r25	; 0x30
    2738:	8f a7       	std	Y+47, r24	; 0x2f
    273a:	8f a5       	ldd	r24, Y+47	; 0x2f
    273c:	98 a9       	ldd	r25, Y+48	; 0x30
    273e:	9c a7       	std	Y+44, r25	; 0x2c
    2740:	8b a7       	std	Y+43, r24	; 0x2b
    2742:	8b a5       	ldd	r24, Y+43	; 0x2b
    2744:	9c a5       	ldd	r25, Y+44	; 0x2c
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <LCD_displayCharacter+0xfc>
    274a:	9c a7       	std	Y+44, r25	; 0x2c
    274c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    274e:	81 e0       	ldi	r24, 0x01	; 1
    2750:	61 e0       	ldi	r22, 0x01	; 1
    2752:	41 e0       	ldi	r20, 0x01	; 1
    2754:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	a0 e8       	ldi	r26, 0x80	; 128
    275e:	bf e3       	ldi	r27, 0x3F	; 63
    2760:	8f a3       	std	Y+39, r24	; 0x27
    2762:	98 a7       	std	Y+40, r25	; 0x28
    2764:	a9 a7       	std	Y+41, r26	; 0x29
    2766:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2768:	6f a1       	ldd	r22, Y+39	; 0x27
    276a:	78 a5       	ldd	r23, Y+40	; 0x28
    276c:	89 a5       	ldd	r24, Y+41	; 0x29
    276e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2770:	20 e0       	ldi	r18, 0x00	; 0
    2772:	30 e0       	ldi	r19, 0x00	; 0
    2774:	4a ef       	ldi	r20, 0xFA	; 250
    2776:	54 e4       	ldi	r21, 0x44	; 68
    2778:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    277c:	dc 01       	movw	r26, r24
    277e:	cb 01       	movw	r24, r22
    2780:	8b a3       	std	Y+35, r24	; 0x23
    2782:	9c a3       	std	Y+36, r25	; 0x24
    2784:	ad a3       	std	Y+37, r26	; 0x25
    2786:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2788:	6b a1       	ldd	r22, Y+35	; 0x23
    278a:	7c a1       	ldd	r23, Y+36	; 0x24
    278c:	8d a1       	ldd	r24, Y+37	; 0x25
    278e:	9e a1       	ldd	r25, Y+38	; 0x26
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	30 e0       	ldi	r19, 0x00	; 0
    2794:	40 e8       	ldi	r20, 0x80	; 128
    2796:	5f e3       	ldi	r21, 0x3F	; 63
    2798:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    279c:	88 23       	and	r24, r24
    279e:	2c f4       	brge	.+10     	; 0x27aa <LCD_displayCharacter+0x160>
		__ticks = 1;
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	90 e0       	ldi	r25, 0x00	; 0
    27a4:	9a a3       	std	Y+34, r25	; 0x22
    27a6:	89 a3       	std	Y+33, r24	; 0x21
    27a8:	3f c0       	rjmp	.+126    	; 0x2828 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    27aa:	6b a1       	ldd	r22, Y+35	; 0x23
    27ac:	7c a1       	ldd	r23, Y+36	; 0x24
    27ae:	8d a1       	ldd	r24, Y+37	; 0x25
    27b0:	9e a1       	ldd	r25, Y+38	; 0x26
    27b2:	20 e0       	ldi	r18, 0x00	; 0
    27b4:	3f ef       	ldi	r19, 0xFF	; 255
    27b6:	4f e7       	ldi	r20, 0x7F	; 127
    27b8:	57 e4       	ldi	r21, 0x47	; 71
    27ba:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27be:	18 16       	cp	r1, r24
    27c0:	4c f5       	brge	.+82     	; 0x2814 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27c2:	6f a1       	ldd	r22, Y+39	; 0x27
    27c4:	78 a5       	ldd	r23, Y+40	; 0x28
    27c6:	89 a5       	ldd	r24, Y+41	; 0x29
    27c8:	9a a5       	ldd	r25, Y+42	; 0x2a
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9a a3       	std	Y+34, r25	; 0x22
    27e8:	89 a3       	std	Y+33, r24	; 0x21
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <LCD_displayCharacter+0x1c0>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	98 a3       	std	Y+32, r25	; 0x20
    27f2:	8f 8f       	std	Y+31, r24	; 0x1f
    27f4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    27f6:	98 a1       	ldd	r25, Y+32	; 0x20
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <LCD_displayCharacter+0x1ae>
    27fc:	98 a3       	std	Y+32, r25	; 0x20
    27fe:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	89 a1       	ldd	r24, Y+33	; 0x21
    2802:	9a a1       	ldd	r25, Y+34	; 0x22
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9a a3       	std	Y+34, r25	; 0x22
    2808:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	89 a1       	ldd	r24, Y+33	; 0x21
    280c:	9a a1       	ldd	r25, Y+34	; 0x22
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <LCD_displayCharacter+0x1a2>
    2812:	14 c0       	rjmp	.+40     	; 0x283c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	6b a1       	ldd	r22, Y+35	; 0x23
    2816:	7c a1       	ldd	r23, Y+36	; 0x24
    2818:	8d a1       	ldd	r24, Y+37	; 0x25
    281a:	9e a1       	ldd	r25, Y+38	; 0x26
    281c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	9a a3       	std	Y+34, r25	; 0x22
    2826:	89 a3       	std	Y+33, r24	; 0x21
    2828:	89 a1       	ldd	r24, Y+33	; 0x21
    282a:	9a a1       	ldd	r25, Y+34	; 0x22
    282c:	9e 8f       	std	Y+30, r25	; 0x1e
    282e:	8d 8f       	std	Y+29, r24	; 0x1d
    2830:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2832:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2834:	01 97       	sbiw	r24, 0x01	; 1
    2836:	f1 f7       	brne	.-4      	; 0x2834 <LCD_displayCharacter+0x1ea>
    2838:	9e 8f       	std	Y+30, r25	; 0x1e
    283a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	69 ad       	ldd	r22, Y+57	; 0x39
    2840:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <GPIO_writePort>
    2844:	80 e0       	ldi	r24, 0x00	; 0
    2846:	90 e0       	ldi	r25, 0x00	; 0
    2848:	a0 e8       	ldi	r26, 0x80	; 128
    284a:	bf e3       	ldi	r27, 0x3F	; 63
    284c:	89 8f       	std	Y+25, r24	; 0x19
    284e:	9a 8f       	std	Y+26, r25	; 0x1a
    2850:	ab 8f       	std	Y+27, r26	; 0x1b
    2852:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2854:	69 8d       	ldd	r22, Y+25	; 0x19
    2856:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2858:	8b 8d       	ldd	r24, Y+27	; 0x1b
    285a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    285c:	20 e0       	ldi	r18, 0x00	; 0
    285e:	30 e0       	ldi	r19, 0x00	; 0
    2860:	4a ef       	ldi	r20, 0xFA	; 250
    2862:	54 e4       	ldi	r21, 0x44	; 68
    2864:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2868:	dc 01       	movw	r26, r24
    286a:	cb 01       	movw	r24, r22
    286c:	8d 8b       	std	Y+21, r24	; 0x15
    286e:	9e 8b       	std	Y+22, r25	; 0x16
    2870:	af 8b       	std	Y+23, r26	; 0x17
    2872:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2874:	6d 89       	ldd	r22, Y+21	; 0x15
    2876:	7e 89       	ldd	r23, Y+22	; 0x16
    2878:	8f 89       	ldd	r24, Y+23	; 0x17
    287a:	98 8d       	ldd	r25, Y+24	; 0x18
    287c:	20 e0       	ldi	r18, 0x00	; 0
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	40 e8       	ldi	r20, 0x80	; 128
    2882:	5f e3       	ldi	r21, 0x3F	; 63
    2884:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2888:	88 23       	and	r24, r24
    288a:	2c f4       	brge	.+10     	; 0x2896 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    288c:	81 e0       	ldi	r24, 0x01	; 1
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	9c 8b       	std	Y+20, r25	; 0x14
    2892:	8b 8b       	std	Y+19, r24	; 0x13
    2894:	3f c0       	rjmp	.+126    	; 0x2914 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2896:	6d 89       	ldd	r22, Y+21	; 0x15
    2898:	7e 89       	ldd	r23, Y+22	; 0x16
    289a:	8f 89       	ldd	r24, Y+23	; 0x17
    289c:	98 8d       	ldd	r25, Y+24	; 0x18
    289e:	20 e0       	ldi	r18, 0x00	; 0
    28a0:	3f ef       	ldi	r19, 0xFF	; 255
    28a2:	4f e7       	ldi	r20, 0x7F	; 127
    28a4:	57 e4       	ldi	r21, 0x47	; 71
    28a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    28aa:	18 16       	cp	r1, r24
    28ac:	4c f5       	brge	.+82     	; 0x2900 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28ae:	69 8d       	ldd	r22, Y+25	; 0x19
    28b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28b6:	20 e0       	ldi	r18, 0x00	; 0
    28b8:	30 e0       	ldi	r19, 0x00	; 0
    28ba:	40 e2       	ldi	r20, 0x20	; 32
    28bc:	51 e4       	ldi	r21, 0x41	; 65
    28be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28c2:	dc 01       	movw	r26, r24
    28c4:	cb 01       	movw	r24, r22
    28c6:	bc 01       	movw	r22, r24
    28c8:	cd 01       	movw	r24, r26
    28ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ce:	dc 01       	movw	r26, r24
    28d0:	cb 01       	movw	r24, r22
    28d2:	9c 8b       	std	Y+20, r25	; 0x14
    28d4:	8b 8b       	std	Y+19, r24	; 0x13
    28d6:	0f c0       	rjmp	.+30     	; 0x28f6 <LCD_displayCharacter+0x2ac>
    28d8:	88 ec       	ldi	r24, 0xC8	; 200
    28da:	90 e0       	ldi	r25, 0x00	; 0
    28dc:	9a 8b       	std	Y+18, r25	; 0x12
    28de:	89 8b       	std	Y+17, r24	; 0x11
    28e0:	89 89       	ldd	r24, Y+17	; 0x11
    28e2:	9a 89       	ldd	r25, Y+18	; 0x12
    28e4:	01 97       	sbiw	r24, 0x01	; 1
    28e6:	f1 f7       	brne	.-4      	; 0x28e4 <LCD_displayCharacter+0x29a>
    28e8:	9a 8b       	std	Y+18, r25	; 0x12
    28ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28ec:	8b 89       	ldd	r24, Y+19	; 0x13
    28ee:	9c 89       	ldd	r25, Y+20	; 0x14
    28f0:	01 97       	sbiw	r24, 0x01	; 1
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f6:	8b 89       	ldd	r24, Y+19	; 0x13
    28f8:	9c 89       	ldd	r25, Y+20	; 0x14
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	69 f7       	brne	.-38     	; 0x28d8 <LCD_displayCharacter+0x28e>
    28fe:	14 c0       	rjmp	.+40     	; 0x2928 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2900:	6d 89       	ldd	r22, Y+21	; 0x15
    2902:	7e 89       	ldd	r23, Y+22	; 0x16
    2904:	8f 89       	ldd	r24, Y+23	; 0x17
    2906:	98 8d       	ldd	r25, Y+24	; 0x18
    2908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    290c:	dc 01       	movw	r26, r24
    290e:	cb 01       	movw	r24, r22
    2910:	9c 8b       	std	Y+20, r25	; 0x14
    2912:	8b 8b       	std	Y+19, r24	; 0x13
    2914:	8b 89       	ldd	r24, Y+19	; 0x13
    2916:	9c 89       	ldd	r25, Y+20	; 0x14
    2918:	98 8b       	std	Y+16, r25	; 0x10
    291a:	8f 87       	std	Y+15, r24	; 0x0f
    291c:	8f 85       	ldd	r24, Y+15	; 0x0f
    291e:	98 89       	ldd	r25, Y+16	; 0x10
    2920:	01 97       	sbiw	r24, 0x01	; 1
    2922:	f1 f7       	brne	.-4      	; 0x2920 <LCD_displayCharacter+0x2d6>
    2924:	98 8b       	std	Y+16, r25	; 0x10
    2926:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2928:	81 e0       	ldi	r24, 0x01	; 1
    292a:	61 e0       	ldi	r22, 0x01	; 1
    292c:	40 e0       	ldi	r20, 0x00	; 0
    292e:	0e 94 bc 0c 	call	0x1978	; 0x1978 <GPIO_writePin>
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	a0 e8       	ldi	r26, 0x80	; 128
    2938:	bf e3       	ldi	r27, 0x3F	; 63
    293a:	8b 87       	std	Y+11, r24	; 0x0b
    293c:	9c 87       	std	Y+12, r25	; 0x0c
    293e:	ad 87       	std	Y+13, r26	; 0x0d
    2940:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2942:	6b 85       	ldd	r22, Y+11	; 0x0b
    2944:	7c 85       	ldd	r23, Y+12	; 0x0c
    2946:	8d 85       	ldd	r24, Y+13	; 0x0d
    2948:	9e 85       	ldd	r25, Y+14	; 0x0e
    294a:	20 e0       	ldi	r18, 0x00	; 0
    294c:	30 e0       	ldi	r19, 0x00	; 0
    294e:	4a ef       	ldi	r20, 0xFA	; 250
    2950:	54 e4       	ldi	r21, 0x44	; 68
    2952:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2956:	dc 01       	movw	r26, r24
    2958:	cb 01       	movw	r24, r22
    295a:	8f 83       	std	Y+7, r24	; 0x07
    295c:	98 87       	std	Y+8, r25	; 0x08
    295e:	a9 87       	std	Y+9, r26	; 0x09
    2960:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2962:	6f 81       	ldd	r22, Y+7	; 0x07
    2964:	78 85       	ldd	r23, Y+8	; 0x08
    2966:	89 85       	ldd	r24, Y+9	; 0x09
    2968:	9a 85       	ldd	r25, Y+10	; 0x0a
    296a:	20 e0       	ldi	r18, 0x00	; 0
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	40 e8       	ldi	r20, 0x80	; 128
    2970:	5f e3       	ldi	r21, 0x3F	; 63
    2972:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2976:	88 23       	and	r24, r24
    2978:	2c f4       	brge	.+10     	; 0x2984 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	90 e0       	ldi	r25, 0x00	; 0
    297e:	9e 83       	std	Y+6, r25	; 0x06
    2980:	8d 83       	std	Y+5, r24	; 0x05
    2982:	3f c0       	rjmp	.+126    	; 0x2a02 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2984:	6f 81       	ldd	r22, Y+7	; 0x07
    2986:	78 85       	ldd	r23, Y+8	; 0x08
    2988:	89 85       	ldd	r24, Y+9	; 0x09
    298a:	9a 85       	ldd	r25, Y+10	; 0x0a
    298c:	20 e0       	ldi	r18, 0x00	; 0
    298e:	3f ef       	ldi	r19, 0xFF	; 255
    2990:	4f e7       	ldi	r20, 0x7F	; 127
    2992:	57 e4       	ldi	r21, 0x47	; 71
    2994:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2998:	18 16       	cp	r1, r24
    299a:	4c f5       	brge	.+82     	; 0x29ee <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    299c:	6b 85       	ldd	r22, Y+11	; 0x0b
    299e:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a0:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a2:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a4:	20 e0       	ldi	r18, 0x00	; 0
    29a6:	30 e0       	ldi	r19, 0x00	; 0
    29a8:	40 e2       	ldi	r20, 0x20	; 32
    29aa:	51 e4       	ldi	r21, 0x41	; 65
    29ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b0:	dc 01       	movw	r26, r24
    29b2:	cb 01       	movw	r24, r22
    29b4:	bc 01       	movw	r22, r24
    29b6:	cd 01       	movw	r24, r26
    29b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29bc:	dc 01       	movw	r26, r24
    29be:	cb 01       	movw	r24, r22
    29c0:	9e 83       	std	Y+6, r25	; 0x06
    29c2:	8d 83       	std	Y+5, r24	; 0x05
    29c4:	0f c0       	rjmp	.+30     	; 0x29e4 <LCD_displayCharacter+0x39a>
    29c6:	88 ec       	ldi	r24, 0xC8	; 200
    29c8:	90 e0       	ldi	r25, 0x00	; 0
    29ca:	9c 83       	std	Y+4, r25	; 0x04
    29cc:	8b 83       	std	Y+3, r24	; 0x03
    29ce:	8b 81       	ldd	r24, Y+3	; 0x03
    29d0:	9c 81       	ldd	r25, Y+4	; 0x04
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <LCD_displayCharacter+0x388>
    29d6:	9c 83       	std	Y+4, r25	; 0x04
    29d8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29da:	8d 81       	ldd	r24, Y+5	; 0x05
    29dc:	9e 81       	ldd	r25, Y+6	; 0x06
    29de:	01 97       	sbiw	r24, 0x01	; 1
    29e0:	9e 83       	std	Y+6, r25	; 0x06
    29e2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	00 97       	sbiw	r24, 0x00	; 0
    29ea:	69 f7       	brne	.-38     	; 0x29c6 <LCD_displayCharacter+0x37c>
    29ec:	14 c0       	rjmp	.+40     	; 0x2a16 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29ee:	6f 81       	ldd	r22, Y+7	; 0x07
    29f0:	78 85       	ldd	r23, Y+8	; 0x08
    29f2:	89 85       	ldd	r24, Y+9	; 0x09
    29f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29fa:	dc 01       	movw	r26, r24
    29fc:	cb 01       	movw	r24, r22
    29fe:	9e 83       	std	Y+6, r25	; 0x06
    2a00:	8d 83       	std	Y+5, r24	; 0x05
    2a02:	8d 81       	ldd	r24, Y+5	; 0x05
    2a04:	9e 81       	ldd	r25, Y+6	; 0x06
    2a06:	9a 83       	std	Y+2, r25	; 0x02
    2a08:	89 83       	std	Y+1, r24	; 0x01
    2a0a:	89 81       	ldd	r24, Y+1	; 0x01
    2a0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2a0e:	01 97       	sbiw	r24, 0x01	; 1
    2a10:	f1 f7       	brne	.-4      	; 0x2a0e <LCD_displayCharacter+0x3c4>
    2a12:	9a 83       	std	Y+2, r25	; 0x02
    2a14:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2a16:	e9 96       	adiw	r28, 0x39	; 57
    2a18:	0f b6       	in	r0, 0x3f	; 63
    2a1a:	f8 94       	cli
    2a1c:	de bf       	out	0x3e, r29	; 62
    2a1e:	0f be       	out	0x3f, r0	; 63
    2a20:	cd bf       	out	0x3d, r28	; 61
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	00 d0       	rcall	.+0      	; 0x2a2e <LCD_displayString+0x6>
    2a2e:	0f 92       	push	r0
    2a30:	cd b7       	in	r28, 0x3d	; 61
    2a32:	de b7       	in	r29, 0x3e	; 62
    2a34:	9b 83       	std	Y+3, r25	; 0x03
    2a36:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a38:	19 82       	std	Y+1, r1	; 0x01
    2a3a:	0e c0       	rjmp	.+28     	; 0x2a58 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2a3c:	89 81       	ldd	r24, Y+1	; 0x01
    2a3e:	28 2f       	mov	r18, r24
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	8a 81       	ldd	r24, Y+2	; 0x02
    2a44:	9b 81       	ldd	r25, Y+3	; 0x03
    2a46:	fc 01       	movw	r30, r24
    2a48:	e2 0f       	add	r30, r18
    2a4a:	f3 1f       	adc	r31, r19
    2a4c:	80 81       	ld	r24, Z
    2a4e:	0e 94 25 13 	call	0x264a	; 0x264a <LCD_displayCharacter>
		i++;
    2a52:	89 81       	ldd	r24, Y+1	; 0x01
    2a54:	8f 5f       	subi	r24, 0xFF	; 255
    2a56:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2a58:	89 81       	ldd	r24, Y+1	; 0x01
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	30 e0       	ldi	r19, 0x00	; 0
    2a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2a60:	9b 81       	ldd	r25, Y+3	; 0x03
    2a62:	fc 01       	movw	r30, r24
    2a64:	e2 0f       	add	r30, r18
    2a66:	f3 1f       	adc	r31, r19
    2a68:	80 81       	ld	r24, Z
    2a6a:	88 23       	and	r24, r24
    2a6c:	39 f7       	brne	.-50     	; 0x2a3c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2a6e:	0f 90       	pop	r0
    2a70:	0f 90       	pop	r0
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <LCD_moveCursor+0x6>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <LCD_moveCursor+0x8>
    2a82:	0f 92       	push	r0
    2a84:	cd b7       	in	r28, 0x3d	; 61
    2a86:	de b7       	in	r29, 0x3e	; 62
    2a88:	8a 83       	std	Y+2, r24	; 0x02
    2a8a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2a8c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8e:	28 2f       	mov	r18, r24
    2a90:	30 e0       	ldi	r19, 0x00	; 0
    2a92:	3d 83       	std	Y+5, r19	; 0x05
    2a94:	2c 83       	std	Y+4, r18	; 0x04
    2a96:	8c 81       	ldd	r24, Y+4	; 0x04
    2a98:	9d 81       	ldd	r25, Y+5	; 0x05
    2a9a:	81 30       	cpi	r24, 0x01	; 1
    2a9c:	91 05       	cpc	r25, r1
    2a9e:	c1 f0       	breq	.+48     	; 0x2ad0 <LCD_moveCursor+0x56>
    2aa0:	2c 81       	ldd	r18, Y+4	; 0x04
    2aa2:	3d 81       	ldd	r19, Y+5	; 0x05
    2aa4:	22 30       	cpi	r18, 0x02	; 2
    2aa6:	31 05       	cpc	r19, r1
    2aa8:	2c f4       	brge	.+10     	; 0x2ab4 <LCD_moveCursor+0x3a>
    2aaa:	8c 81       	ldd	r24, Y+4	; 0x04
    2aac:	9d 81       	ldd	r25, Y+5	; 0x05
    2aae:	00 97       	sbiw	r24, 0x00	; 0
    2ab0:	61 f0       	breq	.+24     	; 0x2aca <LCD_moveCursor+0x50>
    2ab2:	19 c0       	rjmp	.+50     	; 0x2ae6 <LCD_moveCursor+0x6c>
    2ab4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ab6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ab8:	22 30       	cpi	r18, 0x02	; 2
    2aba:	31 05       	cpc	r19, r1
    2abc:	69 f0       	breq	.+26     	; 0x2ad8 <LCD_moveCursor+0x5e>
    2abe:	8c 81       	ldd	r24, Y+4	; 0x04
    2ac0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ac2:	83 30       	cpi	r24, 0x03	; 3
    2ac4:	91 05       	cpc	r25, r1
    2ac6:	61 f0       	breq	.+24     	; 0x2ae0 <LCD_moveCursor+0x66>
    2ac8:	0e c0       	rjmp	.+28     	; 0x2ae6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2aca:	8b 81       	ldd	r24, Y+3	; 0x03
    2acc:	89 83       	std	Y+1, r24	; 0x01
    2ace:	0b c0       	rjmp	.+22     	; 0x2ae6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ad2:	80 5c       	subi	r24, 0xC0	; 192
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	07 c0       	rjmp	.+14     	; 0x2ae6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ad8:	8b 81       	ldd	r24, Y+3	; 0x03
    2ada:	80 5f       	subi	r24, 0xF0	; 240
    2adc:	89 83       	std	Y+1, r24	; 0x01
    2ade:	03 c0       	rjmp	.+6      	; 0x2ae6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ae0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ae2:	80 5b       	subi	r24, 0xB0	; 176
    2ae4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	80 68       	ori	r24, 0x80	; 128
    2aea:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_sendCommand>
}
    2aee:	0f 90       	pop	r0
    2af0:	0f 90       	pop	r0
    2af2:	0f 90       	pop	r0
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
    2af8:	cf 91       	pop	r28
    2afa:	df 91       	pop	r29
    2afc:	08 95       	ret

00002afe <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2afe:	df 93       	push	r29
    2b00:	cf 93       	push	r28
    2b02:	00 d0       	rcall	.+0      	; 0x2b04 <LCD_displayStringRowColumn+0x6>
    2b04:	00 d0       	rcall	.+0      	; 0x2b06 <LCD_displayStringRowColumn+0x8>
    2b06:	cd b7       	in	r28, 0x3d	; 61
    2b08:	de b7       	in	r29, 0x3e	; 62
    2b0a:	89 83       	std	Y+1, r24	; 0x01
    2b0c:	6a 83       	std	Y+2, r22	; 0x02
    2b0e:	5c 83       	std	Y+4, r21	; 0x04
    2b10:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2b12:	89 81       	ldd	r24, Y+1	; 0x01
    2b14:	6a 81       	ldd	r22, Y+2	; 0x02
    2b16:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b1e:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_displayString>
}
    2b22:	0f 90       	pop	r0
    2b24:	0f 90       	pop	r0
    2b26:	0f 90       	pop	r0
    2b28:	0f 90       	pop	r0
    2b2a:	cf 91       	pop	r28
    2b2c:	df 91       	pop	r29
    2b2e:	08 95       	ret

00002b30 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2b30:	df 93       	push	r29
    2b32:	cf 93       	push	r28
    2b34:	cd b7       	in	r28, 0x3d	; 61
    2b36:	de b7       	in	r29, 0x3e	; 62
    2b38:	62 97       	sbiw	r28, 0x12	; 18
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	9a 8b       	std	Y+18, r25	; 0x12
    2b46:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2b48:	89 89       	ldd	r24, Y+17	; 0x11
    2b4a:	9a 89       	ldd	r25, Y+18	; 0x12
    2b4c:	9e 01       	movw	r18, r28
    2b4e:	2f 5f       	subi	r18, 0xFF	; 255
    2b50:	3f 4f       	sbci	r19, 0xFF	; 255
    2b52:	b9 01       	movw	r22, r18
    2b54:	4a e0       	ldi	r20, 0x0A	; 10
    2b56:	50 e0       	ldi	r21, 0x00	; 0
    2b58:	0e 94 5d 18 	call	0x30ba	; 0x30ba <itoa>
   LCD_displayString(buff); /* Display the string */
    2b5c:	ce 01       	movw	r24, r28
    2b5e:	01 96       	adiw	r24, 0x01	; 1
    2b60:	0e 94 14 15 	call	0x2a28	; 0x2a28 <LCD_displayString>
}
    2b64:	62 96       	adiw	r28, 0x12	; 18
    2b66:	0f b6       	in	r0, 0x3f	; 63
    2b68:	f8 94       	cli
    2b6a:	de bf       	out	0x3e, r29	; 62
    2b6c:	0f be       	out	0x3f, r0	; 63
    2b6e:	cd bf       	out	0x3d, r28	; 61
    2b70:	cf 91       	pop	r28
    2b72:	df 91       	pop	r29
    2b74:	08 95       	ret

00002b76 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2b76:	df 93       	push	r29
    2b78:	cf 93       	push	r28
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	0e 94 36 11 	call	0x226c	; 0x226c <LCD_sendCommand>
}
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* Timer1 Compare Match A Interrupt Service Routine */
ISR(TIMER1_COMPA_vect){
    2b8a:	1f 92       	push	r1
    2b8c:	0f 92       	push	r0
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	0f 92       	push	r0
    2b92:	11 24       	eor	r1, r1
    2b94:	2f 93       	push	r18
    2b96:	3f 93       	push	r19
    2b98:	4f 93       	push	r20
    2b9a:	5f 93       	push	r21
    2b9c:	6f 93       	push	r22
    2b9e:	7f 93       	push	r23
    2ba0:	8f 93       	push	r24
    2ba2:	9f 93       	push	r25
    2ba4:	af 93       	push	r26
    2ba6:	bf 93       	push	r27
    2ba8:	ef 93       	push	r30
    2baa:	ff 93       	push	r31
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2bb4:	80 91 60 01 	lds	r24, 0x0160
    2bb8:	90 91 61 01 	lds	r25, 0x0161
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	29 f0       	breq	.+10     	; 0x2bca <__vector_7+0x40>
	{
		/* Call the Callback function in the application after the compare match */
		(g_callBackPtr)();
    2bc0:	e0 91 60 01 	lds	r30, 0x0160
    2bc4:	f0 91 61 01 	lds	r31, 0x0161
    2bc8:	09 95       	icall
	}
}
    2bca:	cf 91       	pop	r28
    2bcc:	df 91       	pop	r29
    2bce:	ff 91       	pop	r31
    2bd0:	ef 91       	pop	r30
    2bd2:	bf 91       	pop	r27
    2bd4:	af 91       	pop	r26
    2bd6:	9f 91       	pop	r25
    2bd8:	8f 91       	pop	r24
    2bda:	7f 91       	pop	r23
    2bdc:	6f 91       	pop	r22
    2bde:	5f 91       	pop	r21
    2be0:	4f 91       	pop	r20
    2be2:	3f 91       	pop	r19
    2be4:	2f 91       	pop	r18
    2be6:	0f 90       	pop	r0
    2be8:	0f be       	out	0x3f, r0	; 63
    2bea:	0f 90       	pop	r0
    2bec:	1f 90       	pop	r1
    2bee:	18 95       	reti

00002bf0 <__vector_9>:

/* Timer1 Overflow Interrupt Service Routine */
ISR(TIMER1_OVF_vect){
    2bf0:	1f 92       	push	r1
    2bf2:	0f 92       	push	r0
    2bf4:	0f b6       	in	r0, 0x3f	; 63
    2bf6:	0f 92       	push	r0
    2bf8:	11 24       	eor	r1, r1
    2bfa:	2f 93       	push	r18
    2bfc:	3f 93       	push	r19
    2bfe:	4f 93       	push	r20
    2c00:	5f 93       	push	r21
    2c02:	6f 93       	push	r22
    2c04:	7f 93       	push	r23
    2c06:	8f 93       	push	r24
    2c08:	9f 93       	push	r25
    2c0a:	af 93       	push	r26
    2c0c:	bf 93       	push	r27
    2c0e:	ef 93       	push	r30
    2c10:	ff 93       	push	r31
    2c12:	df 93       	push	r29
    2c14:	cf 93       	push	r28
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2c1a:	80 91 60 01 	lds	r24, 0x0160
    2c1e:	90 91 61 01 	lds	r25, 0x0161
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	29 f0       	breq	.+10     	; 0x2c30 <__vector_9+0x40>
	{
		/* Call the Callback function in the application after the overflow */
		(g_callBackPtr)();
    2c26:	e0 91 60 01 	lds	r30, 0x0160
    2c2a:	f0 91 61 01 	lds	r31, 0x0161
    2c2e:	09 95       	icall
	}
}
    2c30:	cf 91       	pop	r28
    2c32:	df 91       	pop	r29
    2c34:	ff 91       	pop	r31
    2c36:	ef 91       	pop	r30
    2c38:	bf 91       	pop	r27
    2c3a:	af 91       	pop	r26
    2c3c:	9f 91       	pop	r25
    2c3e:	8f 91       	pop	r24
    2c40:	7f 91       	pop	r23
    2c42:	6f 91       	pop	r22
    2c44:	5f 91       	pop	r21
    2c46:	4f 91       	pop	r20
    2c48:	3f 91       	pop	r19
    2c4a:	2f 91       	pop	r18
    2c4c:	0f 90       	pop	r0
    2c4e:	0f be       	out	0x3f, r0	; 63
    2c50:	0f 90       	pop	r0
    2c52:	1f 90       	pop	r1
    2c54:	18 95       	reti

00002c56 <Timer1_init>:
 * Description:
 * Initializes Timer1 by configuring the timer mode, setting registers, and enabling interrupts.
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <Timer1_init+0x6>
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
    2c60:	9a 83       	std	Y+2, r25	; 0x02
    2c62:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->mode == OVERFLOW_MODE){
    2c64:	e9 81       	ldd	r30, Y+1	; 0x01
    2c66:	fa 81       	ldd	r31, Y+2	; 0x02
    2c68:	85 81       	ldd	r24, Z+5	; 0x05
    2c6a:	88 23       	and	r24, r24
    2c6c:	79 f4       	brne	.+30     	; 0x2c8c <Timer1_init+0x36>
		/* Set the timer mode to normal mode */
		TCCR1A &= ~(0x03);
    2c6e:	af e4       	ldi	r26, 0x4F	; 79
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	ef e4       	ldi	r30, 0x4F	; 79
    2c74:	f0 e0       	ldi	r31, 0x00	; 0
    2c76:	80 81       	ld	r24, Z
    2c78:	8c 7f       	andi	r24, 0xFC	; 252
    2c7a:	8c 93       	st	X, r24
		/* Enable Timer1 overflow interrupt */
		TIMSK |= (1 << TOIE1);
    2c7c:	a9 e5       	ldi	r26, 0x59	; 89
    2c7e:	b0 e0       	ldi	r27, 0x00	; 0
    2c80:	e9 e5       	ldi	r30, 0x59	; 89
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	80 81       	ld	r24, Z
    2c86:	84 60       	ori	r24, 0x04	; 4
    2c88:	8c 93       	st	X, r24
    2c8a:	17 c0       	rjmp	.+46     	; 0x2cba <Timer1_init+0x64>
	}

	else{
		/* Set the timer mode to CTC mode */
		TCCR1B |= (1<<WGM12);
    2c8c:	ae e4       	ldi	r26, 0x4E	; 78
    2c8e:	b0 e0       	ldi	r27, 0x00	; 0
    2c90:	ee e4       	ldi	r30, 0x4E	; 78
    2c92:	f0 e0       	ldi	r31, 0x00	; 0
    2c94:	80 81       	ld	r24, Z
    2c96:	88 60       	ori	r24, 0x08	; 8
    2c98:	8c 93       	st	X, r24
		/* Enable Timer1 compare match interrupt */
		TIMSK |= (1 << OCIE1A);
    2c9a:	a9 e5       	ldi	r26, 0x59	; 89
    2c9c:	b0 e0       	ldi	r27, 0x00	; 0
    2c9e:	e9 e5       	ldi	r30, 0x59	; 89
    2ca0:	f0 e0       	ldi	r31, 0x00	; 0
    2ca2:	80 81       	ld	r24, Z
    2ca4:	80 61       	ori	r24, 0x10	; 16
    2ca6:	8c 93       	st	X, r24
		/* Set the compare match value */
		OCR1A = Config_Ptr->compare_value;
    2ca8:	aa e4       	ldi	r26, 0x4A	; 74
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	e9 81       	ldd	r30, Y+1	; 0x01
    2cae:	fa 81       	ldd	r31, Y+2	; 0x02
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	11 96       	adiw	r26, 0x01	; 1
    2cb6:	9c 93       	st	X, r25
    2cb8:	8e 93       	st	-X, r24
	}

	/* Set the initial timer value */
	TCNT1 = Config_Ptr->initial_value;
    2cba:	ac e4       	ldi	r26, 0x4C	; 76
    2cbc:	b0 e0       	ldi	r27, 0x00	; 0
    2cbe:	e9 81       	ldd	r30, Y+1	; 0x01
    2cc0:	fa 81       	ldd	r31, Y+2	; 0x02
    2cc2:	80 81       	ld	r24, Z
    2cc4:	91 81       	ldd	r25, Z+1	; 0x01
    2cc6:	11 96       	adiw	r26, 0x01	; 1
    2cc8:	9c 93       	st	X, r25
    2cca:	8e 93       	st	-X, r24
	/* Set the required F_CPU prescaler */
	TCCR1B |= (Config_Ptr->prescaler);
    2ccc:	ae e4       	ldi	r26, 0x4E	; 78
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ee e4       	ldi	r30, 0x4E	; 78
    2cd2:	f0 e0       	ldi	r31, 0x00	; 0
    2cd4:	90 81       	ld	r25, Z
    2cd6:	e9 81       	ldd	r30, Y+1	; 0x01
    2cd8:	fa 81       	ldd	r31, Y+2	; 0x02
    2cda:	84 81       	ldd	r24, Z+4	; 0x04
    2cdc:	89 2b       	or	r24, r25
    2cde:	8c 93       	st	X, r24
}
    2ce0:	0f 90       	pop	r0
    2ce2:	0f 90       	pop	r0
    2ce4:	cf 91       	pop	r28
    2ce6:	df 91       	pop	r29
    2ce8:	08 95       	ret

00002cea <Timer1_deInit>:
/*
 * Description:
 * Stops the Timer1.
 */
void Timer1_deInit(void)
{
    2cea:	df 93       	push	r29
    2cec:	cf 93       	push	r28
    2cee:	cd b7       	in	r28, 0x3d	; 61
    2cf0:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 by clearing the prescaler bits */
	TCCR1B &= ~(0x07);
    2cf2:	ae e4       	ldi	r26, 0x4E	; 78
    2cf4:	b0 e0       	ldi	r27, 0x00	; 0
    2cf6:	ee e4       	ldi	r30, 0x4E	; 78
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	80 81       	ld	r24, Z
    2cfc:	88 7f       	andi	r24, 0xF8	; 248
    2cfe:	8c 93       	st	X, r24
}
    2d00:	cf 91       	pop	r28
    2d02:	df 91       	pop	r29
    2d04:	08 95       	ret

00002d06 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2d06:	df 93       	push	r29
    2d08:	cf 93       	push	r28
    2d0a:	00 d0       	rcall	.+0      	; 0x2d0c <Timer1_setCallBack+0x6>
    2d0c:	cd b7       	in	r28, 0x3d	; 61
    2d0e:	de b7       	in	r29, 0x3e	; 62
    2d10:	9a 83       	std	Y+2, r25	; 0x02
    2d12:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the callback function in a global variable */
	g_callBackPtr = a_ptr;
    2d14:	89 81       	ldd	r24, Y+1	; 0x01
    2d16:	9a 81       	ldd	r25, Y+2	; 0x02
    2d18:	90 93 61 01 	sts	0x0161, r25
    2d1c:	80 93 60 01 	sts	0x0160, r24
}
    2d20:	0f 90       	pop	r0
    2d22:	0f 90       	pop	r0
    2d24:	cf 91       	pop	r28
    2d26:	df 91       	pop	r29
    2d28:	08 95       	ret

00002d2a <delay_sec>:

/*
 * Description:
 * Uses Timer1 to introduce a delay in seconds.
 */
void delay_sec(uint8 sec){
    2d2a:	df 93       	push	r29
    2d2c:	cf 93       	push	r28
    2d2e:	0f 92       	push	r0
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&Timer1_Config);
    2d36:	84 e5       	ldi	r24, 0x54	; 84
    2d38:	91 e0       	ldi	r25, 0x01	; 1
    2d3a:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <Timer1_init>

	Timer1_setCallBack(timeCalc);
    2d3e:	80 ec       	ldi	r24, 0xC0	; 192
    2d40:	96 e1       	ldi	r25, 0x16	; 22
    2d42:	0e 94 83 16 	call	0x2d06	; 0x2d06 <Timer1_setCallBack>

	delaySeconds = sec;
    2d46:	89 81       	ldd	r24, Y+1	; 0x01
    2d48:	88 2f       	mov	r24, r24
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	a0 e0       	ldi	r26, 0x00	; 0
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	80 93 66 01 	sts	0x0166, r24
    2d54:	90 93 67 01 	sts	0x0167, r25
    2d58:	a0 93 68 01 	sts	0x0168, r26
    2d5c:	b0 93 69 01 	sts	0x0169, r27

	while(delaySeconds>0) {
    2d60:	80 91 66 01 	lds	r24, 0x0166
    2d64:	90 91 67 01 	lds	r25, 0x0167
    2d68:	a0 91 68 01 	lds	r26, 0x0168
    2d6c:	b0 91 69 01 	lds	r27, 0x0169
    2d70:	00 97       	sbiw	r24, 0x00	; 0
    2d72:	a1 05       	cpc	r26, r1
    2d74:	b1 05       	cpc	r27, r1
    2d76:	a1 f7       	brne	.-24     	; 0x2d60 <delay_sec+0x36>
		/* Wait for the delay to complete */
	}
}
    2d78:	0f 90       	pop	r0
    2d7a:	cf 91       	pop	r28
    2d7c:	df 91       	pop	r29
    2d7e:	08 95       	ret

00002d80 <timeCalc>:

/* Callback function to calculate the seconds required */
void timeCalc(void){
    2d80:	df 93       	push	r29
    2d82:	cf 93       	push	r28
    2d84:	cd b7       	in	r28, 0x3d	; 61
    2d86:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    2d88:	80 91 62 01 	lds	r24, 0x0162
    2d8c:	90 91 63 01 	lds	r25, 0x0163
    2d90:	a0 91 64 01 	lds	r26, 0x0164
    2d94:	b0 91 65 01 	lds	r27, 0x0165
    2d98:	01 96       	adiw	r24, 0x01	; 1
    2d9a:	a1 1d       	adc	r26, r1
    2d9c:	b1 1d       	adc	r27, r1
    2d9e:	80 93 62 01 	sts	0x0162, r24
    2da2:	90 93 63 01 	sts	0x0163, r25
    2da6:	a0 93 64 01 	sts	0x0164, r26
    2daa:	b0 93 65 01 	sts	0x0165, r27
	if (g_tick == delaySeconds)
    2dae:	20 91 62 01 	lds	r18, 0x0162
    2db2:	30 91 63 01 	lds	r19, 0x0163
    2db6:	40 91 64 01 	lds	r20, 0x0164
    2dba:	50 91 65 01 	lds	r21, 0x0165
    2dbe:	80 91 66 01 	lds	r24, 0x0166
    2dc2:	90 91 67 01 	lds	r25, 0x0167
    2dc6:	a0 91 68 01 	lds	r26, 0x0168
    2dca:	b0 91 69 01 	lds	r27, 0x0169
    2dce:	28 17       	cp	r18, r24
    2dd0:	39 07       	cpc	r19, r25
    2dd2:	4a 07       	cpc	r20, r26
    2dd4:	5b 07       	cpc	r21, r27
    2dd6:	91 f4       	brne	.+36     	; 0x2dfc <timeCalc+0x7c>
	{
		g_tick=0;
    2dd8:	10 92 62 01 	sts	0x0162, r1
    2ddc:	10 92 63 01 	sts	0x0163, r1
    2de0:	10 92 64 01 	sts	0x0164, r1
    2de4:	10 92 65 01 	sts	0x0165, r1
		delaySeconds=0;
    2de8:	10 92 66 01 	sts	0x0166, r1
    2dec:	10 92 67 01 	sts	0x0167, r1
    2df0:	10 92 68 01 	sts	0x0168, r1
    2df4:	10 92 69 01 	sts	0x0169, r1
		Timer1_deInit();
    2df8:	0e 94 75 16 	call	0x2cea	; 0x2cea <Timer1_deInit>
	}
}
    2dfc:	cf 91       	pop	r28
    2dfe:	df 91       	pop	r29
    2e00:	08 95       	ret

00002e02 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2e02:	df 93       	push	r29
    2e04:	cf 93       	push	r28
    2e06:	00 d0       	rcall	.+0      	; 0x2e08 <UART_init+0x6>
    2e08:	00 d0       	rcall	.+0      	; 0x2e0a <UART_init+0x8>
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	9c 83       	std	Y+4, r25	; 0x04
    2e10:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2e12:	1a 82       	std	Y+2, r1	; 0x02
    2e14:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2e16:	eb e2       	ldi	r30, 0x2B	; 43
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	82 e0       	ldi	r24, 0x02	; 2
    2e1c:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2e1e:	ea e2       	ldi	r30, 0x2A	; 42
    2e20:	f0 e0       	ldi	r31, 0x00	; 0
    2e22:	88 e1       	ldi	r24, 0x18	; 24
    2e24:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<Config_Ptr->parity) | (1<<Config_Ptr->stop_bit) | (1<<Config_Ptr->bit_data);
    2e26:	a0 e4       	ldi	r26, 0x40	; 64
    2e28:	b0 e0       	ldi	r27, 0x00	; 0
    2e2a:	eb 81       	ldd	r30, Y+3	; 0x03
    2e2c:	fc 81       	ldd	r31, Y+4	; 0x04
    2e2e:	81 81       	ldd	r24, Z+1	; 0x01
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	02 c0       	rjmp	.+4      	; 0x2e3e <UART_init+0x3c>
    2e3a:	88 0f       	add	r24, r24
    2e3c:	99 1f       	adc	r25, r25
    2e3e:	2a 95       	dec	r18
    2e40:	e2 f7       	brpl	.-8      	; 0x2e3a <UART_init+0x38>
    2e42:	48 2f       	mov	r20, r24
    2e44:	40 68       	ori	r20, 0x80	; 128
    2e46:	eb 81       	ldd	r30, Y+3	; 0x03
    2e48:	fc 81       	ldd	r31, Y+4	; 0x04
    2e4a:	82 81       	ldd	r24, Z+2	; 0x02
    2e4c:	28 2f       	mov	r18, r24
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	02 c0       	rjmp	.+4      	; 0x2e5a <UART_init+0x58>
    2e56:	88 0f       	add	r24, r24
    2e58:	99 1f       	adc	r25, r25
    2e5a:	2a 95       	dec	r18
    2e5c:	e2 f7       	brpl	.-8      	; 0x2e56 <UART_init+0x54>
    2e5e:	48 2b       	or	r20, r24
    2e60:	eb 81       	ldd	r30, Y+3	; 0x03
    2e62:	fc 81       	ldd	r31, Y+4	; 0x04
    2e64:	80 81       	ld	r24, Z
    2e66:	28 2f       	mov	r18, r24
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	81 e0       	ldi	r24, 0x01	; 1
    2e6c:	90 e0       	ldi	r25, 0x00	; 0
    2e6e:	02 c0       	rjmp	.+4      	; 0x2e74 <UART_init+0x72>
    2e70:	88 0f       	add	r24, r24
    2e72:	99 1f       	adc	r25, r25
    2e74:	2a 95       	dec	r18
    2e76:	e2 f7       	brpl	.-8      	; 0x2e70 <UART_init+0x6e>
    2e78:	84 2b       	or	r24, r20
    2e7a:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2e7c:	eb 81       	ldd	r30, Y+3	; 0x03
    2e7e:	fc 81       	ldd	r31, Y+4	; 0x04
    2e80:	83 81       	ldd	r24, Z+3	; 0x03
    2e82:	94 81       	ldd	r25, Z+4	; 0x04
    2e84:	cc 01       	movw	r24, r24
    2e86:	a0 e0       	ldi	r26, 0x00	; 0
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	aa 1f       	adc	r26, r26
    2e90:	bb 1f       	adc	r27, r27
    2e92:	88 0f       	add	r24, r24
    2e94:	99 1f       	adc	r25, r25
    2e96:	aa 1f       	adc	r26, r26
    2e98:	bb 1f       	adc	r27, r27
    2e9a:	88 0f       	add	r24, r24
    2e9c:	99 1f       	adc	r25, r25
    2e9e:	aa 1f       	adc	r26, r26
    2ea0:	bb 1f       	adc	r27, r27
    2ea2:	9c 01       	movw	r18, r24
    2ea4:	ad 01       	movw	r20, r26
    2ea6:	80 e0       	ldi	r24, 0x00	; 0
    2ea8:	92 e1       	ldi	r25, 0x12	; 18
    2eaa:	aa e7       	ldi	r26, 0x7A	; 122
    2eac:	b0 e0       	ldi	r27, 0x00	; 0
    2eae:	bc 01       	movw	r22, r24
    2eb0:	cd 01       	movw	r24, r26
    2eb2:	0e 94 04 18 	call	0x3008	; 0x3008 <__udivmodsi4>
    2eb6:	da 01       	movw	r26, r20
    2eb8:	c9 01       	movw	r24, r18
    2eba:	01 97       	sbiw	r24, 0x01	; 1
    2ebc:	9a 83       	std	Y+2, r25	; 0x02
    2ebe:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2ec0:	e0 e4       	ldi	r30, 0x40	; 64
    2ec2:	f0 e0       	ldi	r31, 0x00	; 0
    2ec4:	89 81       	ldd	r24, Y+1	; 0x01
    2ec6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec8:	89 2f       	mov	r24, r25
    2eca:	99 27       	eor	r25, r25
    2ecc:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2ece:	e9 e2       	ldi	r30, 0x29	; 41
    2ed0:	f0 e0       	ldi	r31, 0x00	; 0
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	80 83       	st	Z, r24
}
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	0f 90       	pop	r0
    2ede:	cf 91       	pop	r28
    2ee0:	df 91       	pop	r29
    2ee2:	08 95       	ret

00002ee4 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2ee4:	df 93       	push	r29
    2ee6:	cf 93       	push	r28
    2ee8:	0f 92       	push	r0
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2ef0:	eb e2       	ldi	r30, 0x2B	; 43
    2ef2:	f0 e0       	ldi	r31, 0x00	; 0
    2ef4:	80 81       	ld	r24, Z
    2ef6:	88 2f       	mov	r24, r24
    2ef8:	90 e0       	ldi	r25, 0x00	; 0
    2efa:	80 72       	andi	r24, 0x20	; 32
    2efc:	90 70       	andi	r25, 0x00	; 0
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	b9 f3       	breq	.-18     	; 0x2ef0 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2f02:	ec e2       	ldi	r30, 0x2C	; 44
    2f04:	f0 e0       	ldi	r31, 0x00	; 0
    2f06:	89 81       	ldd	r24, Y+1	; 0x01
    2f08:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2f0a:	0f 90       	pop	r0
    2f0c:	cf 91       	pop	r28
    2f0e:	df 91       	pop	r29
    2f10:	08 95       	ret

00002f12 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2f12:	df 93       	push	r29
    2f14:	cf 93       	push	r28
    2f16:	cd b7       	in	r28, 0x3d	; 61
    2f18:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2f1a:	eb e2       	ldi	r30, 0x2B	; 43
    2f1c:	f0 e0       	ldi	r31, 0x00	; 0
    2f1e:	80 81       	ld	r24, Z
    2f20:	88 23       	and	r24, r24
    2f22:	dc f7       	brge	.-10     	; 0x2f1a <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2f24:	ec e2       	ldi	r30, 0x2C	; 44
    2f26:	f0 e0       	ldi	r31, 0x00	; 0
    2f28:	80 81       	ld	r24, Z
}
    2f2a:	cf 91       	pop	r28
    2f2c:	df 91       	pop	r29
    2f2e:	08 95       	ret

00002f30 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2f30:	df 93       	push	r29
    2f32:	cf 93       	push	r28
    2f34:	00 d0       	rcall	.+0      	; 0x2f36 <UART_sendString+0x6>
    2f36:	0f 92       	push	r0
    2f38:	cd b7       	in	r28, 0x3d	; 61
    2f3a:	de b7       	in	r29, 0x3e	; 62
    2f3c:	9b 83       	std	Y+3, r25	; 0x03
    2f3e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f40:	19 82       	std	Y+1, r1	; 0x01
    2f42:	0e c0       	rjmp	.+28     	; 0x2f60 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2f44:	89 81       	ldd	r24, Y+1	; 0x01
    2f46:	28 2f       	mov	r18, r24
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f4c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f4e:	fc 01       	movw	r30, r24
    2f50:	e2 0f       	add	r30, r18
    2f52:	f3 1f       	adc	r31, r19
    2f54:	80 81       	ld	r24, Z
    2f56:	0e 94 72 17 	call	0x2ee4	; 0x2ee4 <UART_sendByte>
		i++;
    2f5a:	89 81       	ldd	r24, Y+1	; 0x01
    2f5c:	8f 5f       	subi	r24, 0xFF	; 255
    2f5e:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2f60:	89 81       	ldd	r24, Y+1	; 0x01
    2f62:	28 2f       	mov	r18, r24
    2f64:	30 e0       	ldi	r19, 0x00	; 0
    2f66:	8a 81       	ldd	r24, Y+2	; 0x02
    2f68:	9b 81       	ldd	r25, Y+3	; 0x03
    2f6a:	fc 01       	movw	r30, r24
    2f6c:	e2 0f       	add	r30, r18
    2f6e:	f3 1f       	adc	r31, r19
    2f70:	80 81       	ld	r24, Z
    2f72:	88 23       	and	r24, r24
    2f74:	39 f7       	brne	.-50     	; 0x2f44 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2f76:	0f 90       	pop	r0
    2f78:	0f 90       	pop	r0
    2f7a:	0f 90       	pop	r0
    2f7c:	cf 91       	pop	r28
    2f7e:	df 91       	pop	r29
    2f80:	08 95       	ret

00002f82 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2f82:	0f 93       	push	r16
    2f84:	1f 93       	push	r17
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <UART_receiveString+0xa>
    2f8c:	0f 92       	push	r0
    2f8e:	cd b7       	in	r28, 0x3d	; 61
    2f90:	de b7       	in	r29, 0x3e	; 62
    2f92:	9b 83       	std	Y+3, r25	; 0x03
    2f94:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f96:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2f98:	89 81       	ldd	r24, Y+1	; 0x01
    2f9a:	28 2f       	mov	r18, r24
    2f9c:	30 e0       	ldi	r19, 0x00	; 0
    2f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    2fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fa2:	8c 01       	movw	r16, r24
    2fa4:	02 0f       	add	r16, r18
    2fa6:	13 1f       	adc	r17, r19
    2fa8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
    2fac:	f8 01       	movw	r30, r16
    2fae:	80 83       	st	Z, r24
    2fb0:	0f c0       	rjmp	.+30     	; 0x2fd0 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2fb2:	89 81       	ldd	r24, Y+1	; 0x01
    2fb4:	8f 5f       	subi	r24, 0xFF	; 255
    2fb6:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2fb8:	89 81       	ldd	r24, Y+1	; 0x01
    2fba:	28 2f       	mov	r18, r24
    2fbc:	30 e0       	ldi	r19, 0x00	; 0
    2fbe:	8a 81       	ldd	r24, Y+2	; 0x02
    2fc0:	9b 81       	ldd	r25, Y+3	; 0x03
    2fc2:	8c 01       	movw	r16, r24
    2fc4:	02 0f       	add	r16, r18
    2fc6:	13 1f       	adc	r17, r19
    2fc8:	0e 94 89 17 	call	0x2f12	; 0x2f12 <UART_recieveByte>
    2fcc:	f8 01       	movw	r30, r16
    2fce:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2fd0:	89 81       	ldd	r24, Y+1	; 0x01
    2fd2:	28 2f       	mov	r18, r24
    2fd4:	30 e0       	ldi	r19, 0x00	; 0
    2fd6:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd8:	9b 81       	ldd	r25, Y+3	; 0x03
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	80 81       	ld	r24, Z
    2fe2:	83 32       	cpi	r24, 0x23	; 35
    2fe4:	31 f7       	brne	.-52     	; 0x2fb2 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	28 2f       	mov	r18, r24
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	8a 81       	ldd	r24, Y+2	; 0x02
    2fee:	9b 81       	ldd	r25, Y+3	; 0x03
    2ff0:	fc 01       	movw	r30, r24
    2ff2:	e2 0f       	add	r30, r18
    2ff4:	f3 1f       	adc	r31, r19
    2ff6:	10 82       	st	Z, r1
}
    2ff8:	0f 90       	pop	r0
    2ffa:	0f 90       	pop	r0
    2ffc:	0f 90       	pop	r0
    2ffe:	cf 91       	pop	r28
    3000:	df 91       	pop	r29
    3002:	1f 91       	pop	r17
    3004:	0f 91       	pop	r16
    3006:	08 95       	ret

00003008 <__udivmodsi4>:
    3008:	a1 e2       	ldi	r26, 0x21	; 33
    300a:	1a 2e       	mov	r1, r26
    300c:	aa 1b       	sub	r26, r26
    300e:	bb 1b       	sub	r27, r27
    3010:	fd 01       	movw	r30, r26
    3012:	0d c0       	rjmp	.+26     	; 0x302e <__udivmodsi4_ep>

00003014 <__udivmodsi4_loop>:
    3014:	aa 1f       	adc	r26, r26
    3016:	bb 1f       	adc	r27, r27
    3018:	ee 1f       	adc	r30, r30
    301a:	ff 1f       	adc	r31, r31
    301c:	a2 17       	cp	r26, r18
    301e:	b3 07       	cpc	r27, r19
    3020:	e4 07       	cpc	r30, r20
    3022:	f5 07       	cpc	r31, r21
    3024:	20 f0       	brcs	.+8      	; 0x302e <__udivmodsi4_ep>
    3026:	a2 1b       	sub	r26, r18
    3028:	b3 0b       	sbc	r27, r19
    302a:	e4 0b       	sbc	r30, r20
    302c:	f5 0b       	sbc	r31, r21

0000302e <__udivmodsi4_ep>:
    302e:	66 1f       	adc	r22, r22
    3030:	77 1f       	adc	r23, r23
    3032:	88 1f       	adc	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	1a 94       	dec	r1
    3038:	69 f7       	brne	.-38     	; 0x3014 <__udivmodsi4_loop>
    303a:	60 95       	com	r22
    303c:	70 95       	com	r23
    303e:	80 95       	com	r24
    3040:	90 95       	com	r25
    3042:	9b 01       	movw	r18, r22
    3044:	ac 01       	movw	r20, r24
    3046:	bd 01       	movw	r22, r26
    3048:	cf 01       	movw	r24, r30
    304a:	08 95       	ret

0000304c <__prologue_saves__>:
    304c:	2f 92       	push	r2
    304e:	3f 92       	push	r3
    3050:	4f 92       	push	r4
    3052:	5f 92       	push	r5
    3054:	6f 92       	push	r6
    3056:	7f 92       	push	r7
    3058:	8f 92       	push	r8
    305a:	9f 92       	push	r9
    305c:	af 92       	push	r10
    305e:	bf 92       	push	r11
    3060:	cf 92       	push	r12
    3062:	df 92       	push	r13
    3064:	ef 92       	push	r14
    3066:	ff 92       	push	r15
    3068:	0f 93       	push	r16
    306a:	1f 93       	push	r17
    306c:	cf 93       	push	r28
    306e:	df 93       	push	r29
    3070:	cd b7       	in	r28, 0x3d	; 61
    3072:	de b7       	in	r29, 0x3e	; 62
    3074:	ca 1b       	sub	r28, r26
    3076:	db 0b       	sbc	r29, r27
    3078:	0f b6       	in	r0, 0x3f	; 63
    307a:	f8 94       	cli
    307c:	de bf       	out	0x3e, r29	; 62
    307e:	0f be       	out	0x3f, r0	; 63
    3080:	cd bf       	out	0x3d, r28	; 61
    3082:	09 94       	ijmp

00003084 <__epilogue_restores__>:
    3084:	2a 88       	ldd	r2, Y+18	; 0x12
    3086:	39 88       	ldd	r3, Y+17	; 0x11
    3088:	48 88       	ldd	r4, Y+16	; 0x10
    308a:	5f 84       	ldd	r5, Y+15	; 0x0f
    308c:	6e 84       	ldd	r6, Y+14	; 0x0e
    308e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3090:	8c 84       	ldd	r8, Y+12	; 0x0c
    3092:	9b 84       	ldd	r9, Y+11	; 0x0b
    3094:	aa 84       	ldd	r10, Y+10	; 0x0a
    3096:	b9 84       	ldd	r11, Y+9	; 0x09
    3098:	c8 84       	ldd	r12, Y+8	; 0x08
    309a:	df 80       	ldd	r13, Y+7	; 0x07
    309c:	ee 80       	ldd	r14, Y+6	; 0x06
    309e:	fd 80       	ldd	r15, Y+5	; 0x05
    30a0:	0c 81       	ldd	r16, Y+4	; 0x04
    30a2:	1b 81       	ldd	r17, Y+3	; 0x03
    30a4:	aa 81       	ldd	r26, Y+2	; 0x02
    30a6:	b9 81       	ldd	r27, Y+1	; 0x01
    30a8:	ce 0f       	add	r28, r30
    30aa:	d1 1d       	adc	r29, r1
    30ac:	0f b6       	in	r0, 0x3f	; 63
    30ae:	f8 94       	cli
    30b0:	de bf       	out	0x3e, r29	; 62
    30b2:	0f be       	out	0x3f, r0	; 63
    30b4:	cd bf       	out	0x3d, r28	; 61
    30b6:	ed 01       	movw	r28, r26
    30b8:	08 95       	ret

000030ba <itoa>:
    30ba:	fb 01       	movw	r30, r22
    30bc:	9f 01       	movw	r18, r30
    30be:	e8 94       	clt
    30c0:	42 30       	cpi	r20, 0x02	; 2
    30c2:	c4 f0       	brlt	.+48     	; 0x30f4 <itoa+0x3a>
    30c4:	45 32       	cpi	r20, 0x25	; 37
    30c6:	b4 f4       	brge	.+44     	; 0x30f4 <itoa+0x3a>
    30c8:	4a 30       	cpi	r20, 0x0A	; 10
    30ca:	29 f4       	brne	.+10     	; 0x30d6 <itoa+0x1c>
    30cc:	97 fb       	bst	r25, 7
    30ce:	1e f4       	brtc	.+6      	; 0x30d6 <itoa+0x1c>
    30d0:	90 95       	com	r25
    30d2:	81 95       	neg	r24
    30d4:	9f 4f       	sbci	r25, 0xFF	; 255
    30d6:	64 2f       	mov	r22, r20
    30d8:	77 27       	eor	r23, r23
    30da:	0e 94 8e 18 	call	0x311c	; 0x311c <__udivmodhi4>
    30de:	80 5d       	subi	r24, 0xD0	; 208
    30e0:	8a 33       	cpi	r24, 0x3A	; 58
    30e2:	0c f0       	brlt	.+2      	; 0x30e6 <itoa+0x2c>
    30e4:	89 5d       	subi	r24, 0xD9	; 217
    30e6:	81 93       	st	Z+, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	00 97       	sbiw	r24, 0x00	; 0
    30ec:	a1 f7       	brne	.-24     	; 0x30d6 <itoa+0x1c>
    30ee:	16 f4       	brtc	.+4      	; 0x30f4 <itoa+0x3a>
    30f0:	5d e2       	ldi	r21, 0x2D	; 45
    30f2:	51 93       	st	Z+, r21
    30f4:	10 82       	st	Z, r1
    30f6:	c9 01       	movw	r24, r18
    30f8:	0c 94 7e 18 	jmp	0x30fc	; 0x30fc <strrev>

000030fc <strrev>:
    30fc:	dc 01       	movw	r26, r24
    30fe:	fc 01       	movw	r30, r24
    3100:	67 2f       	mov	r22, r23
    3102:	71 91       	ld	r23, Z+
    3104:	77 23       	and	r23, r23
    3106:	e1 f7       	brne	.-8      	; 0x3100 <strrev+0x4>
    3108:	32 97       	sbiw	r30, 0x02	; 2
    310a:	04 c0       	rjmp	.+8      	; 0x3114 <strrev+0x18>
    310c:	7c 91       	ld	r23, X
    310e:	6d 93       	st	X+, r22
    3110:	70 83       	st	Z, r23
    3112:	62 91       	ld	r22, -Z
    3114:	ae 17       	cp	r26, r30
    3116:	bf 07       	cpc	r27, r31
    3118:	c8 f3       	brcs	.-14     	; 0x310c <strrev+0x10>
    311a:	08 95       	ret

0000311c <__udivmodhi4>:
    311c:	aa 1b       	sub	r26, r26
    311e:	bb 1b       	sub	r27, r27
    3120:	51 e1       	ldi	r21, 0x11	; 17
    3122:	07 c0       	rjmp	.+14     	; 0x3132 <__udivmodhi4_ep>

00003124 <__udivmodhi4_loop>:
    3124:	aa 1f       	adc	r26, r26
    3126:	bb 1f       	adc	r27, r27
    3128:	a6 17       	cp	r26, r22
    312a:	b7 07       	cpc	r27, r23
    312c:	10 f0       	brcs	.+4      	; 0x3132 <__udivmodhi4_ep>
    312e:	a6 1b       	sub	r26, r22
    3130:	b7 0b       	sbc	r27, r23

00003132 <__udivmodhi4_ep>:
    3132:	88 1f       	adc	r24, r24
    3134:	99 1f       	adc	r25, r25
    3136:	5a 95       	dec	r21
    3138:	a9 f7       	brne	.-22     	; 0x3124 <__udivmodhi4_loop>
    313a:	80 95       	com	r24
    313c:	90 95       	com	r25
    313e:	bc 01       	movw	r22, r24
    3140:	cd 01       	movw	r24, r26
    3142:	08 95       	ret

00003144 <_exit>:
    3144:	f8 94       	cli

00003146 <__stop_program>:
    3146:	ff cf       	rjmp	.-2      	; 0x3146 <__stop_program>
