
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dc0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000014  00800060  00002dc0  00002e54  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800074  00800074  00002e68  2**0
                  ALLOC
  3 .stab         00003300  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018ff  00000000  00000000  00006168  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00007a67  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  00007bc7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00007d56  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009d9b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000ae9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000be20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000bfa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000c262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000caf0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 7a 13 	jmp	0x26f4	; 0x26f4 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ad 13 	jmp	0x275a	; 0x275a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 e8 08 	jmp	0x11d0	; 0x11d0 <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ec       	ldi	r30, 0xC0	; 192
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 37       	cpi	r26, 0x74	; 116
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e7       	ldi	r26, 0x74	; 116
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 38       	cpi	r26, 0x80	; 128
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4f 06 	call	0xc9e	; 0xc9e <main>
      8a:	0c 94 de 16 	jmp	0x2dbc	; 0x2dbc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 7e 16 	jmp	0x2cfc	; 0x2cfc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 82 16 	jmp	0x2d04	; 0x2d04 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 9e 16 	jmp	0x2d3c	; 0x2d3c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <main>:
#define PLUS 16

/* Command code representing the '-' sign */
#define MINUS 12

int main() {
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	ec 97       	sbiw	r28, 0x3c	; 60
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
	uint8 password[PASSWORD_LENGTH],secPass[PASSWORD_LENGTH]; /* arrays carries the passwords sent by the master */
	uint8 passwordsMatch; /* carries the passwords comparison result */
	uint8 step=1,counter=0,choice=0; /* variable controls the steps of the program */
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	8f 8f       	std	Y+31, r24	; 0x1f
     cb6:	1e 8e       	std	Y+30, r1	; 0x1e
     cb8:	1d 8e       	std	Y+29, r1	; 0x1d
	uint16 address = 0x0311; /* EEPROM address to store the password */
     cba:	81 e1       	ldi	r24, 0x11	; 17
     cbc:	93 e0       	ldi	r25, 0x03	; 3
     cbe:	9c 8f       	std	Y+28, r25	; 0x1c
     cc0:	8b 8f       	std	Y+27, r24	; 0x1b

	/* ADC Configuration */
	ADC_ConfigType ADC_ConfigType = {Internal_2_56v, DF_8};
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	8b a7       	std	Y+43, r24	; 0x2b
     cc6:	82 e0       	ldi	r24, 0x02	; 2
     cc8:	8c a7       	std	Y+44, r24	; 0x2c

	/* ADC driver Initialization */
	ADC_init(&ADC_ConfigType);
     cca:	ce 01       	movw	r24, r28
     ccc:	8b 96       	adiw	r24, 0x2b	; 43
     cce:	0e 94 08 09 	call	0x1210	; 0x1210 <ADC_init>

	/* DC Motor driver Initialization */
	DcMotor_Init();
     cd2:	0e 94 56 08 	call	0x10ac	; 0x10ac <DcMotor_Init>

	/* Buzzer driver Initialization */
	Buzzer_init();
     cd6:	0e 94 72 09 	call	0x12e4	; 0x12e4 <Buzzer_init>

	/* LCD_init();  Enable it if needed */

	/* UART Configuration */
	UART_ConfigType UART_Config_Ptr = { UART_8_BIT_DATA, DISABLED, UART_STOP_1_BIT, UART_BAUDRATE_9600 };
     cda:	9e 01       	movw	r18, r28
     cdc:	23 5d       	subi	r18, 0xD3	; 211
     cde:	3f 4f       	sbci	r19, 0xFF	; 255
     ce0:	39 af       	std	Y+57, r19	; 0x39
     ce2:	28 af       	std	Y+56, r18	; 0x38
     ce4:	8e e6       	ldi	r24, 0x6E	; 110
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	9b af       	std	Y+59, r25	; 0x3b
     cea:	8a af       	std	Y+58, r24	; 0x3a
     cec:	95 e0       	ldi	r25, 0x05	; 5
     cee:	9c af       	std	Y+60, r25	; 0x3c
     cf0:	ea ad       	ldd	r30, Y+58	; 0x3a
     cf2:	fb ad       	ldd	r31, Y+59	; 0x3b
     cf4:	00 80       	ld	r0, Z
     cf6:	2a ad       	ldd	r18, Y+58	; 0x3a
     cf8:	3b ad       	ldd	r19, Y+59	; 0x3b
     cfa:	2f 5f       	subi	r18, 0xFF	; 255
     cfc:	3f 4f       	sbci	r19, 0xFF	; 255
     cfe:	3b af       	std	Y+59, r19	; 0x3b
     d00:	2a af       	std	Y+58, r18	; 0x3a
     d02:	e8 ad       	ldd	r30, Y+56	; 0x38
     d04:	f9 ad       	ldd	r31, Y+57	; 0x39
     d06:	00 82       	st	Z, r0
     d08:	28 ad       	ldd	r18, Y+56	; 0x38
     d0a:	39 ad       	ldd	r19, Y+57	; 0x39
     d0c:	2f 5f       	subi	r18, 0xFF	; 255
     d0e:	3f 4f       	sbci	r19, 0xFF	; 255
     d10:	39 af       	std	Y+57, r19	; 0x39
     d12:	28 af       	std	Y+56, r18	; 0x38
     d14:	3c ad       	ldd	r19, Y+60	; 0x3c
     d16:	31 50       	subi	r19, 0x01	; 1
     d18:	3c af       	std	Y+60, r19	; 0x3c
     d1a:	8c ad       	ldd	r24, Y+60	; 0x3c
     d1c:	88 23       	and	r24, r24
     d1e:	41 f7       	brne	.-48     	; 0xcf0 <main+0x52>

	/* UART driver Initialization */
	UART_init(&UART_Config_Ptr);
     d20:	ce 01       	movw	r24, r28
     d22:	8d 96       	adiw	r24, 0x2d	; 45
     d24:	0e 94 3d 15 	call	0x2a7a	; 0x2a7a <UART_init>

	/* TWI/I2C Configuration */
	TWI_ConfigType TWI_Config_Ptr = {0x04, TWI_BAUDRATE_400K };
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	8a ab       	std	Y+50, r24	; 0x32
     d2c:	82 e0       	ldi	r24, 0x02	; 2
     d2e:	8b ab       	std	Y+51, r24	; 0x33

	/* TWI/I2C driver Initialization */
	TWI_init(&TWI_Config_Ptr);
     d30:	ce 01       	movw	r24, r28
     d32:	c2 96       	adiw	r24, 0x32	; 50
     d34:	0e 94 b6 14 	call	0x296c	; 0x296c <TWI_init>

	SREG|=(1<<7);	/*  Enable global interrupts */
     d38:	af e5       	ldi	r26, 0x5F	; 95
     d3a:	b0 e0       	ldi	r27, 0x00	; 0
     d3c:	ef e5       	ldi	r30, 0x5F	; 95
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	80 81       	ld	r24, Z
     d42:	80 68       	ori	r24, 0x80	; 128
     d44:	8c 93       	st	X, r24

	for (;;){
		/* Check if the current step satisfies the condition for the buzzer */
		if (step<3){
     d46:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d48:	83 30       	cpi	r24, 0x03	; 3
     d4a:	08 f0       	brcs	.+2      	; 0xd4e <main+0xb0>
     d4c:	45 c0       	rjmp	.+138    	; 0xdd8 <main+0x13a>
			/* Wait until the master is ready to send the password */
			while(UART_recieveByte() != MASTER_READY){}
     d4e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
     d52:	80 31       	cpi	r24, 0x10	; 16
     d54:	e1 f7       	brne	.-8      	; 0xd4e <main+0xb0>

			/* Receiving the password from the master */
			receivePassword(password);
     d56:	ce 01       	movw	r24, r28
     d58:	81 96       	adiw	r24, 0x21	; 33
     d5a:	0e 94 a5 12 	call	0x254a	; 0x254a <receivePassword>

			if (1==step){
     d5e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     d60:	81 30       	cpi	r24, 0x01	; 1
     d62:	09 f0       	breq	.+2      	; 0xd66 <main+0xc8>
     d64:	4d c0       	rjmp	.+154    	; 0xe00 <main+0x162>
				/* Step 1 - Create a System Password */

				/* Wait until the master is ready to send the confirmation password */
				while(UART_recieveByte() != MASTER_READY){}
     d66:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
     d6a:	80 31       	cpi	r24, 0x10	; 16
     d6c:	e1 f7       	brne	.-8      	; 0xd66 <main+0xc8>

				/* Receive the confirmation password from the master. */
				receivePassword(secPass);
     d6e:	ce 01       	movw	r24, r28
     d70:	86 96       	adiw	r24, 0x26	; 38
     d72:	0e 94 a5 12 	call	0x254a	; 0x254a <receivePassword>

				/* compare the two passwords */
				passwordsMatch= comparePasswords(password,secPass);
     d76:	ce 01       	movw	r24, r28
     d78:	81 96       	adiw	r24, 0x21	; 33
     d7a:	9e 01       	movw	r18, r28
     d7c:	2a 5d       	subi	r18, 0xDA	; 218
     d7e:	3f 4f       	sbci	r19, 0xFF	; 255
     d80:	b9 01       	movw	r22, r18
     d82:	0e 94 45 13 	call	0x268a	; 0x268a <comparePasswords>
     d86:	88 a3       	std	Y+32, r24	; 0x20

				UART_sendByte(PASS_CHECKED);   /* Send password verification status. */
     d88:	81 e1       	ldi	r24, 0x11	; 17
     d8a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>
				UART_sendByte(passwordsMatch); /* Send passwords comparison result. */
     d8e:	88 a1       	ldd	r24, Y+32	; 0x20
     d90:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>

				if (passwordsMatch) {
     d94:	88 a1       	ldd	r24, Y+32	; 0x20
     d96:	88 23       	and	r24, r24
     d98:	e9 f0       	breq	.+58     	; 0xdd4 <main+0x136>
					/* passwords match, save the password in EEPROM */
					for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     d9a:	1a 8e       	std	Y+26, r1	; 0x1a
     d9c:	17 c0       	rjmp	.+46     	; 0xdcc <main+0x12e>
						EEPROM_writeByte(address++, password[i]);
     d9e:	4b 8d       	ldd	r20, Y+27	; 0x1b
     da0:	5c 8d       	ldd	r21, Y+28	; 0x1c
     da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     da6:	01 96       	adiw	r24, 0x01	; 1
     da8:	9c 8f       	std	Y+28, r25	; 0x1c
     daa:	8b 8f       	std	Y+27, r24	; 0x1b
     dac:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dae:	28 2f       	mov	r18, r24
     db0:	30 e0       	ldi	r19, 0x00	; 0
     db2:	ce 01       	movw	r24, r28
     db4:	81 96       	adiw	r24, 0x21	; 33
     db6:	fc 01       	movw	r30, r24
     db8:	e2 0f       	add	r30, r18
     dba:	f3 1f       	adc	r31, r19
     dbc:	20 81       	ld	r18, Z
     dbe:	ca 01       	movw	r24, r20
     dc0:	62 2f       	mov	r22, r18
     dc2:	0e 94 9b 09 	call	0x1336	; 0x1336 <EEPROM_writeByte>
				UART_sendByte(PASS_CHECKED);   /* Send password verification status. */
				UART_sendByte(passwordsMatch); /* Send passwords comparison result. */

				if (passwordsMatch) {
					/* passwords match, save the password in EEPROM */
					for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     dc6:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dc8:	8f 5f       	subi	r24, 0xFF	; 255
     dca:	8a 8f       	std	Y+26, r24	; 0x1a
     dcc:	8a 8d       	ldd	r24, Y+26	; 0x1a
     dce:	85 30       	cpi	r24, 0x05	; 5
     dd0:	30 f3       	brcs	.-52     	; 0xd9e <main+0x100>
     dd2:	16 c0       	rjmp	.+44     	; 0xe00 <main+0x162>
						EEPROM_writeByte(address++, password[i]);
					}
				}
				else {
					step=0;
     dd4:	1f 8e       	std	Y+31, r1	; 0x1f
     dd6:	14 c0       	rjmp	.+40     	; 0xe00 <main+0x162>
			}
		}

		else{
			/* Wait for the Buzzer time */
			while(UART_recieveByte() != BUZZER){}
     dd8:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
     ddc:	80 31       	cpi	r24, 0x10	; 16
     dde:	e1 f7       	brne	.-8      	; 0xdd8 <main+0x13a>
			/* Activate Buzzer for 3-seconds. */
			Buzzer_on(); /* Activate Buzzer. */
     de0:	0e 94 83 09 	call	0x1306	; 0x1306 <Buzzer_on>
			delay_sec(3); /* Buzzer active for 3 seconds. */
     de4:	83 e0       	ldi	r24, 0x03	; 3
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 4a 14 	call	0x2894	; 0x2894 <delay_sec>
			Buzzer_off();  /* Deactivate Buzzer. */
     dec:	0e 94 8f 09 	call	0x131e	; 0x131e <Buzzer_off>
			UART_sendByte(AFTERBUZZER); /* Send action after Buzzer activation. */
     df0:	81 e1       	ldi	r24, 0x11	; 17
     df2:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>
			step=1;	/* return to repeat step2 again */
     df6:	81 e0       	ldi	r24, 0x01	; 1
     df8:	8f 8f       	std	Y+31, r24	; 0x1f
			passwordsMatch=1; /* Reset passwords match indicator. */
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	88 a3       	std	Y+32, r24	; 0x20
			counter=0; /* Reset trials counter. */
     dfe:	1e 8e       	std	Y+30, r1	; 0x1e
		}

		if (1==step || 2==step){
     e00:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e02:	81 30       	cpi	r24, 0x01	; 1
     e04:	21 f0       	breq	.+8      	; 0xe0e <main+0x170>
     e06:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e08:	82 30       	cpi	r24, 0x02	; 2
     e0a:	09 f0       	breq	.+2      	; 0xe0e <main+0x170>
     e0c:	4b c1       	rjmp	.+662    	; 0x10a4 <main+0x406>
			switch (step){
     e0e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     e10:	e8 2f       	mov	r30, r24
     e12:	f0 e0       	ldi	r31, 0x00	; 0
     e14:	ff ab       	std	Y+55, r31	; 0x37
     e16:	ee ab       	std	Y+54, r30	; 0x36
     e18:	2e a9       	ldd	r18, Y+54	; 0x36
     e1a:	3f a9       	ldd	r19, Y+55	; 0x37
     e1c:	21 30       	cpi	r18, 0x01	; 1
     e1e:	31 05       	cpc	r19, r1
     e20:	31 f0       	breq	.+12     	; 0xe2e <main+0x190>
     e22:	8e a9       	ldd	r24, Y+54	; 0x36
     e24:	9f a9       	ldd	r25, Y+55	; 0x37
     e26:	82 30       	cpi	r24, 0x02	; 2
     e28:	91 05       	cpc	r25, r1
     e2a:	21 f0       	breq	.+8      	; 0xe34 <main+0x196>
     e2c:	3b c1       	rjmp	.+630    	; 0x10a4 <main+0x406>
			case 1:
				step=1; /* Proceed to step 2. */
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	8f 8f       	std	Y+31, r24	; 0x1f
     e32:	38 c1       	rjmp	.+624    	; 0x10a4 <main+0x406>
				break;
			case 2:
				/* Retrieve the saved password. */
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     e34:	19 8e       	std	Y+25, r1	; 0x19
     e36:	d4 c0       	rjmp	.+424    	; 0xfe0 <main+0x342>
					EEPROM_readByte(address++,&secPass[i]);
     e38:	4b 8d       	ldd	r20, Y+27	; 0x1b
     e3a:	5c 8d       	ldd	r21, Y+28	; 0x1c
     e3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e40:	01 96       	adiw	r24, 0x01	; 1
     e42:	9c 8f       	std	Y+28, r25	; 0x1c
     e44:	8b 8f       	std	Y+27, r24	; 0x1b
     e46:	89 8d       	ldd	r24, Y+25	; 0x19
     e48:	88 2f       	mov	r24, r24
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	9e 01       	movw	r18, r28
     e4e:	2a 5d       	subi	r18, 0xDA	; 218
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	28 0f       	add	r18, r24
     e54:	39 1f       	adc	r19, r25
     e56:	ca 01       	movw	r24, r20
     e58:	b9 01       	movw	r22, r18
     e5a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <EEPROM_readByte>
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	90 e0       	ldi	r25, 0x00	; 0
     e62:	a0 e2       	ldi	r26, 0x20	; 32
     e64:	b1 e4       	ldi	r27, 0x41	; 65
     e66:	8d 8b       	std	Y+21, r24	; 0x15
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	af 8b       	std	Y+23, r26	; 0x17
     e6c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	2b ea       	ldi	r18, 0xAB	; 171
     e78:	3a ea       	ldi	r19, 0xAA	; 170
     e7a:	4a e2       	ldi	r20, 0x2A	; 42
     e7c:	50 e4       	ldi	r21, 0x40	; 64
     e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e82:	dc 01       	movw	r26, r24
     e84:	cb 01       	movw	r24, r22
     e86:	89 8b       	std	Y+17, r24	; 0x11
     e88:	9a 8b       	std	Y+18, r25	; 0x12
     e8a:	ab 8b       	std	Y+19, r26	; 0x13
     e8c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e8e:	69 89       	ldd	r22, Y+17	; 0x11
     e90:	7a 89       	ldd	r23, Y+18	; 0x12
     e92:	8b 89       	ldd	r24, Y+19	; 0x13
     e94:	9c 89       	ldd	r25, Y+20	; 0x14
     e96:	20 e0       	ldi	r18, 0x00	; 0
     e98:	30 e0       	ldi	r19, 0x00	; 0
     e9a:	40 e8       	ldi	r20, 0x80	; 128
     e9c:	5f e3       	ldi	r21, 0x3F	; 63
     e9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     ea2:	88 23       	and	r24, r24
     ea4:	1c f4       	brge	.+6      	; 0xeac <main+0x20e>
		__ticks = 1;
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	88 8b       	std	Y+16, r24	; 0x10
     eaa:	91 c0       	rjmp	.+290    	; 0xfce <main+0x330>
	else if (__tmp > 255)
     eac:	69 89       	ldd	r22, Y+17	; 0x11
     eae:	7a 89       	ldd	r23, Y+18	; 0x12
     eb0:	8b 89       	ldd	r24, Y+19	; 0x13
     eb2:	9c 89       	ldd	r25, Y+20	; 0x14
     eb4:	20 e0       	ldi	r18, 0x00	; 0
     eb6:	30 e0       	ldi	r19, 0x00	; 0
     eb8:	4f e7       	ldi	r20, 0x7F	; 127
     eba:	53 e4       	ldi	r21, 0x43	; 67
     ebc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     ec0:	18 16       	cp	r1, r24
     ec2:	0c f0       	brlt	.+2      	; 0xec6 <main+0x228>
     ec4:	7b c0       	rjmp	.+246    	; 0xfbc <main+0x31e>
	{
		_delay_ms(__us / 1000.0);
     ec6:	6d 89       	ldd	r22, Y+21	; 0x15
     ec8:	7e 89       	ldd	r23, Y+22	; 0x16
     eca:	8f 89       	ldd	r24, Y+23	; 0x17
     ecc:	98 8d       	ldd	r25, Y+24	; 0x18
     ece:	20 e0       	ldi	r18, 0x00	; 0
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	4a e7       	ldi	r20, 0x7A	; 122
     ed4:	54 e4       	ldi	r21, 0x44	; 68
     ed6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
     eda:	dc 01       	movw	r26, r24
     edc:	cb 01       	movw	r24, r22
     ede:	8c 87       	std	Y+12, r24	; 0x0c
     ee0:	9d 87       	std	Y+13, r25	; 0x0d
     ee2:	ae 87       	std	Y+14, r26	; 0x0e
     ee4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee6:	6c 85       	ldd	r22, Y+12	; 0x0c
     ee8:	7d 85       	ldd	r23, Y+13	; 0x0d
     eea:	8e 85       	ldd	r24, Y+14	; 0x0e
     eec:	9f 85       	ldd	r25, Y+15	; 0x0f
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	30 e0       	ldi	r19, 0x00	; 0
     ef2:	4a ef       	ldi	r20, 0xFA	; 250
     ef4:	54 e4       	ldi	r21, 0x44	; 68
     ef6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	88 87       	std	Y+8, r24	; 0x08
     f00:	99 87       	std	Y+9, r25	; 0x09
     f02:	aa 87       	std	Y+10, r26	; 0x0a
     f04:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     f06:	68 85       	ldd	r22, Y+8	; 0x08
     f08:	79 85       	ldd	r23, Y+9	; 0x09
     f0a:	8a 85       	ldd	r24, Y+10	; 0x0a
     f0c:	9b 85       	ldd	r25, Y+11	; 0x0b
     f0e:	20 e0       	ldi	r18, 0x00	; 0
     f10:	30 e0       	ldi	r19, 0x00	; 0
     f12:	40 e8       	ldi	r20, 0x80	; 128
     f14:	5f e3       	ldi	r21, 0x3F	; 63
     f16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f1a:	88 23       	and	r24, r24
     f1c:	2c f4       	brge	.+10     	; 0xf28 <main+0x28a>
		__ticks = 1;
     f1e:	81 e0       	ldi	r24, 0x01	; 1
     f20:	90 e0       	ldi	r25, 0x00	; 0
     f22:	9f 83       	std	Y+7, r25	; 0x07
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	3f c0       	rjmp	.+126    	; 0xfa6 <main+0x308>
	else if (__tmp > 65535)
     f28:	68 85       	ldd	r22, Y+8	; 0x08
     f2a:	79 85       	ldd	r23, Y+9	; 0x09
     f2c:	8a 85       	ldd	r24, Y+10	; 0x0a
     f2e:	9b 85       	ldd	r25, Y+11	; 0x0b
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	3f ef       	ldi	r19, 0xFF	; 255
     f34:	4f e7       	ldi	r20, 0x7F	; 127
     f36:	57 e4       	ldi	r21, 0x47	; 71
     f38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f3c:	18 16       	cp	r1, r24
     f3e:	4c f5       	brge	.+82     	; 0xf92 <main+0x2f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f40:	6c 85       	ldd	r22, Y+12	; 0x0c
     f42:	7d 85       	ldd	r23, Y+13	; 0x0d
     f44:	8e 85       	ldd	r24, Y+14	; 0x0e
     f46:	9f 85       	ldd	r25, Y+15	; 0x0f
     f48:	20 e0       	ldi	r18, 0x00	; 0
     f4a:	30 e0       	ldi	r19, 0x00	; 0
     f4c:	40 e2       	ldi	r20, 0x20	; 32
     f4e:	51 e4       	ldi	r21, 0x41	; 65
     f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f54:	dc 01       	movw	r26, r24
     f56:	cb 01       	movw	r24, r22
     f58:	bc 01       	movw	r22, r24
     f5a:	cd 01       	movw	r24, r26
     f5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f60:	dc 01       	movw	r26, r24
     f62:	cb 01       	movw	r24, r22
     f64:	9f 83       	std	Y+7, r25	; 0x07
     f66:	8e 83       	std	Y+6, r24	; 0x06
     f68:	0f c0       	rjmp	.+30     	; 0xf88 <main+0x2ea>
     f6a:	88 ec       	ldi	r24, 0xC8	; 200
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	9d 83       	std	Y+5, r25	; 0x05
     f70:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f72:	8c 81       	ldd	r24, Y+4	; 0x04
     f74:	9d 81       	ldd	r25, Y+5	; 0x05
     f76:	01 97       	sbiw	r24, 0x01	; 1
     f78:	f1 f7       	brne	.-4      	; 0xf76 <main+0x2d8>
     f7a:	9d 83       	std	Y+5, r25	; 0x05
     f7c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7e:	8e 81       	ldd	r24, Y+6	; 0x06
     f80:	9f 81       	ldd	r25, Y+7	; 0x07
     f82:	01 97       	sbiw	r24, 0x01	; 1
     f84:	9f 83       	std	Y+7, r25	; 0x07
     f86:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f88:	8e 81       	ldd	r24, Y+6	; 0x06
     f8a:	9f 81       	ldd	r25, Y+7	; 0x07
     f8c:	00 97       	sbiw	r24, 0x00	; 0
     f8e:	69 f7       	brne	.-38     	; 0xf6a <main+0x2cc>
     f90:	24 c0       	rjmp	.+72     	; 0xfda <main+0x33c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f92:	68 85       	ldd	r22, Y+8	; 0x08
     f94:	79 85       	ldd	r23, Y+9	; 0x09
     f96:	8a 85       	ldd	r24, Y+10	; 0x0a
     f98:	9b 85       	ldd	r25, Y+11	; 0x0b
     f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f9e:	dc 01       	movw	r26, r24
     fa0:	cb 01       	movw	r24, r22
     fa2:	9f 83       	std	Y+7, r25	; 0x07
     fa4:	8e 83       	std	Y+6, r24	; 0x06
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	9b 83       	std	Y+3, r25	; 0x03
     fac:	8a 83       	std	Y+2, r24	; 0x02
     fae:	8a 81       	ldd	r24, Y+2	; 0x02
     fb0:	9b 81       	ldd	r25, Y+3	; 0x03
     fb2:	01 97       	sbiw	r24, 0x01	; 1
     fb4:	f1 f7       	brne	.-4      	; 0xfb2 <main+0x314>
     fb6:	9b 83       	std	Y+3, r25	; 0x03
     fb8:	8a 83       	std	Y+2, r24	; 0x02
     fba:	0f c0       	rjmp	.+30     	; 0xfda <main+0x33c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     fbc:	69 89       	ldd	r22, Y+17	; 0x11
     fbe:	7a 89       	ldd	r23, Y+18	; 0x12
     fc0:	8b 89       	ldd	r24, Y+19	; 0x13
     fc2:	9c 89       	ldd	r25, Y+20	; 0x14
     fc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fc8:	dc 01       	movw	r26, r24
     fca:	cb 01       	movw	r24, r22
     fcc:	88 8b       	std	Y+16, r24	; 0x10
     fce:	88 89       	ldd	r24, Y+16	; 0x10
     fd0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	8a 95       	dec	r24
     fd6:	f1 f7       	brne	.-4      	; 0xfd4 <main+0x336>
     fd8:	89 83       	std	Y+1, r24	; 0x01
			case 1:
				step=1; /* Proceed to step 2. */
				break;
			case 2:
				/* Retrieve the saved password. */
				for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
     fda:	89 8d       	ldd	r24, Y+25	; 0x19
     fdc:	8f 5f       	subi	r24, 0xFF	; 255
     fde:	89 8f       	std	Y+25, r24	; 0x19
     fe0:	89 8d       	ldd	r24, Y+25	; 0x19
     fe2:	85 30       	cpi	r24, 0x05	; 5
     fe4:	08 f4       	brcc	.+2      	; 0xfe8 <main+0x34a>
     fe6:	28 cf       	rjmp	.-432    	; 0xe38 <main+0x19a>
					EEPROM_readByte(address++,&secPass[i]);
					_delay_us(10); /* Delay after reading each byte */
				}

				/* Compare the two passwords */
				passwordsMatch= comparePasswords(password,secPass);
     fe8:	ce 01       	movw	r24, r28
     fea:	81 96       	adiw	r24, 0x21	; 33
     fec:	9e 01       	movw	r18, r28
     fee:	2a 5d       	subi	r18, 0xDA	; 218
     ff0:	3f 4f       	sbci	r19, 0xFF	; 255
     ff2:	b9 01       	movw	r22, r18
     ff4:	0e 94 45 13 	call	0x268a	; 0x268a <comparePasswords>
     ff8:	88 a3       	std	Y+32, r24	; 0x20
				UART_sendByte(PASS_CHECKED); /* Send password verification status. */
     ffa:	81 e1       	ldi	r24, 0x11	; 17
     ffc:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>
				UART_sendByte(passwordsMatch); /* Send passwords comparison result. */
    1000:	88 a1       	ldd	r24, Y+32	; 0x20
    1002:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>

				if(passwordsMatch){
    1006:	88 a1       	ldd	r24, Y+32	; 0x20
    1008:	88 23       	and	r24, r24
    100a:	09 f4       	brne	.+2      	; 0x100e <main+0x370>
    100c:	41 c0       	rjmp	.+130    	; 0x1090 <main+0x3f2>

					counter=0;	/* Clear the counter of the incorrect pass */
    100e:	1e 8e       	std	Y+30, r1	; 0x1e

					/* Wait until the master is ready to send the choice variable. */
					while(UART_recieveByte() != CHOICE){}
    1010:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
    1014:	80 31       	cpi	r24, 0x10	; 16
    1016:	e1 f7       	brne	.-8      	; 0x1010 <main+0x372>

					/* Receive the user choice from the master. */
					choice=UART_recieveByte();
    1018:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
    101c:	8d 8f       	std	Y+29, r24	; 0x1d

					switch(choice){
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	e8 2f       	mov	r30, r24
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	fd ab       	std	Y+53, r31	; 0x35
    1026:	ec ab       	std	Y+52, r30	; 0x34
    1028:	2c a9       	ldd	r18, Y+52	; 0x34
    102a:	3d a9       	ldd	r19, Y+53	; 0x35
    102c:	2c 30       	cpi	r18, 0x0C	; 12
    102e:	31 05       	cpc	r19, r1
    1030:	69 f1       	breq	.+90     	; 0x108c <main+0x3ee>
    1032:	8c a9       	ldd	r24, Y+52	; 0x34
    1034:	9d a9       	ldd	r25, Y+53	; 0x35
    1036:	80 31       	cpi	r24, 0x10	; 16
    1038:	91 05       	cpc	r25, r1
    103a:	a1 f5       	brne	.+104    	; 0x10a4 <main+0x406>
					case PLUS:
						/* Passwords match,
						 * Rotate motor for 2 seconds CW.
						 */
						DcMotor_Rotate(CW,100);
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	64 e6       	ldi	r22, 0x64	; 100
    1040:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DcMotor_Rotate>
						delay_sec(2);
    1044:	82 e0       	ldi	r24, 0x02	; 2
    1046:	90 e0       	ldi	r25, 0x00	; 0
    1048:	0e 94 4a 14 	call	0x2894	; 0x2894 <delay_sec>
						UART_sendByte(NEXT);
    104c:	81 e1       	ldi	r24, 0x11	; 17
    104e:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>

						/* Hold the motor for 1 second. */
						DcMotor_Rotate(STOP,0);
    1052:	82 e0       	ldi	r24, 0x02	; 2
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DcMotor_Rotate>
						delay_sec(1);
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 4a 14 	call	0x2894	; 0x2894 <delay_sec>
						UART_sendByte(NEXT);
    1062:	81 e1       	ldi	r24, 0x11	; 17
    1064:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>

						/* Rotate motor for 2 seconds A-CW. */
						DcMotor_Rotate(A_CW,100);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	64 e6       	ldi	r22, 0x64	; 100
    106c:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DcMotor_Rotate>
						delay_sec(2);
    1070:	82 e0       	ldi	r24, 0x02	; 2
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	0e 94 4a 14 	call	0x2894	; 0x2894 <delay_sec>
						UART_sendByte(NEXT);
    1078:	81 e1       	ldi	r24, 0x11	; 17
    107a:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>

						DcMotor_Rotate(STOP,0); /* Stop the motor. */
    107e:	82 e0       	ldi	r24, 0x02	; 2
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	0e 94 71 08 	call	0x10e2	; 0x10e2 <DcMotor_Rotate>
						step=1; /* Return to step 2. */
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	8f 8f       	std	Y+31, r24	; 0x1f
    108a:	0c c0       	rjmp	.+24     	; 0x10a4 <main+0x406>
						break;

					case MINUS:
						step=0; /* Reset the step to repeat step 1. */
    108c:	1f 8e       	std	Y+31, r1	; 0x1f
    108e:	0a c0       	rjmp	.+20     	; 0x10a4 <main+0x406>
					break;
				}

				else{
					/* count for 3 trials */
					counter++; /* Increment trials counter. */
    1090:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1092:	8f 5f       	subi	r24, 0xFF	; 255
    1094:	8e 8f       	std	Y+30, r24	; 0x1e
					step=1; /* Return to step 1. */
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	8f 8f       	std	Y+31, r24	; 0x1f
					if (3==counter){
    109a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    109c:	83 30       	cpi	r24, 0x03	; 3
    109e:	11 f4       	brne	.+4      	; 0x10a4 <main+0x406>
						/* Activate Buzzer after 3 trials. */
						step=2; /* Go to step 3 */
    10a0:	82 e0       	ldi	r24, 0x02	; 2
    10a2:	8f 8f       	std	Y+31, r24	; 0x1f
					}
				}
			}
		}
		step++; /* Move to the next step. */
    10a4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10a6:	8f 5f       	subi	r24, 0xFF	; 255
    10a8:	8f 8f       	std	Y+31, r24	; 0x1f
    10aa:	4d ce       	rjmp	.-870    	; 0xd46 <main+0xa8>

000010ac <DcMotor_Init>:
 * The function is responsible for setting up the direction for the two
 * motor pins through the GPIO driver.
 * It also stops the DC motor at the beginning through the GPIO driver.
 */
void DcMotor_Init(void)
{
    10ac:	df 93       	push	r29
    10ae:	cf 93       	push	r28
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
	/* Set up the two pins of the motor as output pins */
	GPIO_setupPinDirection(IN1_PORT_ID, IN1_PIN_ID, PIN_OUTPUT);
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	60 e0       	ldi	r22, 0x00	; 0
    10b8:	41 e0       	ldi	r20, 0x01	; 1
    10ba:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(IN2_PORT_ID, IN2_PIN_ID, PIN_OUTPUT);
    10be:	81 e0       	ldi	r24, 0x01	; 1
    10c0:	61 e0       	ldi	r22, 0x01	; 1
    10c2:	41 e0       	ldi	r20, 0x01	; 1
    10c4:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_setupPinDirection>

	/* Stop the motor in the beginning */
	GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    10c8:	81 e0       	ldi	r24, 0x01	; 1
    10ca:	60 e0       	ldi	r22, 0x00	; 0
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
	GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	61 e0       	ldi	r22, 0x01	; 1
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
}
    10dc:	cf 91       	pop	r28
    10de:	df 91       	pop	r29
    10e0:	08 95       	ret

000010e2 <DcMotor_Rotate>:
 * Description:
 * Function to rotate the DC Motor CW, A-CW, or stop the motor based on the state input value.
 * It sends the required duty cycle to the PWM driver based on the required speed value.
 */
void DcMotor_Rotate(DcMotor_State state, uint8 speed)
{
    10e2:	df 93       	push	r29
    10e4:	cf 93       	push	r28
    10e6:	00 d0       	rcall	.+0      	; 0x10e8 <DcMotor_Rotate+0x6>
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <DcMotor_Rotate+0x8>
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
    10f0:	6a 83       	std	Y+2, r22	; 0x02
	Timer0_PWM_Init(speed);
    10f2:	8a 81       	ldd	r24, Y+2	; 0x02
    10f4:	0e 94 b6 08 	call	0x116c	; 0x116c <Timer0_PWM_Init>

	switch (state)
    10f8:	89 81       	ldd	r24, Y+1	; 0x01
    10fa:	28 2f       	mov	r18, r24
    10fc:	30 e0       	ldi	r19, 0x00	; 0
    10fe:	3c 83       	std	Y+4, r19	; 0x04
    1100:	2b 83       	std	Y+3, r18	; 0x03
    1102:	8b 81       	ldd	r24, Y+3	; 0x03
    1104:	9c 81       	ldd	r25, Y+4	; 0x04
    1106:	81 30       	cpi	r24, 0x01	; 1
    1108:	91 05       	cpc	r25, r1
    110a:	a1 f0       	breq	.+40     	; 0x1134 <DcMotor_Rotate+0x52>
    110c:	2b 81       	ldd	r18, Y+3	; 0x03
    110e:	3c 81       	ldd	r19, Y+4	; 0x04
    1110:	22 30       	cpi	r18, 0x02	; 2
    1112:	31 05       	cpc	r19, r1
    1114:	d1 f0       	breq	.+52     	; 0x114a <DcMotor_Rotate+0x68>
    1116:	8b 81       	ldd	r24, Y+3	; 0x03
    1118:	9c 81       	ldd	r25, Y+4	; 0x04
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	01 f5       	brne	.+64     	; 0x115e <DcMotor_Rotate+0x7c>
	{
	case CW:
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_HIGH);
    111e:	81 e0       	ldi	r24, 0x01	; 1
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	41 e0       	ldi	r20, 0x01	; 1
    1124:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    1128:	81 e0       	ldi	r24, 0x01	; 1
    112a:	61 e0       	ldi	r22, 0x01	; 1
    112c:	40 e0       	ldi	r20, 0x00	; 0
    112e:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    1132:	15 c0       	rjmp	.+42     	; 0x115e <DcMotor_Rotate+0x7c>
		break;

	case A_CW:
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    1134:	81 e0       	ldi	r24, 0x01	; 1
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	40 e0       	ldi	r20, 0x00	; 0
    113a:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_HIGH);
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	61 e0       	ldi	r22, 0x01	; 1
    1142:	41 e0       	ldi	r20, 0x01	; 1
    1144:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    1148:	0a c0       	rjmp	.+20     	; 0x115e <DcMotor_Rotate+0x7c>
		break;

	case STOP:
		GPIO_writePin(IN1_PORT_ID, IN1_PIN_ID, LOGIC_LOW);
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	40 e0       	ldi	r20, 0x00	; 0
    1150:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
		GPIO_writePin(IN2_PORT_ID, IN2_PIN_ID, LOGIC_LOW);
    1154:	81 e0       	ldi	r24, 0x01	; 1
    1156:	61 e0       	ldi	r22, 0x01	; 1
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
		break;
	}
}
    115e:	0f 90       	pop	r0
    1160:	0f 90       	pop	r0
    1162:	0f 90       	pop	r0
    1164:	0f 90       	pop	r0
    1166:	cf 91       	pop	r28
    1168:	df 91       	pop	r29
    116a:	08 95       	ret

0000116c <Timer0_PWM_Init>:
 * F_PWM=(F_CPU)/(256*N) = (10^6)/(256*8) = 500Hz
 * Duty Cycle can be changed by updating the value
 * in The Compare Register
 */
void Timer0_PWM_Init(uint8 set_duty_cycle)
{
    116c:	df 93       	push	r29
    116e:	cf 93       	push	r28
    1170:	0f 92       	push	r0
    1172:	cd b7       	in	r28, 0x3d	; 61
    1174:	de b7       	in	r29, 0x3e	; 62
    1176:	89 83       	std	Y+1, r24	; 0x01

	OCR0= (uint8)(((uint16)(set_duty_cycle*255))/(100));  /* Set Compare Value */
    1178:	ec e5       	ldi	r30, 0x5C	; 92
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	89 81       	ldd	r24, Y+1	; 0x01
    117e:	48 2f       	mov	r20, r24
    1180:	50 e0       	ldi	r21, 0x00	; 0
    1182:	ca 01       	movw	r24, r20
    1184:	9c 01       	movw	r18, r24
    1186:	22 0f       	add	r18, r18
    1188:	33 1f       	adc	r19, r19
    118a:	c9 01       	movw	r24, r18
    118c:	96 95       	lsr	r25
    118e:	98 2f       	mov	r25, r24
    1190:	88 27       	eor	r24, r24
    1192:	97 95       	ror	r25
    1194:	87 95       	ror	r24
    1196:	82 1b       	sub	r24, r18
    1198:	93 0b       	sbc	r25, r19
    119a:	84 0f       	add	r24, r20
    119c:	95 1f       	adc	r25, r21
    119e:	24 e6       	ldi	r18, 0x64	; 100
    11a0:	30 e0       	ldi	r19, 0x00	; 0
    11a2:	b9 01       	movw	r22, r18
    11a4:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__udivmodhi4>
    11a8:	cb 01       	movw	r24, r22
    11aa:	80 83       	st	Z, r24

	DDRB  = DDRB | (1<<PB3); // Configure PB3/OC0 as output pin --> pin where the PWM signal is generated from MC
    11ac:	a7 e3       	ldi	r26, 0x37	; 55
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e7 e3       	ldi	r30, 0x37	; 55
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	88 60       	ori	r24, 0x08	; 8
    11b8:	8c 93       	st	X, r24

	/* to make PWM mode and non-inverting mode
		 *  and prescalar of 8 */

	TCCR0=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS01);
    11ba:	e3 e5       	ldi	r30, 0x53	; 83
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	8a e6       	ldi	r24, 0x6A	; 106
    11c0:	80 83       	st	Z, r24
	TCNT0=0; // Set Timer Initial Value to 0
    11c2:	e2 e5       	ldi	r30, 0x52	; 82
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 82       	st	Z, r1
}
    11c8:	0f 90       	pop	r0
    11ca:	cf 91       	pop	r28
    11cc:	df 91       	pop	r29
    11ce:	08 95       	ret

000011d0 <__vector_16>:
/*******************************************************************************
 *                          ISR's Definitions                                  *
 *******************************************************************************/

ISR(ADC_vect)
{
    11d0:	1f 92       	push	r1
    11d2:	0f 92       	push	r0
    11d4:	0f b6       	in	r0, 0x3f	; 63
    11d6:	0f 92       	push	r0
    11d8:	11 24       	eor	r1, r1
    11da:	8f 93       	push	r24
    11dc:	9f 93       	push	r25
    11de:	ef 93       	push	r30
    11e0:	ff 93       	push	r31
    11e2:	df 93       	push	r29
    11e4:	cf 93       	push	r28
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
	/* Read ADC Data after conversion complete */
	g_adcResult = ADC;
    11ea:	e4 e2       	ldi	r30, 0x24	; 36
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	91 81       	ldd	r25, Z+1	; 0x01
    11f2:	90 93 75 00 	sts	0x0075, r25
    11f6:	80 93 74 00 	sts	0x0074, r24
}
    11fa:	cf 91       	pop	r28
    11fc:	df 91       	pop	r29
    11fe:	ff 91       	pop	r31
    1200:	ef 91       	pop	r30
    1202:	9f 91       	pop	r25
    1204:	8f 91       	pop	r24
    1206:	0f 90       	pop	r0
    1208:	0f be       	out	0x3f, r0	; 63
    120a:	0f 90       	pop	r0
    120c:	1f 90       	pop	r1
    120e:	18 95       	reti

00001210 <ADC_init>:
/*******************************************************************************
 *                          Functions Definitions                              *
 *******************************************************************************/

void ADC_init(const ADC_ConfigType * Config_Ptr)
{
    1210:	df 93       	push	r29
    1212:	cf 93       	push	r28
    1214:	00 d0       	rcall	.+0      	; 0x1216 <ADC_init+0x6>
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	9a 83       	std	Y+2, r25	; 0x02
    121c:	89 83       	std	Y+1, r24	; 0x01
	/* ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = 0;
    121e:	e7 e2       	ldi	r30, 0x27	; 39
    1220:	f0 e0       	ldi	r31, 0x00	; 0
    1222:	10 82       	st	Z, r1
	ADMUX |= (Config_Ptr->ref_volt << 6);
    1224:	a7 e2       	ldi	r26, 0x27	; 39
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e7 e2       	ldi	r30, 0x27	; 39
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	28 2f       	mov	r18, r24
    1230:	e9 81       	ldd	r30, Y+1	; 0x01
    1232:	fa 81       	ldd	r31, Y+2	; 0x02
    1234:	80 81       	ld	r24, Z
    1236:	88 2f       	mov	r24, r24
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	00 24       	eor	r0, r0
    123c:	96 95       	lsr	r25
    123e:	87 95       	ror	r24
    1240:	07 94       	ror	r0
    1242:	96 95       	lsr	r25
    1244:	87 95       	ror	r24
    1246:	07 94       	ror	r0
    1248:	98 2f       	mov	r25, r24
    124a:	80 2d       	mov	r24, r0
    124c:	82 2b       	or	r24, r18
    124e:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Enable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADEN);
    1250:	e6 e2       	ldi	r30, 0x26	; 38
    1252:	f0 e0       	ldi	r31, 0x00	; 0
    1254:	80 e8       	ldi	r24, 0x80	; 128
    1256:	80 83       	st	Z, r24
	ADCSRA |= (Config_Ptr->prescaler);
    1258:	a6 e2       	ldi	r26, 0x26	; 38
    125a:	b0 e0       	ldi	r27, 0x00	; 0
    125c:	e6 e2       	ldi	r30, 0x26	; 38
    125e:	f0 e0       	ldi	r31, 0x00	; 0
    1260:	90 81       	ld	r25, Z
    1262:	e9 81       	ldd	r30, Y+1	; 0x01
    1264:	fa 81       	ldd	r31, Y+2	; 0x02
    1266:	81 81       	ldd	r24, Z+1	; 0x01
    1268:	89 2b       	or	r24, r25
    126a:	8c 93       	st	X, r24

	/* internal reference voltage 2.56 voltage and prescaler F_CPU/8 */
}
    126c:	0f 90       	pop	r0
    126e:	0f 90       	pop	r0
    1270:	cf 91       	pop	r28
    1272:	df 91       	pop	r29
    1274:	08 95       	ret

00001276 <ADC_readChannel>:

uint16 ADC_readChannel(uint8 channel_num)
{
    1276:	df 93       	push	r29
    1278:	cf 93       	push	r28
    127a:	0f 92       	push	r0
    127c:	cd b7       	in	r28, 0x3d	; 61
    127e:	de b7       	in	r29, 0x3e	; 62
    1280:	89 83       	std	Y+1, r24	; 0x01
	channel_num &= 0x07; /* Input channel number must be from 0 --> 7 */
    1282:	89 81       	ldd	r24, Y+1	; 0x01
    1284:	87 70       	andi	r24, 0x07	; 7
    1286:	89 83       	std	Y+1, r24	; 0x01
	ADMUX &= 0xE0; /* Clear first 5 bits in the ADMUX (channel number MUX4:0 bits) before set the required channel */
    1288:	a7 e2       	ldi	r26, 0x27	; 39
    128a:	b0 e0       	ldi	r27, 0x00	; 0
    128c:	e7 e2       	ldi	r30, 0x27	; 39
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	80 81       	ld	r24, Z
    1292:	80 7e       	andi	r24, 0xE0	; 224
    1294:	8c 93       	st	X, r24
	ADMUX |= channel_num; /* Choose the correct channel by setting the channel number in MUX4:0 bits */
    1296:	a7 e2       	ldi	r26, 0x27	; 39
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	e7 e2       	ldi	r30, 0x27	; 39
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	90 81       	ld	r25, Z
    12a0:	89 81       	ldd	r24, Y+1	; 0x01
    12a2:	89 2b       	or	r24, r25
    12a4:	8c 93       	st	X, r24
	SET_BIT(ADCSRA,ADSC); /* Start conversion write '1' to ADSC */
    12a6:	a6 e2       	ldi	r26, 0x26	; 38
    12a8:	b0 e0       	ldi	r27, 0x00	; 0
    12aa:	e6 e2       	ldi	r30, 0x26	; 38
    12ac:	f0 e0       	ldi	r31, 0x00	; 0
    12ae:	80 81       	ld	r24, Z
    12b0:	80 64       	ori	r24, 0x40	; 64
    12b2:	8c 93       	st	X, r24
	while(BIT_IS_CLEAR(ADCSRA,ADIF)); /* Wait for conversion to complete, ADIF becomes '1' */
    12b4:	e6 e2       	ldi	r30, 0x26	; 38
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	88 2f       	mov	r24, r24
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	80 71       	andi	r24, 0x10	; 16
    12c0:	90 70       	andi	r25, 0x00	; 0
    12c2:	00 97       	sbiw	r24, 0x00	; 0
    12c4:	b9 f3       	breq	.-18     	; 0x12b4 <ADC_readChannel+0x3e>
	SET_BIT(ADCSRA,ADIF); /* Clear ADIF by write '1' to it :) */
    12c6:	a6 e2       	ldi	r26, 0x26	; 38
    12c8:	b0 e0       	ldi	r27, 0x00	; 0
    12ca:	e6 e2       	ldi	r30, 0x26	; 38
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	80 81       	ld	r24, Z
    12d0:	80 61       	ori	r24, 0x10	; 16
    12d2:	8c 93       	st	X, r24
	return ADC; /* Read the digital value from the data register */
    12d4:	e4 e2       	ldi	r30, 0x24	; 36
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	91 81       	ldd	r25, Z+1	; 0x01
}
    12dc:	0f 90       	pop	r0
    12de:	cf 91       	pop	r28
    12e0:	df 91       	pop	r29
    12e2:	08 95       	ret

000012e4 <Buzzer_init>:

/*
 * Description:
 * Initializes the Buzzer by configuring the GPIO pin as an output and turning off the buzzer.
 */
void Buzzer_init() {
    12e4:	df 93       	push	r29
    12e6:	cf 93       	push	r28
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
	/* Set the direction of the buzzer pin as an output through the GPIO driver */
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    12ec:	82 e0       	ldi	r24, 0x02	; 2
    12ee:	67 e0       	ldi	r22, 0x07	; 7
    12f0:	41 e0       	ldi	r20, 0x01	; 1
    12f2:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_setupPinDirection>

    /* Turn off the buzzer through the GPIO */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    12f6:	82 e0       	ldi	r24, 0x02	; 2
    12f8:	67 e0       	ldi	r22, 0x07	; 7
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
}
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <Buzzer_on>:

/*
 * Description:
 * Turns on the buzzer by setting the corresponding GPIO pin to a high logic level.
 */
void Buzzer_on() {
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
	/* Enable the buzzer through the GPIO */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_HIGH);
    130e:	82 e0       	ldi	r24, 0x02	; 2
    1310:	67 e0       	ldi	r22, 0x07	; 7
    1312:	41 e0       	ldi	r20, 0x01	; 1
    1314:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
}
    1318:	cf 91       	pop	r28
    131a:	df 91       	pop	r29
    131c:	08 95       	ret

0000131e <Buzzer_off>:

/*
 * Description:
 * Turns off the buzzer by setting the corresponding GPIO pin to a low logic level.
 */
void Buzzer_off() {
    131e:	df 93       	push	r29
    1320:	cf 93       	push	r28
    1322:	cd b7       	in	r28, 0x3d	; 61
    1324:	de b7       	in	r29, 0x3e	; 62
    /* Disable the buzzer through the GPIO */
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, LOGIC_LOW);
    1326:	82 e0       	ldi	r24, 0x02	; 2
    1328:	67 e0       	ldi	r22, 0x07	; 7
    132a:	40 e0       	ldi	r20, 0x00	; 0
    132c:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
}
    1330:	cf 91       	pop	r28
    1332:	df 91       	pop	r29
    1334:	08 95       	ret

00001336 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1336:	df 93       	push	r29
    1338:	cf 93       	push	r28
    133a:	00 d0       	rcall	.+0      	; 0x133c <EEPROM_writeByte+0x6>
    133c:	00 d0       	rcall	.+0      	; 0x133e <EEPROM_writeByte+0x8>
    133e:	cd b7       	in	r28, 0x3d	; 61
    1340:	de b7       	in	r29, 0x3e	; 62
    1342:	9a 83       	std	Y+2, r25	; 0x02
    1344:	89 83       	std	Y+1, r24	; 0x01
    1346:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1348:	0e 94 d6 14 	call	0x29ac	; 0x29ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    134c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1350:	88 30       	cpi	r24, 0x08	; 8
    1352:	11 f0       	breq	.+4      	; 0x1358 <EEPROM_writeByte+0x22>
        return ERROR;
    1354:	1c 82       	std	Y+4, r1	; 0x04
    1356:	28 c0       	rjmp	.+80     	; 0x13a8 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1358:	89 81       	ldd	r24, Y+1	; 0x01
    135a:	9a 81       	ldd	r25, Y+2	; 0x02
    135c:	80 70       	andi	r24, 0x00	; 0
    135e:	97 70       	andi	r25, 0x07	; 7
    1360:	88 0f       	add	r24, r24
    1362:	89 2f       	mov	r24, r25
    1364:	88 1f       	adc	r24, r24
    1366:	99 0b       	sbc	r25, r25
    1368:	91 95       	neg	r25
    136a:	80 6a       	ori	r24, 0xA0	; 160
    136c:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1370:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1374:	88 31       	cpi	r24, 0x18	; 24
    1376:	11 f0       	breq	.+4      	; 0x137c <EEPROM_writeByte+0x46>
        return ERROR; 
    1378:	1c 82       	std	Y+4, r1	; 0x04
    137a:	16 c0       	rjmp	.+44     	; 0x13a8 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    137c:	89 81       	ldd	r24, Y+1	; 0x01
    137e:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1382:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1386:	88 32       	cpi	r24, 0x28	; 40
    1388:	11 f0       	breq	.+4      	; 0x138e <EEPROM_writeByte+0x58>
        return ERROR;
    138a:	1c 82       	std	Y+4, r1	; 0x04
    138c:	0d c0       	rjmp	.+26     	; 0x13a8 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    138e:	8b 81       	ldd	r24, Y+3	; 0x03
    1390:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1394:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1398:	88 32       	cpi	r24, 0x28	; 40
    139a:	11 f0       	breq	.+4      	; 0x13a0 <EEPROM_writeByte+0x6a>
        return ERROR;
    139c:	1c 82       	std	Y+4, r1	; 0x04
    139e:	04 c0       	rjmp	.+8      	; 0x13a8 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    13a0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_stop>
	
    return SUCCESS;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	8c 83       	std	Y+4, r24	; 0x04
    13a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    13aa:	0f 90       	pop	r0
    13ac:	0f 90       	pop	r0
    13ae:	0f 90       	pop	r0
    13b0:	0f 90       	pop	r0
    13b2:	cf 91       	pop	r28
    13b4:	df 91       	pop	r29
    13b6:	08 95       	ret

000013b8 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	00 d0       	rcall	.+0      	; 0x13be <EEPROM_readByte+0x6>
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <EEPROM_readByte+0x8>
    13c0:	0f 92       	push	r0
    13c2:	cd b7       	in	r28, 0x3d	; 61
    13c4:	de b7       	in	r29, 0x3e	; 62
    13c6:	9a 83       	std	Y+2, r25	; 0x02
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	7c 83       	std	Y+4, r23	; 0x04
    13cc:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    13ce:	0e 94 d6 14 	call	0x29ac	; 0x29ac <TWI_start>
    if (TWI_getStatus() != TWI_START)
    13d2:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    13d6:	88 30       	cpi	r24, 0x08	; 8
    13d8:	11 f0       	breq	.+4      	; 0x13de <EEPROM_readByte+0x26>
        return ERROR;
    13da:	1d 82       	std	Y+5, r1	; 0x05
    13dc:	44 c0       	rjmp	.+136    	; 0x1466 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    13de:	89 81       	ldd	r24, Y+1	; 0x01
    13e0:	9a 81       	ldd	r25, Y+2	; 0x02
    13e2:	80 70       	andi	r24, 0x00	; 0
    13e4:	97 70       	andi	r25, 0x07	; 7
    13e6:	88 0f       	add	r24, r24
    13e8:	89 2f       	mov	r24, r25
    13ea:	88 1f       	adc	r24, r24
    13ec:	99 0b       	sbc	r25, r25
    13ee:	91 95       	neg	r25
    13f0:	80 6a       	ori	r24, 0xA0	; 160
    13f2:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    13f6:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    13fa:	88 31       	cpi	r24, 0x18	; 24
    13fc:	11 f0       	breq	.+4      	; 0x1402 <EEPROM_readByte+0x4a>
        return ERROR;
    13fe:	1d 82       	std	Y+5, r1	; 0x05
    1400:	32 c0       	rjmp	.+100    	; 0x1466 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1402:	89 81       	ldd	r24, Y+1	; 0x01
    1404:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1408:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    140c:	88 32       	cpi	r24, 0x28	; 40
    140e:	11 f0       	breq	.+4      	; 0x1414 <EEPROM_readByte+0x5c>
        return ERROR;
    1410:	1d 82       	std	Y+5, r1	; 0x05
    1412:	29 c0       	rjmp	.+82     	; 0x1466 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1414:	0e 94 d6 14 	call	0x29ac	; 0x29ac <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1418:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    141c:	80 31       	cpi	r24, 0x10	; 16
    141e:	11 f0       	breq	.+4      	; 0x1424 <EEPROM_readByte+0x6c>
        return ERROR;
    1420:	1d 82       	std	Y+5, r1	; 0x05
    1422:	21 c0       	rjmp	.+66     	; 0x1466 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1424:	89 81       	ldd	r24, Y+1	; 0x01
    1426:	9a 81       	ldd	r25, Y+2	; 0x02
    1428:	80 70       	andi	r24, 0x00	; 0
    142a:	97 70       	andi	r25, 0x07	; 7
    142c:	88 0f       	add	r24, r24
    142e:	89 2f       	mov	r24, r25
    1430:	88 1f       	adc	r24, r24
    1432:	99 0b       	sbc	r25, r25
    1434:	91 95       	neg	r25
    1436:	81 6a       	ori	r24, 0xA1	; 161
    1438:	0e 94 f1 14 	call	0x29e2	; 0x29e2 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    143c:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1440:	80 34       	cpi	r24, 0x40	; 64
    1442:	11 f0       	breq	.+4      	; 0x1448 <EEPROM_readByte+0x90>
        return ERROR;
    1444:	1d 82       	std	Y+5, r1	; 0x05
    1446:	0f c0       	rjmp	.+30     	; 0x1466 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1448:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <TWI_readByteWithNACK>
    144c:	eb 81       	ldd	r30, Y+3	; 0x03
    144e:	fc 81       	ldd	r31, Y+4	; 0x04
    1450:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1452:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <TWI_getStatus>
    1456:	88 35       	cpi	r24, 0x58	; 88
    1458:	11 f0       	breq	.+4      	; 0x145e <EEPROM_readByte+0xa6>
        return ERROR;
    145a:	1d 82       	std	Y+5, r1	; 0x05
    145c:	04 c0       	rjmp	.+8      	; 0x1466 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    145e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <TWI_stop>

    return SUCCESS;
    1462:	81 e0       	ldi	r24, 0x01	; 1
    1464:	8d 83       	std	Y+5, r24	; 0x05
    1466:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1468:	0f 90       	pop	r0
    146a:	0f 90       	pop	r0
    146c:	0f 90       	pop	r0
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <GPIO_setupPinDirection+0x6>
    147e:	00 d0       	rcall	.+0      	; 0x1480 <GPIO_setupPinDirection+0x8>
    1480:	0f 92       	push	r0
    1482:	cd b7       	in	r28, 0x3d	; 61
    1484:	de b7       	in	r29, 0x3e	; 62
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	6a 83       	std	Y+2, r22	; 0x02
    148a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    148c:	8a 81       	ldd	r24, Y+2	; 0x02
    148e:	88 30       	cpi	r24, 0x08	; 8
    1490:	08 f0       	brcs	.+2      	; 0x1494 <GPIO_setupPinDirection+0x1c>
    1492:	d5 c0       	rjmp	.+426    	; 0x163e <GPIO_setupPinDirection+0x1c6>
    1494:	89 81       	ldd	r24, Y+1	; 0x01
    1496:	84 30       	cpi	r24, 0x04	; 4
    1498:	08 f0       	brcs	.+2      	; 0x149c <GPIO_setupPinDirection+0x24>
    149a:	d1 c0       	rjmp	.+418    	; 0x163e <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    149c:	89 81       	ldd	r24, Y+1	; 0x01
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	8c 81       	ldd	r24, Y+4	; 0x04
    14a8:	9d 81       	ldd	r25, Y+5	; 0x05
    14aa:	81 30       	cpi	r24, 0x01	; 1
    14ac:	91 05       	cpc	r25, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <GPIO_setupPinDirection+0x3a>
    14b0:	43 c0       	rjmp	.+134    	; 0x1538 <GPIO_setupPinDirection+0xc0>
    14b2:	2c 81       	ldd	r18, Y+4	; 0x04
    14b4:	3d 81       	ldd	r19, Y+5	; 0x05
    14b6:	22 30       	cpi	r18, 0x02	; 2
    14b8:	31 05       	cpc	r19, r1
    14ba:	2c f4       	brge	.+10     	; 0x14c6 <GPIO_setupPinDirection+0x4e>
    14bc:	8c 81       	ldd	r24, Y+4	; 0x04
    14be:	9d 81       	ldd	r25, Y+5	; 0x05
    14c0:	00 97       	sbiw	r24, 0x00	; 0
    14c2:	71 f0       	breq	.+28     	; 0x14e0 <GPIO_setupPinDirection+0x68>
    14c4:	bc c0       	rjmp	.+376    	; 0x163e <GPIO_setupPinDirection+0x1c6>
    14c6:	2c 81       	ldd	r18, Y+4	; 0x04
    14c8:	3d 81       	ldd	r19, Y+5	; 0x05
    14ca:	22 30       	cpi	r18, 0x02	; 2
    14cc:	31 05       	cpc	r19, r1
    14ce:	09 f4       	brne	.+2      	; 0x14d2 <GPIO_setupPinDirection+0x5a>
    14d0:	5f c0       	rjmp	.+190    	; 0x1590 <GPIO_setupPinDirection+0x118>
    14d2:	8c 81       	ldd	r24, Y+4	; 0x04
    14d4:	9d 81       	ldd	r25, Y+5	; 0x05
    14d6:	83 30       	cpi	r24, 0x03	; 3
    14d8:	91 05       	cpc	r25, r1
    14da:	09 f4       	brne	.+2      	; 0x14de <GPIO_setupPinDirection+0x66>
    14dc:	85 c0       	rjmp	.+266    	; 0x15e8 <GPIO_setupPinDirection+0x170>
    14de:	af c0       	rjmp	.+350    	; 0x163e <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    14e0:	8b 81       	ldd	r24, Y+3	; 0x03
    14e2:	81 30       	cpi	r24, 0x01	; 1
    14e4:	a1 f4       	brne	.+40     	; 0x150e <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    14e6:	aa e3       	ldi	r26, 0x3A	; 58
    14e8:	b0 e0       	ldi	r27, 0x00	; 0
    14ea:	ea e3       	ldi	r30, 0x3A	; 58
    14ec:	f0 e0       	ldi	r31, 0x00	; 0
    14ee:	80 81       	ld	r24, Z
    14f0:	48 2f       	mov	r20, r24
    14f2:	8a 81       	ldd	r24, Y+2	; 0x02
    14f4:	28 2f       	mov	r18, r24
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	81 e0       	ldi	r24, 0x01	; 1
    14fa:	90 e0       	ldi	r25, 0x00	; 0
    14fc:	02 2e       	mov	r0, r18
    14fe:	02 c0       	rjmp	.+4      	; 0x1504 <GPIO_setupPinDirection+0x8c>
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	0a 94       	dec	r0
    1506:	e2 f7       	brpl	.-8      	; 0x1500 <GPIO_setupPinDirection+0x88>
    1508:	84 2b       	or	r24, r20
    150a:	8c 93       	st	X, r24
    150c:	98 c0       	rjmp	.+304    	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    150e:	aa e3       	ldi	r26, 0x3A	; 58
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	ea e3       	ldi	r30, 0x3A	; 58
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	48 2f       	mov	r20, r24
    151a:	8a 81       	ldd	r24, Y+2	; 0x02
    151c:	28 2f       	mov	r18, r24
    151e:	30 e0       	ldi	r19, 0x00	; 0
    1520:	81 e0       	ldi	r24, 0x01	; 1
    1522:	90 e0       	ldi	r25, 0x00	; 0
    1524:	02 2e       	mov	r0, r18
    1526:	02 c0       	rjmp	.+4      	; 0x152c <GPIO_setupPinDirection+0xb4>
    1528:	88 0f       	add	r24, r24
    152a:	99 1f       	adc	r25, r25
    152c:	0a 94       	dec	r0
    152e:	e2 f7       	brpl	.-8      	; 0x1528 <GPIO_setupPinDirection+0xb0>
    1530:	80 95       	com	r24
    1532:	84 23       	and	r24, r20
    1534:	8c 93       	st	X, r24
    1536:	83 c0       	rjmp	.+262    	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1538:	8b 81       	ldd	r24, Y+3	; 0x03
    153a:	81 30       	cpi	r24, 0x01	; 1
    153c:	a1 f4       	brne	.+40     	; 0x1566 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    153e:	a7 e3       	ldi	r26, 0x37	; 55
    1540:	b0 e0       	ldi	r27, 0x00	; 0
    1542:	e7 e3       	ldi	r30, 0x37	; 55
    1544:	f0 e0       	ldi	r31, 0x00	; 0
    1546:	80 81       	ld	r24, Z
    1548:	48 2f       	mov	r20, r24
    154a:	8a 81       	ldd	r24, Y+2	; 0x02
    154c:	28 2f       	mov	r18, r24
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	02 2e       	mov	r0, r18
    1556:	02 c0       	rjmp	.+4      	; 0x155c <GPIO_setupPinDirection+0xe4>
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	0a 94       	dec	r0
    155e:	e2 f7       	brpl	.-8      	; 0x1558 <GPIO_setupPinDirection+0xe0>
    1560:	84 2b       	or	r24, r20
    1562:	8c 93       	st	X, r24
    1564:	6c c0       	rjmp	.+216    	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1566:	a7 e3       	ldi	r26, 0x37	; 55
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e7 e3       	ldi	r30, 0x37	; 55
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	48 2f       	mov	r20, r24
    1572:	8a 81       	ldd	r24, Y+2	; 0x02
    1574:	28 2f       	mov	r18, r24
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	81 e0       	ldi	r24, 0x01	; 1
    157a:	90 e0       	ldi	r25, 0x00	; 0
    157c:	02 2e       	mov	r0, r18
    157e:	02 c0       	rjmp	.+4      	; 0x1584 <GPIO_setupPinDirection+0x10c>
    1580:	88 0f       	add	r24, r24
    1582:	99 1f       	adc	r25, r25
    1584:	0a 94       	dec	r0
    1586:	e2 f7       	brpl	.-8      	; 0x1580 <GPIO_setupPinDirection+0x108>
    1588:	80 95       	com	r24
    158a:	84 23       	and	r24, r20
    158c:	8c 93       	st	X, r24
    158e:	57 c0       	rjmp	.+174    	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1590:	8b 81       	ldd	r24, Y+3	; 0x03
    1592:	81 30       	cpi	r24, 0x01	; 1
    1594:	a1 f4       	brne	.+40     	; 0x15be <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1596:	a4 e3       	ldi	r26, 0x34	; 52
    1598:	b0 e0       	ldi	r27, 0x00	; 0
    159a:	e4 e3       	ldi	r30, 0x34	; 52
    159c:	f0 e0       	ldi	r31, 0x00	; 0
    159e:	80 81       	ld	r24, Z
    15a0:	48 2f       	mov	r20, r24
    15a2:	8a 81       	ldd	r24, Y+2	; 0x02
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	81 e0       	ldi	r24, 0x01	; 1
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	02 2e       	mov	r0, r18
    15ae:	02 c0       	rjmp	.+4      	; 0x15b4 <GPIO_setupPinDirection+0x13c>
    15b0:	88 0f       	add	r24, r24
    15b2:	99 1f       	adc	r25, r25
    15b4:	0a 94       	dec	r0
    15b6:	e2 f7       	brpl	.-8      	; 0x15b0 <GPIO_setupPinDirection+0x138>
    15b8:	84 2b       	or	r24, r20
    15ba:	8c 93       	st	X, r24
    15bc:	40 c0       	rjmp	.+128    	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    15be:	a4 e3       	ldi	r26, 0x34	; 52
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	e4 e3       	ldi	r30, 0x34	; 52
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	48 2f       	mov	r20, r24
    15ca:	8a 81       	ldd	r24, Y+2	; 0x02
    15cc:	28 2f       	mov	r18, r24
    15ce:	30 e0       	ldi	r19, 0x00	; 0
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	90 e0       	ldi	r25, 0x00	; 0
    15d4:	02 2e       	mov	r0, r18
    15d6:	02 c0       	rjmp	.+4      	; 0x15dc <GPIO_setupPinDirection+0x164>
    15d8:	88 0f       	add	r24, r24
    15da:	99 1f       	adc	r25, r25
    15dc:	0a 94       	dec	r0
    15de:	e2 f7       	brpl	.-8      	; 0x15d8 <GPIO_setupPinDirection+0x160>
    15e0:	80 95       	com	r24
    15e2:	84 23       	and	r24, r20
    15e4:	8c 93       	st	X, r24
    15e6:	2b c0       	rjmp	.+86     	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    15e8:	8b 81       	ldd	r24, Y+3	; 0x03
    15ea:	81 30       	cpi	r24, 0x01	; 1
    15ec:	a1 f4       	brne	.+40     	; 0x1616 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    15ee:	a1 e3       	ldi	r26, 0x31	; 49
    15f0:	b0 e0       	ldi	r27, 0x00	; 0
    15f2:	e1 e3       	ldi	r30, 0x31	; 49
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	80 81       	ld	r24, Z
    15f8:	48 2f       	mov	r20, r24
    15fa:	8a 81       	ldd	r24, Y+2	; 0x02
    15fc:	28 2f       	mov	r18, r24
    15fe:	30 e0       	ldi	r19, 0x00	; 0
    1600:	81 e0       	ldi	r24, 0x01	; 1
    1602:	90 e0       	ldi	r25, 0x00	; 0
    1604:	02 2e       	mov	r0, r18
    1606:	02 c0       	rjmp	.+4      	; 0x160c <GPIO_setupPinDirection+0x194>
    1608:	88 0f       	add	r24, r24
    160a:	99 1f       	adc	r25, r25
    160c:	0a 94       	dec	r0
    160e:	e2 f7       	brpl	.-8      	; 0x1608 <GPIO_setupPinDirection+0x190>
    1610:	84 2b       	or	r24, r20
    1612:	8c 93       	st	X, r24
    1614:	14 c0       	rjmp	.+40     	; 0x163e <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1616:	a1 e3       	ldi	r26, 0x31	; 49
    1618:	b0 e0       	ldi	r27, 0x00	; 0
    161a:	e1 e3       	ldi	r30, 0x31	; 49
    161c:	f0 e0       	ldi	r31, 0x00	; 0
    161e:	80 81       	ld	r24, Z
    1620:	48 2f       	mov	r20, r24
    1622:	8a 81       	ldd	r24, Y+2	; 0x02
    1624:	28 2f       	mov	r18, r24
    1626:	30 e0       	ldi	r19, 0x00	; 0
    1628:	81 e0       	ldi	r24, 0x01	; 1
    162a:	90 e0       	ldi	r25, 0x00	; 0
    162c:	02 2e       	mov	r0, r18
    162e:	02 c0       	rjmp	.+4      	; 0x1634 <GPIO_setupPinDirection+0x1bc>
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	0a 94       	dec	r0
    1636:	e2 f7       	brpl	.-8      	; 0x1630 <GPIO_setupPinDirection+0x1b8>
    1638:	80 95       	com	r24
    163a:	84 23       	and	r24, r20
    163c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    163e:	0f 90       	pop	r0
    1640:	0f 90       	pop	r0
    1642:	0f 90       	pop	r0
    1644:	0f 90       	pop	r0
    1646:	0f 90       	pop	r0
    1648:	cf 91       	pop	r28
    164a:	df 91       	pop	r29
    164c:	08 95       	ret

0000164e <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    164e:	df 93       	push	r29
    1650:	cf 93       	push	r28
    1652:	00 d0       	rcall	.+0      	; 0x1654 <GPIO_writePin+0x6>
    1654:	00 d0       	rcall	.+0      	; 0x1656 <GPIO_writePin+0x8>
    1656:	0f 92       	push	r0
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	6a 83       	std	Y+2, r22	; 0x02
    1660:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1662:	8a 81       	ldd	r24, Y+2	; 0x02
    1664:	88 30       	cpi	r24, 0x08	; 8
    1666:	08 f0       	brcs	.+2      	; 0x166a <GPIO_writePin+0x1c>
    1668:	d5 c0       	rjmp	.+426    	; 0x1814 <GPIO_writePin+0x1c6>
    166a:	89 81       	ldd	r24, Y+1	; 0x01
    166c:	84 30       	cpi	r24, 0x04	; 4
    166e:	08 f0       	brcs	.+2      	; 0x1672 <GPIO_writePin+0x24>
    1670:	d1 c0       	rjmp	.+418    	; 0x1814 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1672:	89 81       	ldd	r24, Y+1	; 0x01
    1674:	28 2f       	mov	r18, r24
    1676:	30 e0       	ldi	r19, 0x00	; 0
    1678:	3d 83       	std	Y+5, r19	; 0x05
    167a:	2c 83       	std	Y+4, r18	; 0x04
    167c:	8c 81       	ldd	r24, Y+4	; 0x04
    167e:	9d 81       	ldd	r25, Y+5	; 0x05
    1680:	81 30       	cpi	r24, 0x01	; 1
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <GPIO_writePin+0x3a>
    1686:	43 c0       	rjmp	.+134    	; 0x170e <GPIO_writePin+0xc0>
    1688:	2c 81       	ldd	r18, Y+4	; 0x04
    168a:	3d 81       	ldd	r19, Y+5	; 0x05
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	2c f4       	brge	.+10     	; 0x169c <GPIO_writePin+0x4e>
    1692:	8c 81       	ldd	r24, Y+4	; 0x04
    1694:	9d 81       	ldd	r25, Y+5	; 0x05
    1696:	00 97       	sbiw	r24, 0x00	; 0
    1698:	71 f0       	breq	.+28     	; 0x16b6 <GPIO_writePin+0x68>
    169a:	bc c0       	rjmp	.+376    	; 0x1814 <GPIO_writePin+0x1c6>
    169c:	2c 81       	ldd	r18, Y+4	; 0x04
    169e:	3d 81       	ldd	r19, Y+5	; 0x05
    16a0:	22 30       	cpi	r18, 0x02	; 2
    16a2:	31 05       	cpc	r19, r1
    16a4:	09 f4       	brne	.+2      	; 0x16a8 <GPIO_writePin+0x5a>
    16a6:	5f c0       	rjmp	.+190    	; 0x1766 <GPIO_writePin+0x118>
    16a8:	8c 81       	ldd	r24, Y+4	; 0x04
    16aa:	9d 81       	ldd	r25, Y+5	; 0x05
    16ac:	83 30       	cpi	r24, 0x03	; 3
    16ae:	91 05       	cpc	r25, r1
    16b0:	09 f4       	brne	.+2      	; 0x16b4 <GPIO_writePin+0x66>
    16b2:	85 c0       	rjmp	.+266    	; 0x17be <GPIO_writePin+0x170>
    16b4:	af c0       	rjmp	.+350    	; 0x1814 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    16b6:	8b 81       	ldd	r24, Y+3	; 0x03
    16b8:	81 30       	cpi	r24, 0x01	; 1
    16ba:	a1 f4       	brne	.+40     	; 0x16e4 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    16bc:	ab e3       	ldi	r26, 0x3B	; 59
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	eb e3       	ldi	r30, 0x3B	; 59
    16c2:	f0 e0       	ldi	r31, 0x00	; 0
    16c4:	80 81       	ld	r24, Z
    16c6:	48 2f       	mov	r20, r24
    16c8:	8a 81       	ldd	r24, Y+2	; 0x02
    16ca:	28 2f       	mov	r18, r24
    16cc:	30 e0       	ldi	r19, 0x00	; 0
    16ce:	81 e0       	ldi	r24, 0x01	; 1
    16d0:	90 e0       	ldi	r25, 0x00	; 0
    16d2:	02 2e       	mov	r0, r18
    16d4:	02 c0       	rjmp	.+4      	; 0x16da <GPIO_writePin+0x8c>
    16d6:	88 0f       	add	r24, r24
    16d8:	99 1f       	adc	r25, r25
    16da:	0a 94       	dec	r0
    16dc:	e2 f7       	brpl	.-8      	; 0x16d6 <GPIO_writePin+0x88>
    16de:	84 2b       	or	r24, r20
    16e0:	8c 93       	st	X, r24
    16e2:	98 c0       	rjmp	.+304    	; 0x1814 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    16e4:	ab e3       	ldi	r26, 0x3B	; 59
    16e6:	b0 e0       	ldi	r27, 0x00	; 0
    16e8:	eb e3       	ldi	r30, 0x3B	; 59
    16ea:	f0 e0       	ldi	r31, 0x00	; 0
    16ec:	80 81       	ld	r24, Z
    16ee:	48 2f       	mov	r20, r24
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	28 2f       	mov	r18, r24
    16f4:	30 e0       	ldi	r19, 0x00	; 0
    16f6:	81 e0       	ldi	r24, 0x01	; 1
    16f8:	90 e0       	ldi	r25, 0x00	; 0
    16fa:	02 2e       	mov	r0, r18
    16fc:	02 c0       	rjmp	.+4      	; 0x1702 <GPIO_writePin+0xb4>
    16fe:	88 0f       	add	r24, r24
    1700:	99 1f       	adc	r25, r25
    1702:	0a 94       	dec	r0
    1704:	e2 f7       	brpl	.-8      	; 0x16fe <GPIO_writePin+0xb0>
    1706:	80 95       	com	r24
    1708:	84 23       	and	r24, r20
    170a:	8c 93       	st	X, r24
    170c:	83 c0       	rjmp	.+262    	; 0x1814 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    170e:	8b 81       	ldd	r24, Y+3	; 0x03
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	a1 f4       	brne	.+40     	; 0x173c <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1714:	a8 e3       	ldi	r26, 0x38	; 56
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e8 e3       	ldi	r30, 0x38	; 56
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	48 2f       	mov	r20, r24
    1720:	8a 81       	ldd	r24, Y+2	; 0x02
    1722:	28 2f       	mov	r18, r24
    1724:	30 e0       	ldi	r19, 0x00	; 0
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	02 2e       	mov	r0, r18
    172c:	02 c0       	rjmp	.+4      	; 0x1732 <GPIO_writePin+0xe4>
    172e:	88 0f       	add	r24, r24
    1730:	99 1f       	adc	r25, r25
    1732:	0a 94       	dec	r0
    1734:	e2 f7       	brpl	.-8      	; 0x172e <GPIO_writePin+0xe0>
    1736:	84 2b       	or	r24, r20
    1738:	8c 93       	st	X, r24
    173a:	6c c0       	rjmp	.+216    	; 0x1814 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    173c:	a8 e3       	ldi	r26, 0x38	; 56
    173e:	b0 e0       	ldi	r27, 0x00	; 0
    1740:	e8 e3       	ldi	r30, 0x38	; 56
    1742:	f0 e0       	ldi	r31, 0x00	; 0
    1744:	80 81       	ld	r24, Z
    1746:	48 2f       	mov	r20, r24
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	28 2f       	mov	r18, r24
    174c:	30 e0       	ldi	r19, 0x00	; 0
    174e:	81 e0       	ldi	r24, 0x01	; 1
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	02 2e       	mov	r0, r18
    1754:	02 c0       	rjmp	.+4      	; 0x175a <GPIO_writePin+0x10c>
    1756:	88 0f       	add	r24, r24
    1758:	99 1f       	adc	r25, r25
    175a:	0a 94       	dec	r0
    175c:	e2 f7       	brpl	.-8      	; 0x1756 <GPIO_writePin+0x108>
    175e:	80 95       	com	r24
    1760:	84 23       	and	r24, r20
    1762:	8c 93       	st	X, r24
    1764:	57 c0       	rjmp	.+174    	; 0x1814 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1766:	8b 81       	ldd	r24, Y+3	; 0x03
    1768:	81 30       	cpi	r24, 0x01	; 1
    176a:	a1 f4       	brne	.+40     	; 0x1794 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    176c:	a5 e3       	ldi	r26, 0x35	; 53
    176e:	b0 e0       	ldi	r27, 0x00	; 0
    1770:	e5 e3       	ldi	r30, 0x35	; 53
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	80 81       	ld	r24, Z
    1776:	48 2f       	mov	r20, r24
    1778:	8a 81       	ldd	r24, Y+2	; 0x02
    177a:	28 2f       	mov	r18, r24
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	81 e0       	ldi	r24, 0x01	; 1
    1780:	90 e0       	ldi	r25, 0x00	; 0
    1782:	02 2e       	mov	r0, r18
    1784:	02 c0       	rjmp	.+4      	; 0x178a <GPIO_writePin+0x13c>
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	0a 94       	dec	r0
    178c:	e2 f7       	brpl	.-8      	; 0x1786 <GPIO_writePin+0x138>
    178e:	84 2b       	or	r24, r20
    1790:	8c 93       	st	X, r24
    1792:	40 c0       	rjmp	.+128    	; 0x1814 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1794:	a5 e3       	ldi	r26, 0x35	; 53
    1796:	b0 e0       	ldi	r27, 0x00	; 0
    1798:	e5 e3       	ldi	r30, 0x35	; 53
    179a:	f0 e0       	ldi	r31, 0x00	; 0
    179c:	80 81       	ld	r24, Z
    179e:	48 2f       	mov	r20, r24
    17a0:	8a 81       	ldd	r24, Y+2	; 0x02
    17a2:	28 2f       	mov	r18, r24
    17a4:	30 e0       	ldi	r19, 0x00	; 0
    17a6:	81 e0       	ldi	r24, 0x01	; 1
    17a8:	90 e0       	ldi	r25, 0x00	; 0
    17aa:	02 2e       	mov	r0, r18
    17ac:	02 c0       	rjmp	.+4      	; 0x17b2 <GPIO_writePin+0x164>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	0a 94       	dec	r0
    17b4:	e2 f7       	brpl	.-8      	; 0x17ae <GPIO_writePin+0x160>
    17b6:	80 95       	com	r24
    17b8:	84 23       	and	r24, r20
    17ba:	8c 93       	st	X, r24
    17bc:	2b c0       	rjmp	.+86     	; 0x1814 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    17be:	8b 81       	ldd	r24, Y+3	; 0x03
    17c0:	81 30       	cpi	r24, 0x01	; 1
    17c2:	a1 f4       	brne	.+40     	; 0x17ec <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    17c4:	a2 e3       	ldi	r26, 0x32	; 50
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	e2 e3       	ldi	r30, 0x32	; 50
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	48 2f       	mov	r20, r24
    17d0:	8a 81       	ldd	r24, Y+2	; 0x02
    17d2:	28 2f       	mov	r18, r24
    17d4:	30 e0       	ldi	r19, 0x00	; 0
    17d6:	81 e0       	ldi	r24, 0x01	; 1
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	02 2e       	mov	r0, r18
    17dc:	02 c0       	rjmp	.+4      	; 0x17e2 <GPIO_writePin+0x194>
    17de:	88 0f       	add	r24, r24
    17e0:	99 1f       	adc	r25, r25
    17e2:	0a 94       	dec	r0
    17e4:	e2 f7       	brpl	.-8      	; 0x17de <GPIO_writePin+0x190>
    17e6:	84 2b       	or	r24, r20
    17e8:	8c 93       	st	X, r24
    17ea:	14 c0       	rjmp	.+40     	; 0x1814 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    17ec:	a2 e3       	ldi	r26, 0x32	; 50
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e2 e3       	ldi	r30, 0x32	; 50
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	48 2f       	mov	r20, r24
    17f8:	8a 81       	ldd	r24, Y+2	; 0x02
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	81 e0       	ldi	r24, 0x01	; 1
    1800:	90 e0       	ldi	r25, 0x00	; 0
    1802:	02 2e       	mov	r0, r18
    1804:	02 c0       	rjmp	.+4      	; 0x180a <GPIO_writePin+0x1bc>
    1806:	88 0f       	add	r24, r24
    1808:	99 1f       	adc	r25, r25
    180a:	0a 94       	dec	r0
    180c:	e2 f7       	brpl	.-8      	; 0x1806 <GPIO_writePin+0x1b8>
    180e:	80 95       	com	r24
    1810:	84 23       	and	r24, r20
    1812:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1814:	0f 90       	pop	r0
    1816:	0f 90       	pop	r0
    1818:	0f 90       	pop	r0
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	cf 91       	pop	r28
    1820:	df 91       	pop	r29
    1822:	08 95       	ret

00001824 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1824:	df 93       	push	r29
    1826:	cf 93       	push	r28
    1828:	00 d0       	rcall	.+0      	; 0x182a <GPIO_readPin+0x6>
    182a:	00 d0       	rcall	.+0      	; 0x182c <GPIO_readPin+0x8>
    182c:	0f 92       	push	r0
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	8a 83       	std	Y+2, r24	; 0x02
    1834:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1836:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1838:	8b 81       	ldd	r24, Y+3	; 0x03
    183a:	88 30       	cpi	r24, 0x08	; 8
    183c:	08 f0       	brcs	.+2      	; 0x1840 <GPIO_readPin+0x1c>
    183e:	84 c0       	rjmp	.+264    	; 0x1948 <GPIO_readPin+0x124>
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	84 30       	cpi	r24, 0x04	; 4
    1844:	08 f0       	brcs	.+2      	; 0x1848 <GPIO_readPin+0x24>
    1846:	80 c0       	rjmp	.+256    	; 0x1948 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3d 83       	std	Y+5, r19	; 0x05
    1850:	2c 83       	std	Y+4, r18	; 0x04
    1852:	4c 81       	ldd	r20, Y+4	; 0x04
    1854:	5d 81       	ldd	r21, Y+5	; 0x05
    1856:	41 30       	cpi	r20, 0x01	; 1
    1858:	51 05       	cpc	r21, r1
    185a:	79 f1       	breq	.+94     	; 0x18ba <GPIO_readPin+0x96>
    185c:	8c 81       	ldd	r24, Y+4	; 0x04
    185e:	9d 81       	ldd	r25, Y+5	; 0x05
    1860:	82 30       	cpi	r24, 0x02	; 2
    1862:	91 05       	cpc	r25, r1
    1864:	34 f4       	brge	.+12     	; 0x1872 <GPIO_readPin+0x4e>
    1866:	2c 81       	ldd	r18, Y+4	; 0x04
    1868:	3d 81       	ldd	r19, Y+5	; 0x05
    186a:	21 15       	cp	r18, r1
    186c:	31 05       	cpc	r19, r1
    186e:	69 f0       	breq	.+26     	; 0x188a <GPIO_readPin+0x66>
    1870:	6b c0       	rjmp	.+214    	; 0x1948 <GPIO_readPin+0x124>
    1872:	4c 81       	ldd	r20, Y+4	; 0x04
    1874:	5d 81       	ldd	r21, Y+5	; 0x05
    1876:	42 30       	cpi	r20, 0x02	; 2
    1878:	51 05       	cpc	r21, r1
    187a:	b9 f1       	breq	.+110    	; 0x18ea <GPIO_readPin+0xc6>
    187c:	8c 81       	ldd	r24, Y+4	; 0x04
    187e:	9d 81       	ldd	r25, Y+5	; 0x05
    1880:	83 30       	cpi	r24, 0x03	; 3
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <GPIO_readPin+0x64>
    1886:	49 c0       	rjmp	.+146    	; 0x191a <GPIO_readPin+0xf6>
    1888:	5f c0       	rjmp	.+190    	; 0x1948 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <GPIO_readPin+0x7e>
    189e:	55 95       	asr	r21
    18a0:	47 95       	ror	r20
    18a2:	8a 95       	dec	r24
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <GPIO_readPin+0x7a>
    18a6:	ca 01       	movw	r24, r20
    18a8:	81 70       	andi	r24, 0x01	; 1
    18aa:	90 70       	andi	r25, 0x00	; 0
    18ac:	88 23       	and	r24, r24
    18ae:	19 f0       	breq	.+6      	; 0x18b6 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    18b0:	81 e0       	ldi	r24, 0x01	; 1
    18b2:	89 83       	std	Y+1, r24	; 0x01
    18b4:	49 c0       	rjmp	.+146    	; 0x1948 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18b6:	19 82       	std	Y+1, r1	; 0x01
    18b8:	47 c0       	rjmp	.+142    	; 0x1948 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    18ba:	e6 e3       	ldi	r30, 0x36	; 54
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	28 2f       	mov	r18, r24
    18c2:	30 e0       	ldi	r19, 0x00	; 0
    18c4:	8b 81       	ldd	r24, Y+3	; 0x03
    18c6:	88 2f       	mov	r24, r24
    18c8:	90 e0       	ldi	r25, 0x00	; 0
    18ca:	a9 01       	movw	r20, r18
    18cc:	02 c0       	rjmp	.+4      	; 0x18d2 <GPIO_readPin+0xae>
    18ce:	55 95       	asr	r21
    18d0:	47 95       	ror	r20
    18d2:	8a 95       	dec	r24
    18d4:	e2 f7       	brpl	.-8      	; 0x18ce <GPIO_readPin+0xaa>
    18d6:	ca 01       	movw	r24, r20
    18d8:	81 70       	andi	r24, 0x01	; 1
    18da:	90 70       	andi	r25, 0x00	; 0
    18dc:	88 23       	and	r24, r24
    18de:	19 f0       	breq	.+6      	; 0x18e6 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    18e0:	81 e0       	ldi	r24, 0x01	; 1
    18e2:	89 83       	std	Y+1, r24	; 0x01
    18e4:	31 c0       	rjmp	.+98     	; 0x1948 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    18e6:	19 82       	std	Y+1, r1	; 0x01
    18e8:	2f c0       	rjmp	.+94     	; 0x1948 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    18ea:	e3 e3       	ldi	r30, 0x33	; 51
    18ec:	f0 e0       	ldi	r31, 0x00	; 0
    18ee:	80 81       	ld	r24, Z
    18f0:	28 2f       	mov	r18, r24
    18f2:	30 e0       	ldi	r19, 0x00	; 0
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	88 2f       	mov	r24, r24
    18f8:	90 e0       	ldi	r25, 0x00	; 0
    18fa:	a9 01       	movw	r20, r18
    18fc:	02 c0       	rjmp	.+4      	; 0x1902 <GPIO_readPin+0xde>
    18fe:	55 95       	asr	r21
    1900:	47 95       	ror	r20
    1902:	8a 95       	dec	r24
    1904:	e2 f7       	brpl	.-8      	; 0x18fe <GPIO_readPin+0xda>
    1906:	ca 01       	movw	r24, r20
    1908:	81 70       	andi	r24, 0x01	; 1
    190a:	90 70       	andi	r25, 0x00	; 0
    190c:	88 23       	and	r24, r24
    190e:	19 f0       	breq	.+6      	; 0x1916 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1910:	81 e0       	ldi	r24, 0x01	; 1
    1912:	89 83       	std	Y+1, r24	; 0x01
    1914:	19 c0       	rjmp	.+50     	; 0x1948 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1916:	19 82       	std	Y+1, r1	; 0x01
    1918:	17 c0       	rjmp	.+46     	; 0x1948 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    191a:	e0 e3       	ldi	r30, 0x30	; 48
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	28 2f       	mov	r18, r24
    1922:	30 e0       	ldi	r19, 0x00	; 0
    1924:	8b 81       	ldd	r24, Y+3	; 0x03
    1926:	88 2f       	mov	r24, r24
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	a9 01       	movw	r20, r18
    192c:	02 c0       	rjmp	.+4      	; 0x1932 <GPIO_readPin+0x10e>
    192e:	55 95       	asr	r21
    1930:	47 95       	ror	r20
    1932:	8a 95       	dec	r24
    1934:	e2 f7       	brpl	.-8      	; 0x192e <GPIO_readPin+0x10a>
    1936:	ca 01       	movw	r24, r20
    1938:	81 70       	andi	r24, 0x01	; 1
    193a:	90 70       	andi	r25, 0x00	; 0
    193c:	88 23       	and	r24, r24
    193e:	19 f0       	breq	.+6      	; 0x1946 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1940:	81 e0       	ldi	r24, 0x01	; 1
    1942:	89 83       	std	Y+1, r24	; 0x01
    1944:	01 c0       	rjmp	.+2      	; 0x1948 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1946:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1948:	89 81       	ldd	r24, Y+1	; 0x01
}
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
    194e:	0f 90       	pop	r0
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	cf 91       	pop	r28
    1956:	df 91       	pop	r29
    1958:	08 95       	ret

0000195a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    195a:	df 93       	push	r29
    195c:	cf 93       	push	r28
    195e:	00 d0       	rcall	.+0      	; 0x1960 <GPIO_setupPortDirection+0x6>
    1960:	00 d0       	rcall	.+0      	; 0x1962 <GPIO_setupPortDirection+0x8>
    1962:	cd b7       	in	r28, 0x3d	; 61
    1964:	de b7       	in	r29, 0x3e	; 62
    1966:	89 83       	std	Y+1, r24	; 0x01
    1968:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    196a:	89 81       	ldd	r24, Y+1	; 0x01
    196c:	84 30       	cpi	r24, 0x04	; 4
    196e:	90 f5       	brcc	.+100    	; 0x19d4 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1970:	89 81       	ldd	r24, Y+1	; 0x01
    1972:	28 2f       	mov	r18, r24
    1974:	30 e0       	ldi	r19, 0x00	; 0
    1976:	3c 83       	std	Y+4, r19	; 0x04
    1978:	2b 83       	std	Y+3, r18	; 0x03
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	9c 81       	ldd	r25, Y+4	; 0x04
    197e:	81 30       	cpi	r24, 0x01	; 1
    1980:	91 05       	cpc	r25, r1
    1982:	d1 f0       	breq	.+52     	; 0x19b8 <GPIO_setupPortDirection+0x5e>
    1984:	2b 81       	ldd	r18, Y+3	; 0x03
    1986:	3c 81       	ldd	r19, Y+4	; 0x04
    1988:	22 30       	cpi	r18, 0x02	; 2
    198a:	31 05       	cpc	r19, r1
    198c:	2c f4       	brge	.+10     	; 0x1998 <GPIO_setupPortDirection+0x3e>
    198e:	8b 81       	ldd	r24, Y+3	; 0x03
    1990:	9c 81       	ldd	r25, Y+4	; 0x04
    1992:	00 97       	sbiw	r24, 0x00	; 0
    1994:	61 f0       	breq	.+24     	; 0x19ae <GPIO_setupPortDirection+0x54>
    1996:	1e c0       	rjmp	.+60     	; 0x19d4 <GPIO_setupPortDirection+0x7a>
    1998:	2b 81       	ldd	r18, Y+3	; 0x03
    199a:	3c 81       	ldd	r19, Y+4	; 0x04
    199c:	22 30       	cpi	r18, 0x02	; 2
    199e:	31 05       	cpc	r19, r1
    19a0:	81 f0       	breq	.+32     	; 0x19c2 <GPIO_setupPortDirection+0x68>
    19a2:	8b 81       	ldd	r24, Y+3	; 0x03
    19a4:	9c 81       	ldd	r25, Y+4	; 0x04
    19a6:	83 30       	cpi	r24, 0x03	; 3
    19a8:	91 05       	cpc	r25, r1
    19aa:	81 f0       	breq	.+32     	; 0x19cc <GPIO_setupPortDirection+0x72>
    19ac:	13 c0       	rjmp	.+38     	; 0x19d4 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    19ae:	ea e3       	ldi	r30, 0x3A	; 58
    19b0:	f0 e0       	ldi	r31, 0x00	; 0
    19b2:	8a 81       	ldd	r24, Y+2	; 0x02
    19b4:	80 83       	st	Z, r24
    19b6:	0e c0       	rjmp	.+28     	; 0x19d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    19b8:	e7 e3       	ldi	r30, 0x37	; 55
    19ba:	f0 e0       	ldi	r31, 0x00	; 0
    19bc:	8a 81       	ldd	r24, Y+2	; 0x02
    19be:	80 83       	st	Z, r24
    19c0:	09 c0       	rjmp	.+18     	; 0x19d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    19c2:	e4 e3       	ldi	r30, 0x34	; 52
    19c4:	f0 e0       	ldi	r31, 0x00	; 0
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	80 83       	st	Z, r24
    19ca:	04 c0       	rjmp	.+8      	; 0x19d4 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    19cc:	e1 e3       	ldi	r30, 0x31	; 49
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	8a 81       	ldd	r24, Y+2	; 0x02
    19d2:	80 83       	st	Z, r24
			break;
		}
	}
}
    19d4:	0f 90       	pop	r0
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	cf 91       	pop	r28
    19de:	df 91       	pop	r29
    19e0:	08 95       	ret

000019e2 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    19e2:	df 93       	push	r29
    19e4:	cf 93       	push	r28
    19e6:	00 d0       	rcall	.+0      	; 0x19e8 <GPIO_writePort+0x6>
    19e8:	00 d0       	rcall	.+0      	; 0x19ea <GPIO_writePort+0x8>
    19ea:	cd b7       	in	r28, 0x3d	; 61
    19ec:	de b7       	in	r29, 0x3e	; 62
    19ee:	89 83       	std	Y+1, r24	; 0x01
    19f0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	84 30       	cpi	r24, 0x04	; 4
    19f6:	90 f5       	brcc	.+100    	; 0x1a5c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    19f8:	89 81       	ldd	r24, Y+1	; 0x01
    19fa:	28 2f       	mov	r18, r24
    19fc:	30 e0       	ldi	r19, 0x00	; 0
    19fe:	3c 83       	std	Y+4, r19	; 0x04
    1a00:	2b 83       	std	Y+3, r18	; 0x03
    1a02:	8b 81       	ldd	r24, Y+3	; 0x03
    1a04:	9c 81       	ldd	r25, Y+4	; 0x04
    1a06:	81 30       	cpi	r24, 0x01	; 1
    1a08:	91 05       	cpc	r25, r1
    1a0a:	d1 f0       	breq	.+52     	; 0x1a40 <GPIO_writePort+0x5e>
    1a0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1a0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1a10:	22 30       	cpi	r18, 0x02	; 2
    1a12:	31 05       	cpc	r19, r1
    1a14:	2c f4       	brge	.+10     	; 0x1a20 <GPIO_writePort+0x3e>
    1a16:	8b 81       	ldd	r24, Y+3	; 0x03
    1a18:	9c 81       	ldd	r25, Y+4	; 0x04
    1a1a:	00 97       	sbiw	r24, 0x00	; 0
    1a1c:	61 f0       	breq	.+24     	; 0x1a36 <GPIO_writePort+0x54>
    1a1e:	1e c0       	rjmp	.+60     	; 0x1a5c <GPIO_writePort+0x7a>
    1a20:	2b 81       	ldd	r18, Y+3	; 0x03
    1a22:	3c 81       	ldd	r19, Y+4	; 0x04
    1a24:	22 30       	cpi	r18, 0x02	; 2
    1a26:	31 05       	cpc	r19, r1
    1a28:	81 f0       	breq	.+32     	; 0x1a4a <GPIO_writePort+0x68>
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a2e:	83 30       	cpi	r24, 0x03	; 3
    1a30:	91 05       	cpc	r25, r1
    1a32:	81 f0       	breq	.+32     	; 0x1a54 <GPIO_writePort+0x72>
    1a34:	13 c0       	rjmp	.+38     	; 0x1a5c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3c:	80 83       	st	Z, r24
    1a3e:	0e c0       	rjmp	.+28     	; 0x1a5c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1a40:	e8 e3       	ldi	r30, 0x38	; 56
    1a42:	f0 e0       	ldi	r31, 0x00	; 0
    1a44:	8a 81       	ldd	r24, Y+2	; 0x02
    1a46:	80 83       	st	Z, r24
    1a48:	09 c0       	rjmp	.+18     	; 0x1a5c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1a4a:	e5 e3       	ldi	r30, 0x35	; 53
    1a4c:	f0 e0       	ldi	r31, 0x00	; 0
    1a4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a50:	80 83       	st	Z, r24
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1a54:	e2 e3       	ldi	r30, 0x32	; 50
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	8a 81       	ldd	r24, Y+2	; 0x02
    1a5a:	80 83       	st	Z, r24
			break;
		}
	}
}
    1a5c:	0f 90       	pop	r0
    1a5e:	0f 90       	pop	r0
    1a60:	0f 90       	pop	r0
    1a62:	0f 90       	pop	r0
    1a64:	cf 91       	pop	r28
    1a66:	df 91       	pop	r29
    1a68:	08 95       	ret

00001a6a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1a6a:	df 93       	push	r29
    1a6c:	cf 93       	push	r28
    1a6e:	00 d0       	rcall	.+0      	; 0x1a70 <GPIO_readPort+0x6>
    1a70:	00 d0       	rcall	.+0      	; 0x1a72 <GPIO_readPort+0x8>
    1a72:	cd b7       	in	r28, 0x3d	; 61
    1a74:	de b7       	in	r29, 0x3e	; 62
    1a76:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1a78:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a7c:	84 30       	cpi	r24, 0x04	; 4
    1a7e:	90 f5       	brcc	.+100    	; 0x1ae4 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1a80:	8a 81       	ldd	r24, Y+2	; 0x02
    1a82:	28 2f       	mov	r18, r24
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	3c 83       	std	Y+4, r19	; 0x04
    1a88:	2b 83       	std	Y+3, r18	; 0x03
    1a8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8e:	81 30       	cpi	r24, 0x01	; 1
    1a90:	91 05       	cpc	r25, r1
    1a92:	d1 f0       	breq	.+52     	; 0x1ac8 <GPIO_readPort+0x5e>
    1a94:	2b 81       	ldd	r18, Y+3	; 0x03
    1a96:	3c 81       	ldd	r19, Y+4	; 0x04
    1a98:	22 30       	cpi	r18, 0x02	; 2
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	2c f4       	brge	.+10     	; 0x1aa8 <GPIO_readPort+0x3e>
    1a9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa0:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa2:	00 97       	sbiw	r24, 0x00	; 0
    1aa4:	61 f0       	breq	.+24     	; 0x1abe <GPIO_readPort+0x54>
    1aa6:	1e c0       	rjmp	.+60     	; 0x1ae4 <GPIO_readPort+0x7a>
    1aa8:	2b 81       	ldd	r18, Y+3	; 0x03
    1aaa:	3c 81       	ldd	r19, Y+4	; 0x04
    1aac:	22 30       	cpi	r18, 0x02	; 2
    1aae:	31 05       	cpc	r19, r1
    1ab0:	81 f0       	breq	.+32     	; 0x1ad2 <GPIO_readPort+0x68>
    1ab2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ab4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ab6:	83 30       	cpi	r24, 0x03	; 3
    1ab8:	91 05       	cpc	r25, r1
    1aba:	81 f0       	breq	.+32     	; 0x1adc <GPIO_readPort+0x72>
    1abc:	13 c0       	rjmp	.+38     	; 0x1ae4 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1abe:	e9 e3       	ldi	r30, 0x39	; 57
    1ac0:	f0 e0       	ldi	r31, 0x00	; 0
    1ac2:	80 81       	ld	r24, Z
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	0e c0       	rjmp	.+28     	; 0x1ae4 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1ac8:	e6 e3       	ldi	r30, 0x36	; 54
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	80 81       	ld	r24, Z
    1ace:	89 83       	std	Y+1, r24	; 0x01
    1ad0:	09 c0       	rjmp	.+18     	; 0x1ae4 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1ad2:	e3 e3       	ldi	r30, 0x33	; 51
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	89 83       	std	Y+1, r24	; 0x01
    1ada:	04 c0       	rjmp	.+8      	; 0x1ae4 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1adc:	e0 e3       	ldi	r30, 0x30	; 48
    1ade:	f0 e0       	ldi	r31, 0x00	; 0
    1ae0:	80 81       	ld	r24, Z
    1ae2:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1ae4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1ae6:	0f 90       	pop	r0
    1ae8:	0f 90       	pop	r0
    1aea:	0f 90       	pop	r0
    1aec:	0f 90       	pop	r0
    1aee:	cf 91       	pop	r28
    1af0:	df 91       	pop	r29
    1af2:	08 95       	ret

00001af4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1af4:	df 93       	push	r29
    1af6:	cf 93       	push	r28
    1af8:	cd b7       	in	r28, 0x3d	; 61
    1afa:	de b7       	in	r29, 0x3e	; 62
    1afc:	2e 97       	sbiw	r28, 0x0e	; 14
    1afe:	0f b6       	in	r0, 0x3f	; 63
    1b00:	f8 94       	cli
    1b02:	de bf       	out	0x3e, r29	; 62
    1b04:	0f be       	out	0x3f, r0	; 63
    1b06:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	67 e0       	ldi	r22, 0x07	; 7
    1b0c:	41 e0       	ldi	r20, 0x01	; 1
    1b0e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1b12:	81 e0       	ldi	r24, 0x01	; 1
    1b14:	66 e0       	ldi	r22, 0x06	; 6
    1b16:	41 e0       	ldi	r20, 0x01	; 1
    1b18:	0e 94 3c 0a 	call	0x1478	; 0x1478 <GPIO_setupPinDirection>
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	90 e0       	ldi	r25, 0x00	; 0
    1b20:	a0 ea       	ldi	r26, 0xA0	; 160
    1b22:	b1 e4       	ldi	r27, 0x41	; 65
    1b24:	8b 87       	std	Y+11, r24	; 0x0b
    1b26:	9c 87       	std	Y+12, r25	; 0x0c
    1b28:	ad 87       	std	Y+13, r26	; 0x0d
    1b2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b34:	20 e0       	ldi	r18, 0x00	; 0
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	4a ef       	ldi	r20, 0xFA	; 250
    1b3a:	54 e4       	ldi	r21, 0x44	; 68
    1b3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b40:	dc 01       	movw	r26, r24
    1b42:	cb 01       	movw	r24, r22
    1b44:	8f 83       	std	Y+7, r24	; 0x07
    1b46:	98 87       	std	Y+8, r25	; 0x08
    1b48:	a9 87       	std	Y+9, r26	; 0x09
    1b4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1b4e:	78 85       	ldd	r23, Y+8	; 0x08
    1b50:	89 85       	ldd	r24, Y+9	; 0x09
    1b52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b54:	20 e0       	ldi	r18, 0x00	; 0
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	40 e8       	ldi	r20, 0x80	; 128
    1b5a:	5f e3       	ldi	r21, 0x3F	; 63
    1b5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b60:	88 23       	and	r24, r24
    1b62:	2c f4       	brge	.+10     	; 0x1b6e <LCD_init+0x7a>
		__ticks = 1;
    1b64:	81 e0       	ldi	r24, 0x01	; 1
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	9e 83       	std	Y+6, r25	; 0x06
    1b6a:	8d 83       	std	Y+5, r24	; 0x05
    1b6c:	3f c0       	rjmp	.+126    	; 0x1bec <LCD_init+0xf8>
	else if (__tmp > 65535)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	3f ef       	ldi	r19, 0xFF	; 255
    1b7a:	4f e7       	ldi	r20, 0x7F	; 127
    1b7c:	57 e4       	ldi	r21, 0x47	; 71
    1b7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1b82:	18 16       	cp	r1, r24
    1b84:	4c f5       	brge	.+82     	; 0x1bd8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b8e:	20 e0       	ldi	r18, 0x00	; 0
    1b90:	30 e0       	ldi	r19, 0x00	; 0
    1b92:	40 e2       	ldi	r20, 0x20	; 32
    1b94:	51 e4       	ldi	r21, 0x41	; 65
    1b96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b9a:	dc 01       	movw	r26, r24
    1b9c:	cb 01       	movw	r24, r22
    1b9e:	bc 01       	movw	r22, r24
    1ba0:	cd 01       	movw	r24, r26
    1ba2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ba6:	dc 01       	movw	r26, r24
    1ba8:	cb 01       	movw	r24, r22
    1baa:	9e 83       	std	Y+6, r25	; 0x06
    1bac:	8d 83       	std	Y+5, r24	; 0x05
    1bae:	0f c0       	rjmp	.+30     	; 0x1bce <LCD_init+0xda>
    1bb0:	88 ec       	ldi	r24, 0xC8	; 200
    1bb2:	90 e0       	ldi	r25, 0x00	; 0
    1bb4:	9c 83       	std	Y+4, r25	; 0x04
    1bb6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1bb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1bba:	9c 81       	ldd	r25, Y+4	; 0x04
    1bbc:	01 97       	sbiw	r24, 0x01	; 1
    1bbe:	f1 f7       	brne	.-4      	; 0x1bbc <LCD_init+0xc8>
    1bc0:	9c 83       	std	Y+4, r25	; 0x04
    1bc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1bc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	9e 83       	std	Y+6, r25	; 0x06
    1bcc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bce:	8d 81       	ldd	r24, Y+5	; 0x05
    1bd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1bd2:	00 97       	sbiw	r24, 0x00	; 0
    1bd4:	69 f7       	brne	.-38     	; 0x1bb0 <LCD_init+0xbc>
    1bd6:	14 c0       	rjmp	.+40     	; 0x1c00 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1be4:	dc 01       	movw	r26, r24
    1be6:	cb 01       	movw	r24, r22
    1be8:	9e 83       	std	Y+6, r25	; 0x06
    1bea:	8d 83       	std	Y+5, r24	; 0x05
    1bec:	8d 81       	ldd	r24, Y+5	; 0x05
    1bee:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf0:	9a 83       	std	Y+2, r25	; 0x02
    1bf2:	89 83       	std	Y+1, r24	; 0x01
    1bf4:	89 81       	ldd	r24, Y+1	; 0x01
    1bf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bf8:	01 97       	sbiw	r24, 0x01	; 1
    1bfa:	f1 f7       	brne	.-4      	; 0x1bf8 <LCD_init+0x104>
    1bfc:	9a 83       	std	Y+2, r25	; 0x02
    1bfe:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	6f ef       	ldi	r22, 0xFF	; 255
    1c04:	0e 94 ad 0c 	call	0x195a	; 0x195a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1c08:	88 e3       	ldi	r24, 0x38	; 56
    1c0a:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1c0e:	8c e0       	ldi	r24, 0x0C	; 12
    1c10:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1c14:	81 e0       	ldi	r24, 0x01	; 1
    1c16:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_sendCommand>
}
    1c1a:	2e 96       	adiw	r28, 0x0e	; 14
    1c1c:	0f b6       	in	r0, 0x3f	; 63
    1c1e:	f8 94       	cli
    1c20:	de bf       	out	0x3e, r29	; 62
    1c22:	0f be       	out	0x3f, r0	; 63
    1c24:	cd bf       	out	0x3d, r28	; 61
    1c26:	cf 91       	pop	r28
    1c28:	df 91       	pop	r29
    1c2a:	08 95       	ret

00001c2c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1c2c:	df 93       	push	r29
    1c2e:	cf 93       	push	r28
    1c30:	cd b7       	in	r28, 0x3d	; 61
    1c32:	de b7       	in	r29, 0x3e	; 62
    1c34:	e9 97       	sbiw	r28, 0x39	; 57
    1c36:	0f b6       	in	r0, 0x3f	; 63
    1c38:	f8 94       	cli
    1c3a:	de bf       	out	0x3e, r29	; 62
    1c3c:	0f be       	out	0x3f, r0	; 63
    1c3e:	cd bf       	out	0x3d, r28	; 61
    1c40:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1c42:	81 e0       	ldi	r24, 0x01	; 1
    1c44:	67 e0       	ldi	r22, 0x07	; 7
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	a0 e8       	ldi	r26, 0x80	; 128
    1c52:	bf e3       	ldi	r27, 0x3F	; 63
    1c54:	8d ab       	std	Y+53, r24	; 0x35
    1c56:	9e ab       	std	Y+54, r25	; 0x36
    1c58:	af ab       	std	Y+55, r26	; 0x37
    1c5a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c5c:	6d a9       	ldd	r22, Y+53	; 0x35
    1c5e:	7e a9       	ldd	r23, Y+54	; 0x36
    1c60:	8f a9       	ldd	r24, Y+55	; 0x37
    1c62:	98 ad       	ldd	r25, Y+56	; 0x38
    1c64:	20 e0       	ldi	r18, 0x00	; 0
    1c66:	30 e0       	ldi	r19, 0x00	; 0
    1c68:	4a ef       	ldi	r20, 0xFA	; 250
    1c6a:	54 e4       	ldi	r21, 0x44	; 68
    1c6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c70:	dc 01       	movw	r26, r24
    1c72:	cb 01       	movw	r24, r22
    1c74:	89 ab       	std	Y+49, r24	; 0x31
    1c76:	9a ab       	std	Y+50, r25	; 0x32
    1c78:	ab ab       	std	Y+51, r26	; 0x33
    1c7a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1c7c:	69 a9       	ldd	r22, Y+49	; 0x31
    1c7e:	7a a9       	ldd	r23, Y+50	; 0x32
    1c80:	8b a9       	ldd	r24, Y+51	; 0x33
    1c82:	9c a9       	ldd	r25, Y+52	; 0x34
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	40 e8       	ldi	r20, 0x80	; 128
    1c8a:	5f e3       	ldi	r21, 0x3F	; 63
    1c8c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c90:	88 23       	and	r24, r24
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <LCD_sendCommand+0x72>
		__ticks = 1;
    1c94:	81 e0       	ldi	r24, 0x01	; 1
    1c96:	90 e0       	ldi	r25, 0x00	; 0
    1c98:	98 ab       	std	Y+48, r25	; 0x30
    1c9a:	8f a7       	std	Y+47, r24	; 0x2f
    1c9c:	3f c0       	rjmp	.+126    	; 0x1d1c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1c9e:	69 a9       	ldd	r22, Y+49	; 0x31
    1ca0:	7a a9       	ldd	r23, Y+50	; 0x32
    1ca2:	8b a9       	ldd	r24, Y+51	; 0x33
    1ca4:	9c a9       	ldd	r25, Y+52	; 0x34
    1ca6:	20 e0       	ldi	r18, 0x00	; 0
    1ca8:	3f ef       	ldi	r19, 0xFF	; 255
    1caa:	4f e7       	ldi	r20, 0x7F	; 127
    1cac:	57 e4       	ldi	r21, 0x47	; 71
    1cae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cb2:	18 16       	cp	r1, r24
    1cb4:	4c f5       	brge	.+82     	; 0x1d08 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cb6:	6d a9       	ldd	r22, Y+53	; 0x35
    1cb8:	7e a9       	ldd	r23, Y+54	; 0x36
    1cba:	8f a9       	ldd	r24, Y+55	; 0x37
    1cbc:	98 ad       	ldd	r25, Y+56	; 0x38
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	30 e0       	ldi	r19, 0x00	; 0
    1cc2:	40 e2       	ldi	r20, 0x20	; 32
    1cc4:	51 e4       	ldi	r21, 0x41	; 65
    1cc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	bc 01       	movw	r22, r24
    1cd0:	cd 01       	movw	r24, r26
    1cd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cd6:	dc 01       	movw	r26, r24
    1cd8:	cb 01       	movw	r24, r22
    1cda:	98 ab       	std	Y+48, r25	; 0x30
    1cdc:	8f a7       	std	Y+47, r24	; 0x2f
    1cde:	0f c0       	rjmp	.+30     	; 0x1cfe <LCD_sendCommand+0xd2>
    1ce0:	88 ec       	ldi	r24, 0xC8	; 200
    1ce2:	90 e0       	ldi	r25, 0x00	; 0
    1ce4:	9e a7       	std	Y+46, r25	; 0x2e
    1ce6:	8d a7       	std	Y+45, r24	; 0x2d
    1ce8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1cea:	9e a5       	ldd	r25, Y+46	; 0x2e
    1cec:	01 97       	sbiw	r24, 0x01	; 1
    1cee:	f1 f7       	brne	.-4      	; 0x1cec <LCD_sendCommand+0xc0>
    1cf0:	9e a7       	std	Y+46, r25	; 0x2e
    1cf2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cf4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1cf6:	98 a9       	ldd	r25, Y+48	; 0x30
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	98 ab       	std	Y+48, r25	; 0x30
    1cfc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d00:	98 a9       	ldd	r25, Y+48	; 0x30
    1d02:	00 97       	sbiw	r24, 0x00	; 0
    1d04:	69 f7       	brne	.-38     	; 0x1ce0 <LCD_sendCommand+0xb4>
    1d06:	14 c0       	rjmp	.+40     	; 0x1d30 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d08:	69 a9       	ldd	r22, Y+49	; 0x31
    1d0a:	7a a9       	ldd	r23, Y+50	; 0x32
    1d0c:	8b a9       	ldd	r24, Y+51	; 0x33
    1d0e:	9c a9       	ldd	r25, Y+52	; 0x34
    1d10:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d14:	dc 01       	movw	r26, r24
    1d16:	cb 01       	movw	r24, r22
    1d18:	98 ab       	std	Y+48, r25	; 0x30
    1d1a:	8f a7       	std	Y+47, r24	; 0x2f
    1d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1d1e:	98 a9       	ldd	r25, Y+48	; 0x30
    1d20:	9c a7       	std	Y+44, r25	; 0x2c
    1d22:	8b a7       	std	Y+43, r24	; 0x2b
    1d24:	8b a5       	ldd	r24, Y+43	; 0x2b
    1d26:	9c a5       	ldd	r25, Y+44	; 0x2c
    1d28:	01 97       	sbiw	r24, 0x01	; 1
    1d2a:	f1 f7       	brne	.-4      	; 0x1d28 <LCD_sendCommand+0xfc>
    1d2c:	9c a7       	std	Y+44, r25	; 0x2c
    1d2e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1d30:	81 e0       	ldi	r24, 0x01	; 1
    1d32:	66 e0       	ldi	r22, 0x06	; 6
    1d34:	41 e0       	ldi	r20, 0x01	; 1
    1d36:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    1d3a:	80 e0       	ldi	r24, 0x00	; 0
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	a0 e8       	ldi	r26, 0x80	; 128
    1d40:	bf e3       	ldi	r27, 0x3F	; 63
    1d42:	8f a3       	std	Y+39, r24	; 0x27
    1d44:	98 a7       	std	Y+40, r25	; 0x28
    1d46:	a9 a7       	std	Y+41, r26	; 0x29
    1d48:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d4a:	6f a1       	ldd	r22, Y+39	; 0x27
    1d4c:	78 a5       	ldd	r23, Y+40	; 0x28
    1d4e:	89 a5       	ldd	r24, Y+41	; 0x29
    1d50:	9a a5       	ldd	r25, Y+42	; 0x2a
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	30 e0       	ldi	r19, 0x00	; 0
    1d56:	4a ef       	ldi	r20, 0xFA	; 250
    1d58:	54 e4       	ldi	r21, 0x44	; 68
    1d5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d5e:	dc 01       	movw	r26, r24
    1d60:	cb 01       	movw	r24, r22
    1d62:	8b a3       	std	Y+35, r24	; 0x23
    1d64:	9c a3       	std	Y+36, r25	; 0x24
    1d66:	ad a3       	std	Y+37, r26	; 0x25
    1d68:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1d6a:	6b a1       	ldd	r22, Y+35	; 0x23
    1d6c:	7c a1       	ldd	r23, Y+36	; 0x24
    1d6e:	8d a1       	ldd	r24, Y+37	; 0x25
    1d70:	9e a1       	ldd	r25, Y+38	; 0x26
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e8       	ldi	r20, 0x80	; 128
    1d78:	5f e3       	ldi	r21, 0x3F	; 63
    1d7a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1d7e:	88 23       	and	r24, r24
    1d80:	2c f4       	brge	.+10     	; 0x1d8c <LCD_sendCommand+0x160>
		__ticks = 1;
    1d82:	81 e0       	ldi	r24, 0x01	; 1
    1d84:	90 e0       	ldi	r25, 0x00	; 0
    1d86:	9a a3       	std	Y+34, r25	; 0x22
    1d88:	89 a3       	std	Y+33, r24	; 0x21
    1d8a:	3f c0       	rjmp	.+126    	; 0x1e0a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1d8c:	6b a1       	ldd	r22, Y+35	; 0x23
    1d8e:	7c a1       	ldd	r23, Y+36	; 0x24
    1d90:	8d a1       	ldd	r24, Y+37	; 0x25
    1d92:	9e a1       	ldd	r25, Y+38	; 0x26
    1d94:	20 e0       	ldi	r18, 0x00	; 0
    1d96:	3f ef       	ldi	r19, 0xFF	; 255
    1d98:	4f e7       	ldi	r20, 0x7F	; 127
    1d9a:	57 e4       	ldi	r21, 0x47	; 71
    1d9c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1da0:	18 16       	cp	r1, r24
    1da2:	4c f5       	brge	.+82     	; 0x1df6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da4:	6f a1       	ldd	r22, Y+39	; 0x27
    1da6:	78 a5       	ldd	r23, Y+40	; 0x28
    1da8:	89 a5       	ldd	r24, Y+41	; 0x29
    1daa:	9a a5       	ldd	r25, Y+42	; 0x2a
    1dac:	20 e0       	ldi	r18, 0x00	; 0
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	40 e2       	ldi	r20, 0x20	; 32
    1db2:	51 e4       	ldi	r21, 0x41	; 65
    1db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1db8:	dc 01       	movw	r26, r24
    1dba:	cb 01       	movw	r24, r22
    1dbc:	bc 01       	movw	r22, r24
    1dbe:	cd 01       	movw	r24, r26
    1dc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dc4:	dc 01       	movw	r26, r24
    1dc6:	cb 01       	movw	r24, r22
    1dc8:	9a a3       	std	Y+34, r25	; 0x22
    1dca:	89 a3       	std	Y+33, r24	; 0x21
    1dcc:	0f c0       	rjmp	.+30     	; 0x1dec <LCD_sendCommand+0x1c0>
    1dce:	88 ec       	ldi	r24, 0xC8	; 200
    1dd0:	90 e0       	ldi	r25, 0x00	; 0
    1dd2:	98 a3       	std	Y+32, r25	; 0x20
    1dd4:	8f 8f       	std	Y+31, r24	; 0x1f
    1dd6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1dd8:	98 a1       	ldd	r25, Y+32	; 0x20
    1dda:	01 97       	sbiw	r24, 0x01	; 1
    1ddc:	f1 f7       	brne	.-4      	; 0x1dda <LCD_sendCommand+0x1ae>
    1dde:	98 a3       	std	Y+32, r25	; 0x20
    1de0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1de2:	89 a1       	ldd	r24, Y+33	; 0x21
    1de4:	9a a1       	ldd	r25, Y+34	; 0x22
    1de6:	01 97       	sbiw	r24, 0x01	; 1
    1de8:	9a a3       	std	Y+34, r25	; 0x22
    1dea:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dec:	89 a1       	ldd	r24, Y+33	; 0x21
    1dee:	9a a1       	ldd	r25, Y+34	; 0x22
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	69 f7       	brne	.-38     	; 0x1dce <LCD_sendCommand+0x1a2>
    1df4:	14 c0       	rjmp	.+40     	; 0x1e1e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1df6:	6b a1       	ldd	r22, Y+35	; 0x23
    1df8:	7c a1       	ldd	r23, Y+36	; 0x24
    1dfa:	8d a1       	ldd	r24, Y+37	; 0x25
    1dfc:	9e a1       	ldd	r25, Y+38	; 0x26
    1dfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	9a a3       	std	Y+34, r25	; 0x22
    1e08:	89 a3       	std	Y+33, r24	; 0x21
    1e0a:	89 a1       	ldd	r24, Y+33	; 0x21
    1e0c:	9a a1       	ldd	r25, Y+34	; 0x22
    1e0e:	9e 8f       	std	Y+30, r25	; 0x1e
    1e10:	8d 8f       	std	Y+29, r24	; 0x1d
    1e12:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1e14:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1e16:	01 97       	sbiw	r24, 0x01	; 1
    1e18:	f1 f7       	brne	.-4      	; 0x1e16 <LCD_sendCommand+0x1ea>
    1e1a:	9e 8f       	std	Y+30, r25	; 0x1e
    1e1c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1e1e:	80 e0       	ldi	r24, 0x00	; 0
    1e20:	69 ad       	ldd	r22, Y+57	; 0x39
    1e22:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <GPIO_writePort>
    1e26:	80 e0       	ldi	r24, 0x00	; 0
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	a0 e8       	ldi	r26, 0x80	; 128
    1e2c:	bf e3       	ldi	r27, 0x3F	; 63
    1e2e:	89 8f       	std	Y+25, r24	; 0x19
    1e30:	9a 8f       	std	Y+26, r25	; 0x1a
    1e32:	ab 8f       	std	Y+27, r26	; 0x1b
    1e34:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e36:	69 8d       	ldd	r22, Y+25	; 0x19
    1e38:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e3a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e3c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e3e:	20 e0       	ldi	r18, 0x00	; 0
    1e40:	30 e0       	ldi	r19, 0x00	; 0
    1e42:	4a ef       	ldi	r20, 0xFA	; 250
    1e44:	54 e4       	ldi	r21, 0x44	; 68
    1e46:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e4a:	dc 01       	movw	r26, r24
    1e4c:	cb 01       	movw	r24, r22
    1e4e:	8d 8b       	std	Y+21, r24	; 0x15
    1e50:	9e 8b       	std	Y+22, r25	; 0x16
    1e52:	af 8b       	std	Y+23, r26	; 0x17
    1e54:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1e56:	6d 89       	ldd	r22, Y+21	; 0x15
    1e58:	7e 89       	ldd	r23, Y+22	; 0x16
    1e5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1e5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1e5e:	20 e0       	ldi	r18, 0x00	; 0
    1e60:	30 e0       	ldi	r19, 0x00	; 0
    1e62:	40 e8       	ldi	r20, 0x80	; 128
    1e64:	5f e3       	ldi	r21, 0x3F	; 63
    1e66:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1e6a:	88 23       	and	r24, r24
    1e6c:	2c f4       	brge	.+10     	; 0x1e78 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1e6e:	81 e0       	ldi	r24, 0x01	; 1
    1e70:	90 e0       	ldi	r25, 0x00	; 0
    1e72:	9c 8b       	std	Y+20, r25	; 0x14
    1e74:	8b 8b       	std	Y+19, r24	; 0x13
    1e76:	3f c0       	rjmp	.+126    	; 0x1ef6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1e78:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7a:	7e 89       	ldd	r23, Y+22	; 0x16
    1e7c:	8f 89       	ldd	r24, Y+23	; 0x17
    1e7e:	98 8d       	ldd	r25, Y+24	; 0x18
    1e80:	20 e0       	ldi	r18, 0x00	; 0
    1e82:	3f ef       	ldi	r19, 0xFF	; 255
    1e84:	4f e7       	ldi	r20, 0x7F	; 127
    1e86:	57 e4       	ldi	r21, 0x47	; 71
    1e88:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e8c:	18 16       	cp	r1, r24
    1e8e:	4c f5       	brge	.+82     	; 0x1ee2 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e90:	69 8d       	ldd	r22, Y+25	; 0x19
    1e92:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1e94:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1e96:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1e98:	20 e0       	ldi	r18, 0x00	; 0
    1e9a:	30 e0       	ldi	r19, 0x00	; 0
    1e9c:	40 e2       	ldi	r20, 0x20	; 32
    1e9e:	51 e4       	ldi	r21, 0x41	; 65
    1ea0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ea4:	dc 01       	movw	r26, r24
    1ea6:	cb 01       	movw	r24, r22
    1ea8:	bc 01       	movw	r22, r24
    1eaa:	cd 01       	movw	r24, r26
    1eac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb0:	dc 01       	movw	r26, r24
    1eb2:	cb 01       	movw	r24, r22
    1eb4:	9c 8b       	std	Y+20, r25	; 0x14
    1eb6:	8b 8b       	std	Y+19, r24	; 0x13
    1eb8:	0f c0       	rjmp	.+30     	; 0x1ed8 <LCD_sendCommand+0x2ac>
    1eba:	88 ec       	ldi	r24, 0xC8	; 200
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9a 8b       	std	Y+18, r25	; 0x12
    1ec0:	89 8b       	std	Y+17, r24	; 0x11
    1ec2:	89 89       	ldd	r24, Y+17	; 0x11
    1ec4:	9a 89       	ldd	r25, Y+18	; 0x12
    1ec6:	01 97       	sbiw	r24, 0x01	; 1
    1ec8:	f1 f7       	brne	.-4      	; 0x1ec6 <LCD_sendCommand+0x29a>
    1eca:	9a 8b       	std	Y+18, r25	; 0x12
    1ecc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ece:	8b 89       	ldd	r24, Y+19	; 0x13
    1ed0:	9c 89       	ldd	r25, Y+20	; 0x14
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9c 8b       	std	Y+20, r25	; 0x14
    1ed6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ed8:	8b 89       	ldd	r24, Y+19	; 0x13
    1eda:	9c 89       	ldd	r25, Y+20	; 0x14
    1edc:	00 97       	sbiw	r24, 0x00	; 0
    1ede:	69 f7       	brne	.-38     	; 0x1eba <LCD_sendCommand+0x28e>
    1ee0:	14 c0       	rjmp	.+40     	; 0x1f0a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ee2:	6d 89       	ldd	r22, Y+21	; 0x15
    1ee4:	7e 89       	ldd	r23, Y+22	; 0x16
    1ee6:	8f 89       	ldd	r24, Y+23	; 0x17
    1ee8:	98 8d       	ldd	r25, Y+24	; 0x18
    1eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eee:	dc 01       	movw	r26, r24
    1ef0:	cb 01       	movw	r24, r22
    1ef2:	9c 8b       	std	Y+20, r25	; 0x14
    1ef4:	8b 8b       	std	Y+19, r24	; 0x13
    1ef6:	8b 89       	ldd	r24, Y+19	; 0x13
    1ef8:	9c 89       	ldd	r25, Y+20	; 0x14
    1efa:	98 8b       	std	Y+16, r25	; 0x10
    1efc:	8f 87       	std	Y+15, r24	; 0x0f
    1efe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1f00:	98 89       	ldd	r25, Y+16	; 0x10
    1f02:	01 97       	sbiw	r24, 0x01	; 1
    1f04:	f1 f7       	brne	.-4      	; 0x1f02 <LCD_sendCommand+0x2d6>
    1f06:	98 8b       	std	Y+16, r25	; 0x10
    1f08:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    1f0a:	81 e0       	ldi	r24, 0x01	; 1
    1f0c:	66 e0       	ldi	r22, 0x06	; 6
    1f0e:	40 e0       	ldi	r20, 0x00	; 0
    1f10:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    1f14:	80 e0       	ldi	r24, 0x00	; 0
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	a0 e8       	ldi	r26, 0x80	; 128
    1f1a:	bf e3       	ldi	r27, 0x3F	; 63
    1f1c:	8b 87       	std	Y+11, r24	; 0x0b
    1f1e:	9c 87       	std	Y+12, r25	; 0x0c
    1f20:	ad 87       	std	Y+13, r26	; 0x0d
    1f22:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f24:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f26:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f28:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f2a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f2c:	20 e0       	ldi	r18, 0x00	; 0
    1f2e:	30 e0       	ldi	r19, 0x00	; 0
    1f30:	4a ef       	ldi	r20, 0xFA	; 250
    1f32:	54 e4       	ldi	r21, 0x44	; 68
    1f34:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f38:	dc 01       	movw	r26, r24
    1f3a:	cb 01       	movw	r24, r22
    1f3c:	8f 83       	std	Y+7, r24	; 0x07
    1f3e:	98 87       	std	Y+8, r25	; 0x08
    1f40:	a9 87       	std	Y+9, r26	; 0x09
    1f42:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f44:	6f 81       	ldd	r22, Y+7	; 0x07
    1f46:	78 85       	ldd	r23, Y+8	; 0x08
    1f48:	89 85       	ldd	r24, Y+9	; 0x09
    1f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f4c:	20 e0       	ldi	r18, 0x00	; 0
    1f4e:	30 e0       	ldi	r19, 0x00	; 0
    1f50:	40 e8       	ldi	r20, 0x80	; 128
    1f52:	5f e3       	ldi	r21, 0x3F	; 63
    1f54:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f58:	88 23       	and	r24, r24
    1f5a:	2c f4       	brge	.+10     	; 0x1f66 <LCD_sendCommand+0x33a>
		__ticks = 1;
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	9e 83       	std	Y+6, r25	; 0x06
    1f62:	8d 83       	std	Y+5, r24	; 0x05
    1f64:	3f c0       	rjmp	.+126    	; 0x1fe4 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    1f66:	6f 81       	ldd	r22, Y+7	; 0x07
    1f68:	78 85       	ldd	r23, Y+8	; 0x08
    1f6a:	89 85       	ldd	r24, Y+9	; 0x09
    1f6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	3f ef       	ldi	r19, 0xFF	; 255
    1f72:	4f e7       	ldi	r20, 0x7F	; 127
    1f74:	57 e4       	ldi	r21, 0x47	; 71
    1f76:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f7a:	18 16       	cp	r1, r24
    1f7c:	4c f5       	brge	.+82     	; 0x1fd0 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f7e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f80:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f82:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f84:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f86:	20 e0       	ldi	r18, 0x00	; 0
    1f88:	30 e0       	ldi	r19, 0x00	; 0
    1f8a:	40 e2       	ldi	r20, 0x20	; 32
    1f8c:	51 e4       	ldi	r21, 0x41	; 65
    1f8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f92:	dc 01       	movw	r26, r24
    1f94:	cb 01       	movw	r24, r22
    1f96:	bc 01       	movw	r22, r24
    1f98:	cd 01       	movw	r24, r26
    1f9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f9e:	dc 01       	movw	r26, r24
    1fa0:	cb 01       	movw	r24, r22
    1fa2:	9e 83       	std	Y+6, r25	; 0x06
    1fa4:	8d 83       	std	Y+5, r24	; 0x05
    1fa6:	0f c0       	rjmp	.+30     	; 0x1fc6 <LCD_sendCommand+0x39a>
    1fa8:	88 ec       	ldi	r24, 0xC8	; 200
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	9c 83       	std	Y+4, r25	; 0x04
    1fae:	8b 83       	std	Y+3, r24	; 0x03
    1fb0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fb2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fb4:	01 97       	sbiw	r24, 0x01	; 1
    1fb6:	f1 f7       	brne	.-4      	; 0x1fb4 <LCD_sendCommand+0x388>
    1fb8:	9c 83       	std	Y+4, r25	; 0x04
    1fba:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbc:	8d 81       	ldd	r24, Y+5	; 0x05
    1fbe:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc0:	01 97       	sbiw	r24, 0x01	; 1
    1fc2:	9e 83       	std	Y+6, r25	; 0x06
    1fc4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fca:	00 97       	sbiw	r24, 0x00	; 0
    1fcc:	69 f7       	brne	.-38     	; 0x1fa8 <LCD_sendCommand+0x37c>
    1fce:	14 c0       	rjmp	.+40     	; 0x1ff8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fd0:	6f 81       	ldd	r22, Y+7	; 0x07
    1fd2:	78 85       	ldd	r23, Y+8	; 0x08
    1fd4:	89 85       	ldd	r24, Y+9	; 0x09
    1fd6:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	9e 83       	std	Y+6, r25	; 0x06
    1fe2:	8d 83       	std	Y+5, r24	; 0x05
    1fe4:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe6:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe8:	9a 83       	std	Y+2, r25	; 0x02
    1fea:	89 83       	std	Y+1, r24	; 0x01
    1fec:	89 81       	ldd	r24, Y+1	; 0x01
    1fee:	9a 81       	ldd	r25, Y+2	; 0x02
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	f1 f7       	brne	.-4      	; 0x1ff0 <LCD_sendCommand+0x3c4>
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    1ff8:	e9 96       	adiw	r28, 0x39	; 57
    1ffa:	0f b6       	in	r0, 0x3f	; 63
    1ffc:	f8 94       	cli
    1ffe:	de bf       	out	0x3e, r29	; 62
    2000:	0f be       	out	0x3f, r0	; 63
    2002:	cd bf       	out	0x3d, r28	; 61
    2004:	cf 91       	pop	r28
    2006:	df 91       	pop	r29
    2008:	08 95       	ret

0000200a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    200a:	df 93       	push	r29
    200c:	cf 93       	push	r28
    200e:	cd b7       	in	r28, 0x3d	; 61
    2010:	de b7       	in	r29, 0x3e	; 62
    2012:	e9 97       	sbiw	r28, 0x39	; 57
    2014:	0f b6       	in	r0, 0x3f	; 63
    2016:	f8 94       	cli
    2018:	de bf       	out	0x3e, r29	; 62
    201a:	0f be       	out	0x3f, r0	; 63
    201c:	cd bf       	out	0x3d, r28	; 61
    201e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2020:	81 e0       	ldi	r24, 0x01	; 1
    2022:	67 e0       	ldi	r22, 0x07	; 7
    2024:	41 e0       	ldi	r20, 0x01	; 1
    2026:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    202a:	80 e0       	ldi	r24, 0x00	; 0
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	a0 e8       	ldi	r26, 0x80	; 128
    2030:	bf e3       	ldi	r27, 0x3F	; 63
    2032:	8d ab       	std	Y+53, r24	; 0x35
    2034:	9e ab       	std	Y+54, r25	; 0x36
    2036:	af ab       	std	Y+55, r26	; 0x37
    2038:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    203a:	6d a9       	ldd	r22, Y+53	; 0x35
    203c:	7e a9       	ldd	r23, Y+54	; 0x36
    203e:	8f a9       	ldd	r24, Y+55	; 0x37
    2040:	98 ad       	ldd	r25, Y+56	; 0x38
    2042:	20 e0       	ldi	r18, 0x00	; 0
    2044:	30 e0       	ldi	r19, 0x00	; 0
    2046:	4a ef       	ldi	r20, 0xFA	; 250
    2048:	54 e4       	ldi	r21, 0x44	; 68
    204a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204e:	dc 01       	movw	r26, r24
    2050:	cb 01       	movw	r24, r22
    2052:	89 ab       	std	Y+49, r24	; 0x31
    2054:	9a ab       	std	Y+50, r25	; 0x32
    2056:	ab ab       	std	Y+51, r26	; 0x33
    2058:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    205a:	69 a9       	ldd	r22, Y+49	; 0x31
    205c:	7a a9       	ldd	r23, Y+50	; 0x32
    205e:	8b a9       	ldd	r24, Y+51	; 0x33
    2060:	9c a9       	ldd	r25, Y+52	; 0x34
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	40 e8       	ldi	r20, 0x80	; 128
    2068:	5f e3       	ldi	r21, 0x3F	; 63
    206a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    206e:	88 23       	and	r24, r24
    2070:	2c f4       	brge	.+10     	; 0x207c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2072:	81 e0       	ldi	r24, 0x01	; 1
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	98 ab       	std	Y+48, r25	; 0x30
    2078:	8f a7       	std	Y+47, r24	; 0x2f
    207a:	3f c0       	rjmp	.+126    	; 0x20fa <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    207c:	69 a9       	ldd	r22, Y+49	; 0x31
    207e:	7a a9       	ldd	r23, Y+50	; 0x32
    2080:	8b a9       	ldd	r24, Y+51	; 0x33
    2082:	9c a9       	ldd	r25, Y+52	; 0x34
    2084:	20 e0       	ldi	r18, 0x00	; 0
    2086:	3f ef       	ldi	r19, 0xFF	; 255
    2088:	4f e7       	ldi	r20, 0x7F	; 127
    208a:	57 e4       	ldi	r21, 0x47	; 71
    208c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2090:	18 16       	cp	r1, r24
    2092:	4c f5       	brge	.+82     	; 0x20e6 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2094:	6d a9       	ldd	r22, Y+53	; 0x35
    2096:	7e a9       	ldd	r23, Y+54	; 0x36
    2098:	8f a9       	ldd	r24, Y+55	; 0x37
    209a:	98 ad       	ldd	r25, Y+56	; 0x38
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	40 e2       	ldi	r20, 0x20	; 32
    20a2:	51 e4       	ldi	r21, 0x41	; 65
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	bc 01       	movw	r22, r24
    20ae:	cd 01       	movw	r24, r26
    20b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20b4:	dc 01       	movw	r26, r24
    20b6:	cb 01       	movw	r24, r22
    20b8:	98 ab       	std	Y+48, r25	; 0x30
    20ba:	8f a7       	std	Y+47, r24	; 0x2f
    20bc:	0f c0       	rjmp	.+30     	; 0x20dc <LCD_displayCharacter+0xd2>
    20be:	88 ec       	ldi	r24, 0xC8	; 200
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	9e a7       	std	Y+46, r25	; 0x2e
    20c4:	8d a7       	std	Y+45, r24	; 0x2d
    20c6:	8d a5       	ldd	r24, Y+45	; 0x2d
    20c8:	9e a5       	ldd	r25, Y+46	; 0x2e
    20ca:	01 97       	sbiw	r24, 0x01	; 1
    20cc:	f1 f7       	brne	.-4      	; 0x20ca <LCD_displayCharacter+0xc0>
    20ce:	9e a7       	std	Y+46, r25	; 0x2e
    20d0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d2:	8f a5       	ldd	r24, Y+47	; 0x2f
    20d4:	98 a9       	ldd	r25, Y+48	; 0x30
    20d6:	01 97       	sbiw	r24, 0x01	; 1
    20d8:	98 ab       	std	Y+48, r25	; 0x30
    20da:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20dc:	8f a5       	ldd	r24, Y+47	; 0x2f
    20de:	98 a9       	ldd	r25, Y+48	; 0x30
    20e0:	00 97       	sbiw	r24, 0x00	; 0
    20e2:	69 f7       	brne	.-38     	; 0x20be <LCD_displayCharacter+0xb4>
    20e4:	14 c0       	rjmp	.+40     	; 0x210e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20e6:	69 a9       	ldd	r22, Y+49	; 0x31
    20e8:	7a a9       	ldd	r23, Y+50	; 0x32
    20ea:	8b a9       	ldd	r24, Y+51	; 0x33
    20ec:	9c a9       	ldd	r25, Y+52	; 0x34
    20ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20f2:	dc 01       	movw	r26, r24
    20f4:	cb 01       	movw	r24, r22
    20f6:	98 ab       	std	Y+48, r25	; 0x30
    20f8:	8f a7       	std	Y+47, r24	; 0x2f
    20fa:	8f a5       	ldd	r24, Y+47	; 0x2f
    20fc:	98 a9       	ldd	r25, Y+48	; 0x30
    20fe:	9c a7       	std	Y+44, r25	; 0x2c
    2100:	8b a7       	std	Y+43, r24	; 0x2b
    2102:	8b a5       	ldd	r24, Y+43	; 0x2b
    2104:	9c a5       	ldd	r25, Y+44	; 0x2c
    2106:	01 97       	sbiw	r24, 0x01	; 1
    2108:	f1 f7       	brne	.-4      	; 0x2106 <LCD_displayCharacter+0xfc>
    210a:	9c a7       	std	Y+44, r25	; 0x2c
    210c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    210e:	81 e0       	ldi	r24, 0x01	; 1
    2110:	66 e0       	ldi	r22, 0x06	; 6
    2112:	41 e0       	ldi	r20, 0x01	; 1
    2114:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    2118:	80 e0       	ldi	r24, 0x00	; 0
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	a0 e8       	ldi	r26, 0x80	; 128
    211e:	bf e3       	ldi	r27, 0x3F	; 63
    2120:	8f a3       	std	Y+39, r24	; 0x27
    2122:	98 a7       	std	Y+40, r25	; 0x28
    2124:	a9 a7       	std	Y+41, r26	; 0x29
    2126:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2128:	6f a1       	ldd	r22, Y+39	; 0x27
    212a:	78 a5       	ldd	r23, Y+40	; 0x28
    212c:	89 a5       	ldd	r24, Y+41	; 0x29
    212e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	4a ef       	ldi	r20, 0xFA	; 250
    2136:	54 e4       	ldi	r21, 0x44	; 68
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	8b a3       	std	Y+35, r24	; 0x23
    2142:	9c a3       	std	Y+36, r25	; 0x24
    2144:	ad a3       	std	Y+37, r26	; 0x25
    2146:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2148:	6b a1       	ldd	r22, Y+35	; 0x23
    214a:	7c a1       	ldd	r23, Y+36	; 0x24
    214c:	8d a1       	ldd	r24, Y+37	; 0x25
    214e:	9e a1       	ldd	r25, Y+38	; 0x26
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	40 e8       	ldi	r20, 0x80	; 128
    2156:	5f e3       	ldi	r21, 0x3F	; 63
    2158:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    215c:	88 23       	and	r24, r24
    215e:	2c f4       	brge	.+10     	; 0x216a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2160:	81 e0       	ldi	r24, 0x01	; 1
    2162:	90 e0       	ldi	r25, 0x00	; 0
    2164:	9a a3       	std	Y+34, r25	; 0x22
    2166:	89 a3       	std	Y+33, r24	; 0x21
    2168:	3f c0       	rjmp	.+126    	; 0x21e8 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    216a:	6b a1       	ldd	r22, Y+35	; 0x23
    216c:	7c a1       	ldd	r23, Y+36	; 0x24
    216e:	8d a1       	ldd	r24, Y+37	; 0x25
    2170:	9e a1       	ldd	r25, Y+38	; 0x26
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	4c f5       	brge	.+82     	; 0x21d4 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	6f a1       	ldd	r22, Y+39	; 0x27
    2184:	78 a5       	ldd	r23, Y+40	; 0x28
    2186:	89 a5       	ldd	r24, Y+41	; 0x29
    2188:	9a a5       	ldd	r25, Y+42	; 0x2a
    218a:	20 e0       	ldi	r18, 0x00	; 0
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	40 e2       	ldi	r20, 0x20	; 32
    2190:	51 e4       	ldi	r21, 0x41	; 65
    2192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2196:	dc 01       	movw	r26, r24
    2198:	cb 01       	movw	r24, r22
    219a:	bc 01       	movw	r22, r24
    219c:	cd 01       	movw	r24, r26
    219e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a2:	dc 01       	movw	r26, r24
    21a4:	cb 01       	movw	r24, r22
    21a6:	9a a3       	std	Y+34, r25	; 0x22
    21a8:	89 a3       	std	Y+33, r24	; 0x21
    21aa:	0f c0       	rjmp	.+30     	; 0x21ca <LCD_displayCharacter+0x1c0>
    21ac:	88 ec       	ldi	r24, 0xC8	; 200
    21ae:	90 e0       	ldi	r25, 0x00	; 0
    21b0:	98 a3       	std	Y+32, r25	; 0x20
    21b2:	8f 8f       	std	Y+31, r24	; 0x1f
    21b4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    21b6:	98 a1       	ldd	r25, Y+32	; 0x20
    21b8:	01 97       	sbiw	r24, 0x01	; 1
    21ba:	f1 f7       	brne	.-4      	; 0x21b8 <LCD_displayCharacter+0x1ae>
    21bc:	98 a3       	std	Y+32, r25	; 0x20
    21be:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c0:	89 a1       	ldd	r24, Y+33	; 0x21
    21c2:	9a a1       	ldd	r25, Y+34	; 0x22
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	9a a3       	std	Y+34, r25	; 0x22
    21c8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ca:	89 a1       	ldd	r24, Y+33	; 0x21
    21cc:	9a a1       	ldd	r25, Y+34	; 0x22
    21ce:	00 97       	sbiw	r24, 0x00	; 0
    21d0:	69 f7       	brne	.-38     	; 0x21ac <LCD_displayCharacter+0x1a2>
    21d2:	14 c0       	rjmp	.+40     	; 0x21fc <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21d4:	6b a1       	ldd	r22, Y+35	; 0x23
    21d6:	7c a1       	ldd	r23, Y+36	; 0x24
    21d8:	8d a1       	ldd	r24, Y+37	; 0x25
    21da:	9e a1       	ldd	r25, Y+38	; 0x26
    21dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21e0:	dc 01       	movw	r26, r24
    21e2:	cb 01       	movw	r24, r22
    21e4:	9a a3       	std	Y+34, r25	; 0x22
    21e6:	89 a3       	std	Y+33, r24	; 0x21
    21e8:	89 a1       	ldd	r24, Y+33	; 0x21
    21ea:	9a a1       	ldd	r25, Y+34	; 0x22
    21ec:	9e 8f       	std	Y+30, r25	; 0x1e
    21ee:	8d 8f       	std	Y+29, r24	; 0x1d
    21f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21f2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21f4:	01 97       	sbiw	r24, 0x01	; 1
    21f6:	f1 f7       	brne	.-4      	; 0x21f4 <LCD_displayCharacter+0x1ea>
    21f8:	9e 8f       	std	Y+30, r25	; 0x1e
    21fa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    21fc:	80 e0       	ldi	r24, 0x00	; 0
    21fe:	69 ad       	ldd	r22, Y+57	; 0x39
    2200:	0e 94 f1 0c 	call	0x19e2	; 0x19e2 <GPIO_writePort>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e8       	ldi	r26, 0x80	; 128
    220a:	bf e3       	ldi	r27, 0x3F	; 63
    220c:	89 8f       	std	Y+25, r24	; 0x19
    220e:	9a 8f       	std	Y+26, r25	; 0x1a
    2210:	ab 8f       	std	Y+27, r26	; 0x1b
    2212:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	69 8d       	ldd	r22, Y+25	; 0x19
    2216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a ef       	ldi	r20, 0xFA	; 250
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8d 8b       	std	Y+21, r24	; 0x15
    222e:	9e 8b       	std	Y+22, r25	; 0x16
    2230:	af 8b       	std	Y+23, r26	; 0x17
    2232:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2256:	6d 89       	ldd	r22, Y+21	; 0x15
    2258:	7e 89       	ldd	r23, Y+22	; 0x16
    225a:	8f 89       	ldd	r24, Y+23	; 0x17
    225c:	98 8d       	ldd	r25, Y+24	; 0x18
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	57 e4       	ldi	r21, 0x47	; 71
    2266:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	4c f5       	brge	.+82     	; 0x22c0 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9c 8b       	std	Y+20, r25	; 0x14
    2294:	8b 8b       	std	Y+19, r24	; 0x13
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <LCD_displayCharacter+0x2ac>
    2298:	88 ec       	ldi	r24, 0xC8	; 200
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9a 8b       	std	Y+18, r25	; 0x12
    229e:	89 8b       	std	Y+17, r24	; 0x11
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <LCD_displayCharacter+0x29a>
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <LCD_displayCharacter+0x28e>
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	8f 87       	std	Y+15, r24	; 0x0f
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	98 89       	ldd	r25, Y+16	; 0x10
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <LCD_displayCharacter+0x2d6>
    22e4:	98 8b       	std	Y+16, r25	; 0x10
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    22e8:	81 e0       	ldi	r24, 0x01	; 1
    22ea:	66 e0       	ldi	r22, 0x06	; 6
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 27 0b 	call	0x164e	; 0x164e <GPIO_writePin>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e8       	ldi	r26, 0x80	; 128
    22f8:	bf e3       	ldi	r27, 0x3F	; 63
    22fa:	8b 87       	std	Y+11, r24	; 0x0b
    22fc:	9c 87       	std	Y+12, r25	; 0x0c
    22fe:	ad 87       	std	Y+13, r26	; 0x0d
    2300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6b 85       	ldd	r22, Y+11	; 0x0b
    2304:	7c 85       	ldd	r23, Y+12	; 0x0c
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8f 83       	std	Y+7, r24	; 0x07
    231c:	98 87       	std	Y+8, r25	; 0x08
    231e:	a9 87       	std	Y+9, r26	; 0x09
    2320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <LCD_displayCharacter+0x39a>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_displayCharacter+0x388>
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <LCD_displayCharacter+0x37c>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_displayCharacter+0x3c4>
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    23d6:	e9 96       	adiw	r28, 0x39	; 57
    23d8:	0f b6       	in	r0, 0x3f	; 63
    23da:	f8 94       	cli
    23dc:	de bf       	out	0x3e, r29	; 62
    23de:	0f be       	out	0x3f, r0	; 63
    23e0:	cd bf       	out	0x3d, r28	; 61
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <LCD_displayString+0x6>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	9b 83       	std	Y+3, r25	; 0x03
    23f6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    23f8:	19 82       	std	Y+1, r1	; 0x01
    23fa:	0e c0       	rjmp	.+28     	; 0x2418 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    23fc:	89 81       	ldd	r24, Y+1	; 0x01
    23fe:	28 2f       	mov	r18, r24
    2400:	30 e0       	ldi	r19, 0x00	; 0
    2402:	8a 81       	ldd	r24, Y+2	; 0x02
    2404:	9b 81       	ldd	r25, Y+3	; 0x03
    2406:	fc 01       	movw	r30, r24
    2408:	e2 0f       	add	r30, r18
    240a:	f3 1f       	adc	r31, r19
    240c:	80 81       	ld	r24, Z
    240e:	0e 94 05 10 	call	0x200a	; 0x200a <LCD_displayCharacter>
		i++;
    2412:	89 81       	ldd	r24, Y+1	; 0x01
    2414:	8f 5f       	subi	r24, 0xFF	; 255
    2416:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2418:	89 81       	ldd	r24, Y+1	; 0x01
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	8a 81       	ldd	r24, Y+2	; 0x02
    2420:	9b 81       	ldd	r25, Y+3	; 0x03
    2422:	fc 01       	movw	r30, r24
    2424:	e2 0f       	add	r30, r18
    2426:	f3 1f       	adc	r31, r19
    2428:	80 81       	ld	r24, Z
    242a:	88 23       	and	r24, r24
    242c:	39 f7       	brne	.-50     	; 0x23fc <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    242e:	0f 90       	pop	r0
    2430:	0f 90       	pop	r0
    2432:	0f 90       	pop	r0
    2434:	cf 91       	pop	r28
    2436:	df 91       	pop	r29
    2438:	08 95       	ret

0000243a <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    243a:	df 93       	push	r29
    243c:	cf 93       	push	r28
    243e:	00 d0       	rcall	.+0      	; 0x2440 <LCD_moveCursor+0x6>
    2440:	00 d0       	rcall	.+0      	; 0x2442 <LCD_moveCursor+0x8>
    2442:	0f 92       	push	r0
    2444:	cd b7       	in	r28, 0x3d	; 61
    2446:	de b7       	in	r29, 0x3e	; 62
    2448:	8a 83       	std	Y+2, r24	; 0x02
    244a:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    244c:	8a 81       	ldd	r24, Y+2	; 0x02
    244e:	28 2f       	mov	r18, r24
    2450:	30 e0       	ldi	r19, 0x00	; 0
    2452:	3d 83       	std	Y+5, r19	; 0x05
    2454:	2c 83       	std	Y+4, r18	; 0x04
    2456:	8c 81       	ldd	r24, Y+4	; 0x04
    2458:	9d 81       	ldd	r25, Y+5	; 0x05
    245a:	81 30       	cpi	r24, 0x01	; 1
    245c:	91 05       	cpc	r25, r1
    245e:	c1 f0       	breq	.+48     	; 0x2490 <LCD_moveCursor+0x56>
    2460:	2c 81       	ldd	r18, Y+4	; 0x04
    2462:	3d 81       	ldd	r19, Y+5	; 0x05
    2464:	22 30       	cpi	r18, 0x02	; 2
    2466:	31 05       	cpc	r19, r1
    2468:	2c f4       	brge	.+10     	; 0x2474 <LCD_moveCursor+0x3a>
    246a:	8c 81       	ldd	r24, Y+4	; 0x04
    246c:	9d 81       	ldd	r25, Y+5	; 0x05
    246e:	00 97       	sbiw	r24, 0x00	; 0
    2470:	61 f0       	breq	.+24     	; 0x248a <LCD_moveCursor+0x50>
    2472:	19 c0       	rjmp	.+50     	; 0x24a6 <LCD_moveCursor+0x6c>
    2474:	2c 81       	ldd	r18, Y+4	; 0x04
    2476:	3d 81       	ldd	r19, Y+5	; 0x05
    2478:	22 30       	cpi	r18, 0x02	; 2
    247a:	31 05       	cpc	r19, r1
    247c:	69 f0       	breq	.+26     	; 0x2498 <LCD_moveCursor+0x5e>
    247e:	8c 81       	ldd	r24, Y+4	; 0x04
    2480:	9d 81       	ldd	r25, Y+5	; 0x05
    2482:	83 30       	cpi	r24, 0x03	; 3
    2484:	91 05       	cpc	r25, r1
    2486:	61 f0       	breq	.+24     	; 0x24a0 <LCD_moveCursor+0x66>
    2488:	0e c0       	rjmp	.+28     	; 0x24a6 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    248a:	8b 81       	ldd	r24, Y+3	; 0x03
    248c:	89 83       	std	Y+1, r24	; 0x01
    248e:	0b c0       	rjmp	.+22     	; 0x24a6 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2490:	8b 81       	ldd	r24, Y+3	; 0x03
    2492:	80 5c       	subi	r24, 0xC0	; 192
    2494:	89 83       	std	Y+1, r24	; 0x01
    2496:	07 c0       	rjmp	.+14     	; 0x24a6 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2498:	8b 81       	ldd	r24, Y+3	; 0x03
    249a:	80 5f       	subi	r24, 0xF0	; 240
    249c:	89 83       	std	Y+1, r24	; 0x01
    249e:	03 c0       	rjmp	.+6      	; 0x24a6 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    24a0:	8b 81       	ldd	r24, Y+3	; 0x03
    24a2:	80 5b       	subi	r24, 0xB0	; 176
    24a4:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    24a6:	89 81       	ldd	r24, Y+1	; 0x01
    24a8:	80 68       	ori	r24, 0x80	; 128
    24aa:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_sendCommand>
}
    24ae:	0f 90       	pop	r0
    24b0:	0f 90       	pop	r0
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	cf 91       	pop	r28
    24ba:	df 91       	pop	r29
    24bc:	08 95       	ret

000024be <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    24be:	df 93       	push	r29
    24c0:	cf 93       	push	r28
    24c2:	00 d0       	rcall	.+0      	; 0x24c4 <LCD_displayStringRowColumn+0x6>
    24c4:	00 d0       	rcall	.+0      	; 0x24c6 <LCD_displayStringRowColumn+0x8>
    24c6:	cd b7       	in	r28, 0x3d	; 61
    24c8:	de b7       	in	r29, 0x3e	; 62
    24ca:	89 83       	std	Y+1, r24	; 0x01
    24cc:	6a 83       	std	Y+2, r22	; 0x02
    24ce:	5c 83       	std	Y+4, r21	; 0x04
    24d0:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    24d2:	89 81       	ldd	r24, Y+1	; 0x01
    24d4:	6a 81       	ldd	r22, Y+2	; 0x02
    24d6:	0e 94 1d 12 	call	0x243a	; 0x243a <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    24da:	8b 81       	ldd	r24, Y+3	; 0x03
    24dc:	9c 81       	ldd	r25, Y+4	; 0x04
    24de:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_displayString>
}
    24e2:	0f 90       	pop	r0
    24e4:	0f 90       	pop	r0
    24e6:	0f 90       	pop	r0
    24e8:	0f 90       	pop	r0
    24ea:	cf 91       	pop	r28
    24ec:	df 91       	pop	r29
    24ee:	08 95       	ret

000024f0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    24f0:	df 93       	push	r29
    24f2:	cf 93       	push	r28
    24f4:	cd b7       	in	r28, 0x3d	; 61
    24f6:	de b7       	in	r29, 0x3e	; 62
    24f8:	62 97       	sbiw	r28, 0x12	; 18
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	f8 94       	cli
    24fe:	de bf       	out	0x3e, r29	; 62
    2500:	0f be       	out	0x3f, r0	; 63
    2502:	cd bf       	out	0x3d, r28	; 61
    2504:	9a 8b       	std	Y+18, r25	; 0x12
    2506:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2508:	89 89       	ldd	r24, Y+17	; 0x11
    250a:	9a 89       	ldd	r25, Y+18	; 0x12
    250c:	9e 01       	movw	r18, r28
    250e:	2f 5f       	subi	r18, 0xFF	; 255
    2510:	3f 4f       	sbci	r19, 0xFF	; 255
    2512:	b9 01       	movw	r22, r18
    2514:	4a e0       	ldi	r20, 0x0A	; 10
    2516:	50 e0       	ldi	r21, 0x00	; 0
    2518:	0e 94 ad 16 	call	0x2d5a	; 0x2d5a <itoa>
   LCD_displayString(buff); /* Display the string */
    251c:	ce 01       	movw	r24, r28
    251e:	01 96       	adiw	r24, 0x01	; 1
    2520:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <LCD_displayString>
}
    2524:	62 96       	adiw	r28, 0x12	; 18
    2526:	0f b6       	in	r0, 0x3f	; 63
    2528:	f8 94       	cli
    252a:	de bf       	out	0x3e, r29	; 62
    252c:	0f be       	out	0x3f, r0	; 63
    252e:	cd bf       	out	0x3d, r28	; 61
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	cd b7       	in	r28, 0x3d	; 61
    253c:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	0e 94 16 0e 	call	0x1c2c	; 0x1c2c <LCD_sendCommand>
}
    2544:	cf 91       	pop	r28
    2546:	df 91       	pop	r29
    2548:	08 95       	ret

0000254a <receivePassword>:
#include "std_types.h"
#define PASSWORD_LENGTH 5

/* Functions Definitions */

void receivePassword(uint8 *password){
    254a:	0f 93       	push	r16
    254c:	1f 93       	push	r17
    254e:	df 93       	push	r29
    2550:	cf 93       	push	r28
    2552:	cd b7       	in	r28, 0x3d	; 61
    2554:	de b7       	in	r29, 0x3e	; 62
    2556:	61 97       	sbiw	r28, 0x11	; 17
    2558:	0f b6       	in	r0, 0x3f	; 63
    255a:	f8 94       	cli
    255c:	de bf       	out	0x3e, r29	; 62
    255e:	0f be       	out	0x3f, r0	; 63
    2560:	cd bf       	out	0x3d, r28	; 61
    2562:	99 8b       	std	Y+17, r25	; 0x11
    2564:	88 8b       	std	Y+16, r24	; 0x10
	/* Receive the password from the master */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    2566:	1f 86       	std	Y+15, r1	; 0x0f
    2568:	81 c0       	rjmp	.+258    	; 0x266c <receivePassword+0x122>
		password[i] = UART_recieveByte();
    256a:	8f 85       	ldd	r24, Y+15	; 0x0f
    256c:	28 2f       	mov	r18, r24
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	88 89       	ldd	r24, Y+16	; 0x10
    2572:	99 89       	ldd	r25, Y+17	; 0x11
    2574:	8c 01       	movw	r16, r24
    2576:	02 0f       	add	r16, r18
    2578:	13 1f       	adc	r17, r19
    257a:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
    257e:	f8 01       	movw	r30, r16
    2580:	80 83       	st	Z, r24
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e2       	ldi	r26, 0x20	; 32
    2588:	b1 e4       	ldi	r27, 0x41	; 65
    258a:	8b 87       	std	Y+11, r24	; 0x0b
    258c:	9c 87       	std	Y+12, r25	; 0x0c
    258e:	ad 87       	std	Y+13, r26	; 0x0d
    2590:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	6b 85       	ldd	r22, Y+11	; 0x0b
    2594:	7c 85       	ldd	r23, Y+12	; 0x0c
    2596:	8d 85       	ldd	r24, Y+13	; 0x0d
    2598:	9e 85       	ldd	r25, Y+14	; 0x0e
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a ef       	ldi	r20, 0xFA	; 250
    25a0:	54 e4       	ldi	r21, 0x44	; 68
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8f 83       	std	Y+7, r24	; 0x07
    25ac:	98 87       	std	Y+8, r25	; 0x08
    25ae:	a9 87       	std	Y+9, r26	; 0x09
    25b0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    25b2:	6f 81       	ldd	r22, Y+7	; 0x07
    25b4:	78 85       	ldd	r23, Y+8	; 0x08
    25b6:	89 85       	ldd	r24, Y+9	; 0x09
    25b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <receivePassword+0x8a>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9e 83       	std	Y+6, r25	; 0x06
    25d0:	8d 83       	std	Y+5, r24	; 0x05
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <receivePassword+0x108>
	else if (__tmp > 65535)
    25d4:	6f 81       	ldd	r22, Y+7	; 0x07
    25d6:	78 85       	ldd	r23, Y+8	; 0x08
    25d8:	89 85       	ldd	r24, Y+9	; 0x09
    25da:	9a 85       	ldd	r25, Y+10	; 0x0a
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <receivePassword+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	6b 85       	ldd	r22, Y+11	; 0x0b
    25ee:	7c 85       	ldd	r23, Y+12	; 0x0c
    25f0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25f2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9e 83       	std	Y+6, r25	; 0x06
    2612:	8d 83       	std	Y+5, r24	; 0x05
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <receivePassword+0xea>
    2616:	88 ec       	ldi	r24, 0xC8	; 200
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9c 83       	std	Y+4, r25	; 0x04
    261c:	8b 83       	std	Y+3, r24	; 0x03
    261e:	8b 81       	ldd	r24, Y+3	; 0x03
    2620:	9c 81       	ldd	r25, Y+4	; 0x04
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <receivePassword+0xd8>
    2626:	9c 83       	std	Y+4, r25	; 0x04
    2628:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8d 81       	ldd	r24, Y+5	; 0x05
    262c:	9e 81       	ldd	r25, Y+6	; 0x06
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9e 83       	std	Y+6, r25	; 0x06
    2632:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8d 81       	ldd	r24, Y+5	; 0x05
    2636:	9e 81       	ldd	r25, Y+6	; 0x06
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <receivePassword+0xcc>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <receivePassword+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6f 81       	ldd	r22, Y+7	; 0x07
    2640:	78 85       	ldd	r23, Y+8	; 0x08
    2642:	89 85       	ldd	r24, Y+9	; 0x09
    2644:	9a 85       	ldd	r25, Y+10	; 0x0a
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9e 83       	std	Y+6, r25	; 0x06
    2650:	8d 83       	std	Y+5, r24	; 0x05
    2652:	8d 81       	ldd	r24, Y+5	; 0x05
    2654:	9e 81       	ldd	r25, Y+6	; 0x06
    2656:	9a 83       	std	Y+2, r25	; 0x02
    2658:	89 83       	std	Y+1, r24	; 0x01
    265a:	89 81       	ldd	r24, Y+1	; 0x01
    265c:	9a 81       	ldd	r25, Y+2	; 0x02
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <receivePassword+0x114>
    2662:	9a 83       	std	Y+2, r25	; 0x02
    2664:	89 83       	std	Y+1, r24	; 0x01

/* Functions Definitions */

void receivePassword(uint8 *password){
	/* Receive the password from the master */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    2666:	8f 85       	ldd	r24, Y+15	; 0x0f
    2668:	8f 5f       	subi	r24, 0xFF	; 255
    266a:	8f 87       	std	Y+15, r24	; 0x0f
    266c:	8f 85       	ldd	r24, Y+15	; 0x0f
    266e:	85 30       	cpi	r24, 0x05	; 5
    2670:	08 f4       	brcc	.+2      	; 0x2674 <receivePassword+0x12a>
    2672:	7b cf       	rjmp	.-266    	; 0x256a <receivePassword+0x20>
		password[i] = UART_recieveByte();
		_delay_ms(10); /* Delay after receiving each byte */
	}
}
    2674:	61 96       	adiw	r28, 0x11	; 17
    2676:	0f b6       	in	r0, 0x3f	; 63
    2678:	f8 94       	cli
    267a:	de bf       	out	0x3e, r29	; 62
    267c:	0f be       	out	0x3f, r0	; 63
    267e:	cd bf       	out	0x3d, r28	; 61
    2680:	cf 91       	pop	r28
    2682:	df 91       	pop	r29
    2684:	1f 91       	pop	r17
    2686:	0f 91       	pop	r16
    2688:	08 95       	ret

0000268a <comparePasswords>:

uint8 comparePasswords(uint8 *password,uint8 *secpassword){
    268a:	df 93       	push	r29
    268c:	cf 93       	push	r28
    268e:	00 d0       	rcall	.+0      	; 0x2690 <comparePasswords+0x6>
    2690:	00 d0       	rcall	.+0      	; 0x2692 <comparePasswords+0x8>
    2692:	00 d0       	rcall	.+0      	; 0x2694 <comparePasswords+0xa>
    2694:	cd b7       	in	r28, 0x3d	; 61
    2696:	de b7       	in	r29, 0x3e	; 62
    2698:	9b 83       	std	Y+3, r25	; 0x03
    269a:	8a 83       	std	Y+2, r24	; 0x02
    269c:	7d 83       	std	Y+5, r23	; 0x05
    269e:	6c 83       	std	Y+4, r22	; 0x04
	/* Compare the passwords */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    26a0:	19 82       	std	Y+1, r1	; 0x01
    26a2:	19 c0       	rjmp	.+50     	; 0x26d6 <comparePasswords+0x4c>
		if (password[i] != secpassword[i]) {
    26a4:	89 81       	ldd	r24, Y+1	; 0x01
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	8a 81       	ldd	r24, Y+2	; 0x02
    26ac:	9b 81       	ldd	r25, Y+3	; 0x03
    26ae:	fc 01       	movw	r30, r24
    26b0:	e2 0f       	add	r30, r18
    26b2:	f3 1f       	adc	r31, r19
    26b4:	40 81       	ld	r20, Z
    26b6:	89 81       	ldd	r24, Y+1	; 0x01
    26b8:	28 2f       	mov	r18, r24
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	8c 81       	ldd	r24, Y+4	; 0x04
    26be:	9d 81       	ldd	r25, Y+5	; 0x05
    26c0:	fc 01       	movw	r30, r24
    26c2:	e2 0f       	add	r30, r18
    26c4:	f3 1f       	adc	r31, r19
    26c6:	80 81       	ld	r24, Z
    26c8:	48 17       	cp	r20, r24
    26ca:	11 f0       	breq	.+4      	; 0x26d0 <comparePasswords+0x46>
			return 0;
    26cc:	1e 82       	std	Y+6, r1	; 0x06
    26ce:	08 c0       	rjmp	.+16     	; 0x26e0 <comparePasswords+0x56>
	}
}

uint8 comparePasswords(uint8 *password,uint8 *secpassword){
	/* Compare the passwords */
	for (uint8 i = 0; i < PASSWORD_LENGTH; i++) {
    26d0:	89 81       	ldd	r24, Y+1	; 0x01
    26d2:	8f 5f       	subi	r24, 0xFF	; 255
    26d4:	89 83       	std	Y+1, r24	; 0x01
    26d6:	89 81       	ldd	r24, Y+1	; 0x01
    26d8:	85 30       	cpi	r24, 0x05	; 5
    26da:	20 f3       	brcs	.-56     	; 0x26a4 <comparePasswords+0x1a>
		if (password[i] != secpassword[i]) {
			return 0;
		}
	}
	return 1;
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	8e 83       	std	Y+6, r24	; 0x06
    26e0:	8e 81       	ldd	r24, Y+6	; 0x06
}
    26e2:	26 96       	adiw	r28, 0x06	; 6
    26e4:	0f b6       	in	r0, 0x3f	; 63
    26e6:	f8 94       	cli
    26e8:	de bf       	out	0x3e, r29	; 62
    26ea:	0f be       	out	0x3f, r0	; 63
    26ec:	cd bf       	out	0x3d, r28	; 61
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <__vector_7>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

/* Timer1 Compare Match A Interrupt Service Routine */
ISR(TIMER1_COMPA_vect){
    26f4:	1f 92       	push	r1
    26f6:	0f 92       	push	r0
    26f8:	0f b6       	in	r0, 0x3f	; 63
    26fa:	0f 92       	push	r0
    26fc:	11 24       	eor	r1, r1
    26fe:	2f 93       	push	r18
    2700:	3f 93       	push	r19
    2702:	4f 93       	push	r20
    2704:	5f 93       	push	r21
    2706:	6f 93       	push	r22
    2708:	7f 93       	push	r23
    270a:	8f 93       	push	r24
    270c:	9f 93       	push	r25
    270e:	af 93       	push	r26
    2710:	bf 93       	push	r27
    2712:	ef 93       	push	r30
    2714:	ff 93       	push	r31
    2716:	df 93       	push	r29
    2718:	cf 93       	push	r28
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    271e:	80 91 76 00 	lds	r24, 0x0076
    2722:	90 91 77 00 	lds	r25, 0x0077
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	29 f0       	breq	.+10     	; 0x2734 <__vector_7+0x40>
	{
		/* Call the Callback function in the application after the compare match */
		(g_callBackPtr)();
    272a:	e0 91 76 00 	lds	r30, 0x0076
    272e:	f0 91 77 00 	lds	r31, 0x0077
    2732:	09 95       	icall
	}
}
    2734:	cf 91       	pop	r28
    2736:	df 91       	pop	r29
    2738:	ff 91       	pop	r31
    273a:	ef 91       	pop	r30
    273c:	bf 91       	pop	r27
    273e:	af 91       	pop	r26
    2740:	9f 91       	pop	r25
    2742:	8f 91       	pop	r24
    2744:	7f 91       	pop	r23
    2746:	6f 91       	pop	r22
    2748:	5f 91       	pop	r21
    274a:	4f 91       	pop	r20
    274c:	3f 91       	pop	r19
    274e:	2f 91       	pop	r18
    2750:	0f 90       	pop	r0
    2752:	0f be       	out	0x3f, r0	; 63
    2754:	0f 90       	pop	r0
    2756:	1f 90       	pop	r1
    2758:	18 95       	reti

0000275a <__vector_9>:

/* Timer1 Overflow Interrupt Service Routine */
ISR(TIMER1_OVF_vect){
    275a:	1f 92       	push	r1
    275c:	0f 92       	push	r0
    275e:	0f b6       	in	r0, 0x3f	; 63
    2760:	0f 92       	push	r0
    2762:	11 24       	eor	r1, r1
    2764:	2f 93       	push	r18
    2766:	3f 93       	push	r19
    2768:	4f 93       	push	r20
    276a:	5f 93       	push	r21
    276c:	6f 93       	push	r22
    276e:	7f 93       	push	r23
    2770:	8f 93       	push	r24
    2772:	9f 93       	push	r25
    2774:	af 93       	push	r26
    2776:	bf 93       	push	r27
    2778:	ef 93       	push	r30
    277a:	ff 93       	push	r31
    277c:	df 93       	push	r29
    277e:	cf 93       	push	r28
    2780:	cd b7       	in	r28, 0x3d	; 61
    2782:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2784:	80 91 76 00 	lds	r24, 0x0076
    2788:	90 91 77 00 	lds	r25, 0x0077
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	29 f0       	breq	.+10     	; 0x279a <__vector_9+0x40>
	{
		/* Call the Callback function in the application after the overflow */
		(g_callBackPtr)();
    2790:	e0 91 76 00 	lds	r30, 0x0076
    2794:	f0 91 77 00 	lds	r31, 0x0077
    2798:	09 95       	icall
	}
}
    279a:	cf 91       	pop	r28
    279c:	df 91       	pop	r29
    279e:	ff 91       	pop	r31
    27a0:	ef 91       	pop	r30
    27a2:	bf 91       	pop	r27
    27a4:	af 91       	pop	r26
    27a6:	9f 91       	pop	r25
    27a8:	8f 91       	pop	r24
    27aa:	7f 91       	pop	r23
    27ac:	6f 91       	pop	r22
    27ae:	5f 91       	pop	r21
    27b0:	4f 91       	pop	r20
    27b2:	3f 91       	pop	r19
    27b4:	2f 91       	pop	r18
    27b6:	0f 90       	pop	r0
    27b8:	0f be       	out	0x3f, r0	; 63
    27ba:	0f 90       	pop	r0
    27bc:	1f 90       	pop	r1
    27be:	18 95       	reti

000027c0 <Timer1_init>:
 * Description:
 * Initializes Timer1 by configuring the timer mode, setting registers, and enabling interrupts.
 */

void Timer1_init(const Timer1_ConfigType * Config_Ptr)
{
    27c0:	df 93       	push	r29
    27c2:	cf 93       	push	r28
    27c4:	00 d0       	rcall	.+0      	; 0x27c6 <Timer1_init+0x6>
    27c6:	cd b7       	in	r28, 0x3d	; 61
    27c8:	de b7       	in	r29, 0x3e	; 62
    27ca:	9a 83       	std	Y+2, r25	; 0x02
    27cc:	89 83       	std	Y+1, r24	; 0x01
	if (Config_Ptr->mode == OVERFLOW_MODE){
    27ce:	e9 81       	ldd	r30, Y+1	; 0x01
    27d0:	fa 81       	ldd	r31, Y+2	; 0x02
    27d2:	85 81       	ldd	r24, Z+5	; 0x05
    27d4:	88 23       	and	r24, r24
    27d6:	79 f4       	brne	.+30     	; 0x27f6 <Timer1_init+0x36>
		/* Set the timer mode to normal mode */
		TCCR1A &= ~(0x03);
    27d8:	af e4       	ldi	r26, 0x4F	; 79
    27da:	b0 e0       	ldi	r27, 0x00	; 0
    27dc:	ef e4       	ldi	r30, 0x4F	; 79
    27de:	f0 e0       	ldi	r31, 0x00	; 0
    27e0:	80 81       	ld	r24, Z
    27e2:	8c 7f       	andi	r24, 0xFC	; 252
    27e4:	8c 93       	st	X, r24
		/* Enable Timer1 overflow interrupt */
		TIMSK |= (1 << TOIE1);
    27e6:	a9 e5       	ldi	r26, 0x59	; 89
    27e8:	b0 e0       	ldi	r27, 0x00	; 0
    27ea:	e9 e5       	ldi	r30, 0x59	; 89
    27ec:	f0 e0       	ldi	r31, 0x00	; 0
    27ee:	80 81       	ld	r24, Z
    27f0:	84 60       	ori	r24, 0x04	; 4
    27f2:	8c 93       	st	X, r24
    27f4:	17 c0       	rjmp	.+46     	; 0x2824 <Timer1_init+0x64>
	}

	else{
		/* Set the timer mode to CTC mode */
		TCCR1B |= (1<<WGM12);
    27f6:	ae e4       	ldi	r26, 0x4E	; 78
    27f8:	b0 e0       	ldi	r27, 0x00	; 0
    27fa:	ee e4       	ldi	r30, 0x4E	; 78
    27fc:	f0 e0       	ldi	r31, 0x00	; 0
    27fe:	80 81       	ld	r24, Z
    2800:	88 60       	ori	r24, 0x08	; 8
    2802:	8c 93       	st	X, r24
		/* Enable Timer1 compare match interrupt */
		TIMSK |= (1 << OCIE1A);
    2804:	a9 e5       	ldi	r26, 0x59	; 89
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	e9 e5       	ldi	r30, 0x59	; 89
    280a:	f0 e0       	ldi	r31, 0x00	; 0
    280c:	80 81       	ld	r24, Z
    280e:	80 61       	ori	r24, 0x10	; 16
    2810:	8c 93       	st	X, r24
		/* Set the compare match value */
		OCR1A = Config_Ptr->compare_value;
    2812:	aa e4       	ldi	r26, 0x4A	; 74
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e9 81       	ldd	r30, Y+1	; 0x01
    2818:	fa 81       	ldd	r31, Y+2	; 0x02
    281a:	82 81       	ldd	r24, Z+2	; 0x02
    281c:	93 81       	ldd	r25, Z+3	; 0x03
    281e:	11 96       	adiw	r26, 0x01	; 1
    2820:	9c 93       	st	X, r25
    2822:	8e 93       	st	-X, r24
	}
	/* Set the initial timer value */
	TCNT1 = Config_Ptr->initial_value;
    2824:	ac e4       	ldi	r26, 0x4C	; 76
    2826:	b0 e0       	ldi	r27, 0x00	; 0
    2828:	e9 81       	ldd	r30, Y+1	; 0x01
    282a:	fa 81       	ldd	r31, Y+2	; 0x02
    282c:	80 81       	ld	r24, Z
    282e:	91 81       	ldd	r25, Z+1	; 0x01
    2830:	11 96       	adiw	r26, 0x01	; 1
    2832:	9c 93       	st	X, r25
    2834:	8e 93       	st	-X, r24
	/* Set the required F_CPU prescaler */
	TCCR1B |= (Config_Ptr->prescaler);
    2836:	ae e4       	ldi	r26, 0x4E	; 78
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ee e4       	ldi	r30, 0x4E	; 78
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	90 81       	ld	r25, Z
    2840:	e9 81       	ldd	r30, Y+1	; 0x01
    2842:	fa 81       	ldd	r31, Y+2	; 0x02
    2844:	84 81       	ldd	r24, Z+4	; 0x04
    2846:	89 2b       	or	r24, r25
    2848:	8c 93       	st	X, r24
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	cf 91       	pop	r28
    2850:	df 91       	pop	r29
    2852:	08 95       	ret

00002854 <Timer1_deInit>:
/*
 * Description:
 * Stops the Timer1.
 */
void Timer1_deInit(void)
{
    2854:	df 93       	push	r29
    2856:	cf 93       	push	r28
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
	/* Disable Timer1 by clearing the prescaler bits */
	TCCR1B &= ~(0x07);
    285c:	ae e4       	ldi	r26, 0x4E	; 78
    285e:	b0 e0       	ldi	r27, 0x00	; 0
    2860:	ee e4       	ldi	r30, 0x4E	; 78
    2862:	f0 e0       	ldi	r31, 0x00	; 0
    2864:	80 81       	ld	r24, Z
    2866:	88 7f       	andi	r24, 0xF8	; 248
    2868:	8c 93       	st	X, r24
}
    286a:	cf 91       	pop	r28
    286c:	df 91       	pop	r29
    286e:	08 95       	ret

00002870 <Timer1_setCallBack>:
/*
 * Description :
 * Function to set the Call Back function address.
 */
void Timer1_setCallBack(void(*a_ptr)(void))
{
    2870:	df 93       	push	r29
    2872:	cf 93       	push	r28
    2874:	00 d0       	rcall	.+0      	; 0x2876 <Timer1_setCallBack+0x6>
    2876:	cd b7       	in	r28, 0x3d	; 61
    2878:	de b7       	in	r29, 0x3e	; 62
    287a:	9a 83       	std	Y+2, r25	; 0x02
    287c:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the callback function in a global variable */
	g_callBackPtr = a_ptr;
    287e:	89 81       	ldd	r24, Y+1	; 0x01
    2880:	9a 81       	ldd	r25, Y+2	; 0x02
    2882:	90 93 77 00 	sts	0x0077, r25
    2886:	80 93 76 00 	sts	0x0076, r24
}
    288a:	0f 90       	pop	r0
    288c:	0f 90       	pop	r0
    288e:	cf 91       	pop	r28
    2890:	df 91       	pop	r29
    2892:	08 95       	ret

00002894 <delay_sec>:

/*
 * Description:
 * Uses Timer1 to introduce a delay in seconds.
 */
void delay_sec(uint8 sec){
    2894:	df 93       	push	r29
    2896:	cf 93       	push	r28
    2898:	0f 92       	push	r0
    289a:	cd b7       	in	r28, 0x3d	; 61
    289c:	de b7       	in	r29, 0x3e	; 62
    289e:	89 83       	std	Y+1, r24	; 0x01
	Timer1_init(&Timer1_Config);
    28a0:	88 e6       	ldi	r24, 0x68	; 104
    28a2:	90 e0       	ldi	r25, 0x00	; 0
    28a4:	0e 94 e0 13 	call	0x27c0	; 0x27c0 <Timer1_init>

	Timer1_setCallBack(timeCalc);
    28a8:	85 e7       	ldi	r24, 0x75	; 117
    28aa:	94 e1       	ldi	r25, 0x14	; 20
    28ac:	0e 94 38 14 	call	0x2870	; 0x2870 <Timer1_setCallBack>

	delaySeconds = sec;
    28b0:	89 81       	ldd	r24, Y+1	; 0x01
    28b2:	88 2f       	mov	r24, r24
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	a0 e0       	ldi	r26, 0x00	; 0
    28b8:	b0 e0       	ldi	r27, 0x00	; 0
    28ba:	80 93 7c 00 	sts	0x007C, r24
    28be:	90 93 7d 00 	sts	0x007D, r25
    28c2:	a0 93 7e 00 	sts	0x007E, r26
    28c6:	b0 93 7f 00 	sts	0x007F, r27

	while(delaySeconds>0) {
    28ca:	80 91 7c 00 	lds	r24, 0x007C
    28ce:	90 91 7d 00 	lds	r25, 0x007D
    28d2:	a0 91 7e 00 	lds	r26, 0x007E
    28d6:	b0 91 7f 00 	lds	r27, 0x007F
    28da:	00 97       	sbiw	r24, 0x00	; 0
    28dc:	a1 05       	cpc	r26, r1
    28de:	b1 05       	cpc	r27, r1
    28e0:	a1 f7       	brne	.-24     	; 0x28ca <delay_sec+0x36>
		/* Wait for the delay to complete */
	}
}
    28e2:	0f 90       	pop	r0
    28e4:	cf 91       	pop	r28
    28e6:	df 91       	pop	r29
    28e8:	08 95       	ret

000028ea <timeCalc>:

/* Callback function to calculate the seconds required */
void timeCalc(void){
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	g_tick++;
    28f2:	80 91 78 00 	lds	r24, 0x0078
    28f6:	90 91 79 00 	lds	r25, 0x0079
    28fa:	a0 91 7a 00 	lds	r26, 0x007A
    28fe:	b0 91 7b 00 	lds	r27, 0x007B
    2902:	01 96       	adiw	r24, 0x01	; 1
    2904:	a1 1d       	adc	r26, r1
    2906:	b1 1d       	adc	r27, r1
    2908:	80 93 78 00 	sts	0x0078, r24
    290c:	90 93 79 00 	sts	0x0079, r25
    2910:	a0 93 7a 00 	sts	0x007A, r26
    2914:	b0 93 7b 00 	sts	0x007B, r27
	if (g_tick == delaySeconds)
    2918:	20 91 78 00 	lds	r18, 0x0078
    291c:	30 91 79 00 	lds	r19, 0x0079
    2920:	40 91 7a 00 	lds	r20, 0x007A
    2924:	50 91 7b 00 	lds	r21, 0x007B
    2928:	80 91 7c 00 	lds	r24, 0x007C
    292c:	90 91 7d 00 	lds	r25, 0x007D
    2930:	a0 91 7e 00 	lds	r26, 0x007E
    2934:	b0 91 7f 00 	lds	r27, 0x007F
    2938:	28 17       	cp	r18, r24
    293a:	39 07       	cpc	r19, r25
    293c:	4a 07       	cpc	r20, r26
    293e:	5b 07       	cpc	r21, r27
    2940:	91 f4       	brne	.+36     	; 0x2966 <timeCalc+0x7c>
	{
		g_tick=0;
    2942:	10 92 78 00 	sts	0x0078, r1
    2946:	10 92 79 00 	sts	0x0079, r1
    294a:	10 92 7a 00 	sts	0x007A, r1
    294e:	10 92 7b 00 	sts	0x007B, r1
		delaySeconds=0;
    2952:	10 92 7c 00 	sts	0x007C, r1
    2956:	10 92 7d 00 	sts	0x007D, r1
    295a:	10 92 7e 00 	sts	0x007E, r1
    295e:	10 92 7f 00 	sts	0x007F, r1
		Timer1_deInit();
    2962:	0e 94 2a 14 	call	0x2854	; 0x2854 <Timer1_deInit>
	}
}
    2966:	cf 91       	pop	r28
    2968:	df 91       	pop	r29
    296a:	08 95       	ret

0000296c <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    296c:	df 93       	push	r29
    296e:	cf 93       	push	r28
    2970:	00 d0       	rcall	.+0      	; 0x2972 <TWI_init+0x6>
    2972:	cd b7       	in	r28, 0x3d	; 61
    2974:	de b7       	in	r29, 0x3e	; 62
    2976:	9a 83       	std	Y+2, r25	; 0x02
    2978:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = Config_Ptr->bit_rate;
    297a:	a0 e2       	ldi	r26, 0x20	; 32
    297c:	b0 e0       	ldi	r27, 0x00	; 0
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	81 81       	ldd	r24, Z+1	; 0x01
    2984:	8c 93       	st	X, r24
	TWSR = 0x00;
    2986:	e1 e2       	ldi	r30, 0x21	; 33
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = (Config_Ptr->address<<1);
    298c:	a2 e2       	ldi	r26, 0x22	; 34
    298e:	b0 e0       	ldi	r27, 0x00	; 0
    2990:	e9 81       	ldd	r30, Y+1	; 0x01
    2992:	fa 81       	ldd	r31, Y+2	; 0x02
    2994:	80 81       	ld	r24, Z
    2996:	88 0f       	add	r24, r24
    2998:	8c 93       	st	X, r24
	
    TWCR = (1<<TWEN); /* enable TWI */
    299a:	e6 e5       	ldi	r30, 0x56	; 86
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	84 e0       	ldi	r24, 0x04	; 4
    29a0:	80 83       	st	Z, r24
}
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <TWI_start>:

void TWI_start(void)
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	cd b7       	in	r28, 0x3d	; 61
    29b2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    29b4:	e6 e5       	ldi	r30, 0x56	; 86
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	84 ea       	ldi	r24, 0xA4	; 164
    29ba:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29bc:	e6 e5       	ldi	r30, 0x56	; 86
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	88 23       	and	r24, r24
    29c4:	dc f7       	brge	.-10     	; 0x29bc <TWI_start+0x10>
}
    29c6:	cf 91       	pop	r28
    29c8:	df 91       	pop	r29
    29ca:	08 95       	ret

000029cc <TWI_stop>:

void TWI_stop(void)
{
    29cc:	df 93       	push	r29
    29ce:	cf 93       	push	r28
    29d0:	cd b7       	in	r28, 0x3d	; 61
    29d2:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    29d4:	e6 e5       	ldi	r30, 0x56	; 86
    29d6:	f0 e0       	ldi	r31, 0x00	; 0
    29d8:	84 e9       	ldi	r24, 0x94	; 148
    29da:	80 83       	st	Z, r24
}
    29dc:	cf 91       	pop	r28
    29de:	df 91       	pop	r29
    29e0:	08 95       	ret

000029e2 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    29e2:	df 93       	push	r29
    29e4:	cf 93       	push	r28
    29e6:	0f 92       	push	r0
    29e8:	cd b7       	in	r28, 0x3d	; 61
    29ea:	de b7       	in	r29, 0x3e	; 62
    29ec:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    29ee:	e3 e2       	ldi	r30, 0x23	; 35
    29f0:	f0 e0       	ldi	r31, 0x00	; 0
    29f2:	89 81       	ldd	r24, Y+1	; 0x01
    29f4:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    29f6:	e6 e5       	ldi	r30, 0x56	; 86
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	84 e8       	ldi	r24, 0x84	; 132
    29fc:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    29fe:	e6 e5       	ldi	r30, 0x56	; 86
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	88 23       	and	r24, r24
    2a06:	dc f7       	brge	.-10     	; 0x29fe <TWI_writeByte+0x1c>
}
    2a08:	0f 90       	pop	r0
    2a0a:	cf 91       	pop	r28
    2a0c:	df 91       	pop	r29
    2a0e:	08 95       	ret

00002a10 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2a10:	df 93       	push	r29
    2a12:	cf 93       	push	r28
    2a14:	cd b7       	in	r28, 0x3d	; 61
    2a16:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2a18:	e6 e5       	ldi	r30, 0x56	; 86
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	84 ec       	ldi	r24, 0xC4	; 196
    2a1e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a20:	e6 e5       	ldi	r30, 0x56	; 86
    2a22:	f0 e0       	ldi	r31, 0x00	; 0
    2a24:	80 81       	ld	r24, Z
    2a26:	88 23       	and	r24, r24
    2a28:	dc f7       	brge	.-10     	; 0x2a20 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2a2a:	e3 e2       	ldi	r30, 0x23	; 35
    2a2c:	f0 e0       	ldi	r31, 0x00	; 0
    2a2e:	80 81       	ld	r24, Z
}
    2a30:	cf 91       	pop	r28
    2a32:	df 91       	pop	r29
    2a34:	08 95       	ret

00002a36 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2a36:	df 93       	push	r29
    2a38:	cf 93       	push	r28
    2a3a:	cd b7       	in	r28, 0x3d	; 61
    2a3c:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2a3e:	e6 e5       	ldi	r30, 0x56	; 86
    2a40:	f0 e0       	ldi	r31, 0x00	; 0
    2a42:	84 e8       	ldi	r24, 0x84	; 132
    2a44:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2a46:	e6 e5       	ldi	r30, 0x56	; 86
    2a48:	f0 e0       	ldi	r31, 0x00	; 0
    2a4a:	80 81       	ld	r24, Z
    2a4c:	88 23       	and	r24, r24
    2a4e:	dc f7       	brge	.-10     	; 0x2a46 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2a50:	e3 e2       	ldi	r30, 0x23	; 35
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	0f 92       	push	r0
    2a62:	cd b7       	in	r28, 0x3d	; 61
    2a64:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2a66:	e1 e2       	ldi	r30, 0x21	; 33
    2a68:	f0 e0       	ldi	r31, 0x00	; 0
    2a6a:	80 81       	ld	r24, Z
    2a6c:	88 7f       	andi	r24, 0xF8	; 248
    2a6e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a72:	0f 90       	pop	r0
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_ConfigType * Config_Ptr)
{
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	00 d0       	rcall	.+0      	; 0x2a80 <UART_init+0x6>
    2a80:	00 d0       	rcall	.+0      	; 0x2a82 <UART_init+0x8>
    2a82:	cd b7       	in	r28, 0x3d	; 61
    2a84:	de b7       	in	r29, 0x3e	; 62
    2a86:	9c 83       	std	Y+4, r25	; 0x04
    2a88:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a8a:	1a 82       	std	Y+2, r1	; 0x02
    2a8c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a8e:	eb e2       	ldi	r30, 0x2B	; 43
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	82 e0       	ldi	r24, 0x02	; 2
    2a94:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a96:	ea e2       	ldi	r30, 0x2A	; 42
    2a98:	f0 e0       	ldi	r31, 0x00	; 0
    2a9a:	88 e1       	ldi	r24, 0x18	; 24
    2a9c:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	UCSRC = (1<<URSEL) | (1<<Config_Ptr->parity) | (1<<Config_Ptr->stop_bit) | (1<<Config_Ptr->bit_data);
    2a9e:	a0 e4       	ldi	r26, 0x40	; 64
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa4:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa6:	81 81       	ldd	r24, Z+1	; 0x01
    2aa8:	28 2f       	mov	r18, r24
    2aaa:	30 e0       	ldi	r19, 0x00	; 0
    2aac:	81 e0       	ldi	r24, 0x01	; 1
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	02 c0       	rjmp	.+4      	; 0x2ab6 <UART_init+0x3c>
    2ab2:	88 0f       	add	r24, r24
    2ab4:	99 1f       	adc	r25, r25
    2ab6:	2a 95       	dec	r18
    2ab8:	e2 f7       	brpl	.-8      	; 0x2ab2 <UART_init+0x38>
    2aba:	48 2f       	mov	r20, r24
    2abc:	40 68       	ori	r20, 0x80	; 128
    2abe:	eb 81       	ldd	r30, Y+3	; 0x03
    2ac0:	fc 81       	ldd	r31, Y+4	; 0x04
    2ac2:	82 81       	ldd	r24, Z+2	; 0x02
    2ac4:	28 2f       	mov	r18, r24
    2ac6:	30 e0       	ldi	r19, 0x00	; 0
    2ac8:	81 e0       	ldi	r24, 0x01	; 1
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	02 c0       	rjmp	.+4      	; 0x2ad2 <UART_init+0x58>
    2ace:	88 0f       	add	r24, r24
    2ad0:	99 1f       	adc	r25, r25
    2ad2:	2a 95       	dec	r18
    2ad4:	e2 f7       	brpl	.-8      	; 0x2ace <UART_init+0x54>
    2ad6:	48 2b       	or	r20, r24
    2ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    2ada:	fc 81       	ldd	r31, Y+4	; 0x04
    2adc:	80 81       	ld	r24, Z
    2ade:	28 2f       	mov	r18, r24
    2ae0:	30 e0       	ldi	r19, 0x00	; 0
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	02 c0       	rjmp	.+4      	; 0x2aec <UART_init+0x72>
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	2a 95       	dec	r18
    2aee:	e2 f7       	brpl	.-8      	; 0x2ae8 <UART_init+0x6e>
    2af0:	84 2b       	or	r24, r20
    2af2:	8c 93       	st	X, r24
	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (Config_Ptr->baud_rate * 8UL))) - 1);
    2af4:	eb 81       	ldd	r30, Y+3	; 0x03
    2af6:	fc 81       	ldd	r31, Y+4	; 0x04
    2af8:	83 81       	ldd	r24, Z+3	; 0x03
    2afa:	94 81       	ldd	r25, Z+4	; 0x04
    2afc:	cc 01       	movw	r24, r24
    2afe:	a0 e0       	ldi	r26, 0x00	; 0
    2b00:	b0 e0       	ldi	r27, 0x00	; 0
    2b02:	88 0f       	add	r24, r24
    2b04:	99 1f       	adc	r25, r25
    2b06:	aa 1f       	adc	r26, r26
    2b08:	bb 1f       	adc	r27, r27
    2b0a:	88 0f       	add	r24, r24
    2b0c:	99 1f       	adc	r25, r25
    2b0e:	aa 1f       	adc	r26, r26
    2b10:	bb 1f       	adc	r27, r27
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	aa 1f       	adc	r26, r26
    2b18:	bb 1f       	adc	r27, r27
    2b1a:	9c 01       	movw	r18, r24
    2b1c:	ad 01       	movw	r20, r26
    2b1e:	80 e0       	ldi	r24, 0x00	; 0
    2b20:	92 e1       	ldi	r25, 0x12	; 18
    2b22:	aa e7       	ldi	r26, 0x7A	; 122
    2b24:	b0 e0       	ldi	r27, 0x00	; 0
    2b26:	bc 01       	movw	r22, r24
    2b28:	cd 01       	movw	r24, r26
    2b2a:	0e 94 54 16 	call	0x2ca8	; 0x2ca8 <__udivmodsi4>
    2b2e:	da 01       	movw	r26, r20
    2b30:	c9 01       	movw	r24, r18
    2b32:	01 97       	sbiw	r24, 0x01	; 1
    2b34:	9a 83       	std	Y+2, r25	; 0x02
    2b36:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b38:	e0 e4       	ldi	r30, 0x40	; 64
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	89 81       	ldd	r24, Y+1	; 0x01
    2b3e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b40:	89 2f       	mov	r24, r25
    2b42:	99 27       	eor	r25, r25
    2b44:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b46:	e9 e2       	ldi	r30, 0x29	; 41
    2b48:	f0 e0       	ldi	r31, 0x00	; 0
    2b4a:	89 81       	ldd	r24, Y+1	; 0x01
    2b4c:	80 83       	st	Z, r24
}
    2b4e:	0f 90       	pop	r0
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	0f 92       	push	r0
    2b62:	cd b7       	in	r28, 0x3d	; 61
    2b64:	de b7       	in	r29, 0x3e	; 62
    2b66:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b68:	eb e2       	ldi	r30, 0x2B	; 43
    2b6a:	f0 e0       	ldi	r31, 0x00	; 0
    2b6c:	80 81       	ld	r24, Z
    2b6e:	88 2f       	mov	r24, r24
    2b70:	90 e0       	ldi	r25, 0x00	; 0
    2b72:	80 72       	andi	r24, 0x20	; 32
    2b74:	90 70       	andi	r25, 0x00	; 0
    2b76:	00 97       	sbiw	r24, 0x00	; 0
    2b78:	b9 f3       	breq	.-18     	; 0x2b68 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b7a:	ec e2       	ldi	r30, 0x2C	; 44
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	89 81       	ldd	r24, Y+1	; 0x01
    2b80:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2b82:	0f 90       	pop	r0
    2b84:	cf 91       	pop	r28
    2b86:	df 91       	pop	r29
    2b88:	08 95       	ret

00002b8a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b8a:	df 93       	push	r29
    2b8c:	cf 93       	push	r28
    2b8e:	cd b7       	in	r28, 0x3d	; 61
    2b90:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2b92:	eb e2       	ldi	r30, 0x2B	; 43
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	88 23       	and	r24, r24
    2b9a:	dc f7       	brge	.-10     	; 0x2b92 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2b9c:	ec e2       	ldi	r30, 0x2C	; 44
    2b9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ba0:	80 81       	ld	r24, Z
}
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <UART_sendString+0x6>
    2bae:	0f 92       	push	r0
    2bb0:	cd b7       	in	r28, 0x3d	; 61
    2bb2:	de b7       	in	r29, 0x3e	; 62
    2bb4:	9b 83       	std	Y+3, r25	; 0x03
    2bb6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb8:	19 82       	std	Y+1, r1	; 0x01
    2bba:	0e c0       	rjmp	.+28     	; 0x2bd8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bbc:	89 81       	ldd	r24, Y+1	; 0x01
    2bbe:	28 2f       	mov	r18, r24
    2bc0:	30 e0       	ldi	r19, 0x00	; 0
    2bc2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc6:	fc 01       	movw	r30, r24
    2bc8:	e2 0f       	add	r30, r18
    2bca:	f3 1f       	adc	r31, r19
    2bcc:	80 81       	ld	r24, Z
    2bce:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <UART_sendByte>
		i++;
    2bd2:	89 81       	ldd	r24, Y+1	; 0x01
    2bd4:	8f 5f       	subi	r24, 0xFF	; 255
    2bd6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2bd8:	89 81       	ldd	r24, Y+1	; 0x01
    2bda:	28 2f       	mov	r18, r24
    2bdc:	30 e0       	ldi	r19, 0x00	; 0
    2bde:	8a 81       	ldd	r24, Y+2	; 0x02
    2be0:	9b 81       	ldd	r25, Y+3	; 0x03
    2be2:	fc 01       	movw	r30, r24
    2be4:	e2 0f       	add	r30, r18
    2be6:	f3 1f       	adc	r31, r19
    2be8:	80 81       	ld	r24, Z
    2bea:	88 23       	and	r24, r24
    2bec:	39 f7       	brne	.-50     	; 0x2bbc <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	0f 90       	pop	r0
    2bf4:	cf 91       	pop	r28
    2bf6:	df 91       	pop	r29
    2bf8:	08 95       	ret

00002bfa <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2bfa:	0f 93       	push	r16
    2bfc:	1f 93       	push	r17
    2bfe:	df 93       	push	r29
    2c00:	cf 93       	push	r28
    2c02:	00 d0       	rcall	.+0      	; 0x2c04 <UART_receiveString+0xa>
    2c04:	0f 92       	push	r0
    2c06:	cd b7       	in	r28, 0x3d	; 61
    2c08:	de b7       	in	r29, 0x3e	; 62
    2c0a:	9b 83       	std	Y+3, r25	; 0x03
    2c0c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c0e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c10:	89 81       	ldd	r24, Y+1	; 0x01
    2c12:	28 2f       	mov	r18, r24
    2c14:	30 e0       	ldi	r19, 0x00	; 0
    2c16:	8a 81       	ldd	r24, Y+2	; 0x02
    2c18:	9b 81       	ldd	r25, Y+3	; 0x03
    2c1a:	8c 01       	movw	r16, r24
    2c1c:	02 0f       	add	r16, r18
    2c1e:	13 1f       	adc	r17, r19
    2c20:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
    2c24:	f8 01       	movw	r30, r16
    2c26:	80 83       	st	Z, r24
    2c28:	0f c0       	rjmp	.+30     	; 0x2c48 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c2a:	89 81       	ldd	r24, Y+1	; 0x01
    2c2c:	8f 5f       	subi	r24, 0xFF	; 255
    2c2e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	8a 81       	ldd	r24, Y+2	; 0x02
    2c38:	9b 81       	ldd	r25, Y+3	; 0x03
    2c3a:	8c 01       	movw	r16, r24
    2c3c:	02 0f       	add	r16, r18
    2c3e:	13 1f       	adc	r17, r19
    2c40:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <UART_recieveByte>
    2c44:	f8 01       	movw	r30, r16
    2c46:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c48:	89 81       	ldd	r24, Y+1	; 0x01
    2c4a:	28 2f       	mov	r18, r24
    2c4c:	30 e0       	ldi	r19, 0x00	; 0
    2c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c50:	9b 81       	ldd	r25, Y+3	; 0x03
    2c52:	fc 01       	movw	r30, r24
    2c54:	e2 0f       	add	r30, r18
    2c56:	f3 1f       	adc	r31, r19
    2c58:	80 81       	ld	r24, Z
    2c5a:	83 32       	cpi	r24, 0x23	; 35
    2c5c:	31 f7       	brne	.-52     	; 0x2c2a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c5e:	89 81       	ldd	r24, Y+1	; 0x01
    2c60:	28 2f       	mov	r18, r24
    2c62:	30 e0       	ldi	r19, 0x00	; 0
    2c64:	8a 81       	ldd	r24, Y+2	; 0x02
    2c66:	9b 81       	ldd	r25, Y+3	; 0x03
    2c68:	fc 01       	movw	r30, r24
    2c6a:	e2 0f       	add	r30, r18
    2c6c:	f3 1f       	adc	r31, r19
    2c6e:	10 82       	st	Z, r1
}
    2c70:	0f 90       	pop	r0
    2c72:	0f 90       	pop	r0
    2c74:	0f 90       	pop	r0
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	1f 91       	pop	r17
    2c7c:	0f 91       	pop	r16
    2c7e:	08 95       	ret

00002c80 <__udivmodhi4>:
    2c80:	aa 1b       	sub	r26, r26
    2c82:	bb 1b       	sub	r27, r27
    2c84:	51 e1       	ldi	r21, 0x11	; 17
    2c86:	07 c0       	rjmp	.+14     	; 0x2c96 <__udivmodhi4_ep>

00002c88 <__udivmodhi4_loop>:
    2c88:	aa 1f       	adc	r26, r26
    2c8a:	bb 1f       	adc	r27, r27
    2c8c:	a6 17       	cp	r26, r22
    2c8e:	b7 07       	cpc	r27, r23
    2c90:	10 f0       	brcs	.+4      	; 0x2c96 <__udivmodhi4_ep>
    2c92:	a6 1b       	sub	r26, r22
    2c94:	b7 0b       	sbc	r27, r23

00002c96 <__udivmodhi4_ep>:
    2c96:	88 1f       	adc	r24, r24
    2c98:	99 1f       	adc	r25, r25
    2c9a:	5a 95       	dec	r21
    2c9c:	a9 f7       	brne	.-22     	; 0x2c88 <__udivmodhi4_loop>
    2c9e:	80 95       	com	r24
    2ca0:	90 95       	com	r25
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	08 95       	ret

00002ca8 <__udivmodsi4>:
    2ca8:	a1 e2       	ldi	r26, 0x21	; 33
    2caa:	1a 2e       	mov	r1, r26
    2cac:	aa 1b       	sub	r26, r26
    2cae:	bb 1b       	sub	r27, r27
    2cb0:	fd 01       	movw	r30, r26
    2cb2:	0d c0       	rjmp	.+26     	; 0x2cce <__udivmodsi4_ep>

00002cb4 <__udivmodsi4_loop>:
    2cb4:	aa 1f       	adc	r26, r26
    2cb6:	bb 1f       	adc	r27, r27
    2cb8:	ee 1f       	adc	r30, r30
    2cba:	ff 1f       	adc	r31, r31
    2cbc:	a2 17       	cp	r26, r18
    2cbe:	b3 07       	cpc	r27, r19
    2cc0:	e4 07       	cpc	r30, r20
    2cc2:	f5 07       	cpc	r31, r21
    2cc4:	20 f0       	brcs	.+8      	; 0x2cce <__udivmodsi4_ep>
    2cc6:	a2 1b       	sub	r26, r18
    2cc8:	b3 0b       	sbc	r27, r19
    2cca:	e4 0b       	sbc	r30, r20
    2ccc:	f5 0b       	sbc	r31, r21

00002cce <__udivmodsi4_ep>:
    2cce:	66 1f       	adc	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	99 1f       	adc	r25, r25
    2cd6:	1a 94       	dec	r1
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <__udivmodsi4_loop>
    2cda:	60 95       	com	r22
    2cdc:	70 95       	com	r23
    2cde:	80 95       	com	r24
    2ce0:	90 95       	com	r25
    2ce2:	9b 01       	movw	r18, r22
    2ce4:	ac 01       	movw	r20, r24
    2ce6:	bd 01       	movw	r22, r26
    2ce8:	cf 01       	movw	r24, r30
    2cea:	08 95       	ret

00002cec <__prologue_saves__>:
    2cec:	2f 92       	push	r2
    2cee:	3f 92       	push	r3
    2cf0:	4f 92       	push	r4
    2cf2:	5f 92       	push	r5
    2cf4:	6f 92       	push	r6
    2cf6:	7f 92       	push	r7
    2cf8:	8f 92       	push	r8
    2cfa:	9f 92       	push	r9
    2cfc:	af 92       	push	r10
    2cfe:	bf 92       	push	r11
    2d00:	cf 92       	push	r12
    2d02:	df 92       	push	r13
    2d04:	ef 92       	push	r14
    2d06:	ff 92       	push	r15
    2d08:	0f 93       	push	r16
    2d0a:	1f 93       	push	r17
    2d0c:	cf 93       	push	r28
    2d0e:	df 93       	push	r29
    2d10:	cd b7       	in	r28, 0x3d	; 61
    2d12:	de b7       	in	r29, 0x3e	; 62
    2d14:	ca 1b       	sub	r28, r26
    2d16:	db 0b       	sbc	r29, r27
    2d18:	0f b6       	in	r0, 0x3f	; 63
    2d1a:	f8 94       	cli
    2d1c:	de bf       	out	0x3e, r29	; 62
    2d1e:	0f be       	out	0x3f, r0	; 63
    2d20:	cd bf       	out	0x3d, r28	; 61
    2d22:	09 94       	ijmp

00002d24 <__epilogue_restores__>:
    2d24:	2a 88       	ldd	r2, Y+18	; 0x12
    2d26:	39 88       	ldd	r3, Y+17	; 0x11
    2d28:	48 88       	ldd	r4, Y+16	; 0x10
    2d2a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d2c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d2e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d30:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d32:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d34:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d36:	b9 84       	ldd	r11, Y+9	; 0x09
    2d38:	c8 84       	ldd	r12, Y+8	; 0x08
    2d3a:	df 80       	ldd	r13, Y+7	; 0x07
    2d3c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d3e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d40:	0c 81       	ldd	r16, Y+4	; 0x04
    2d42:	1b 81       	ldd	r17, Y+3	; 0x03
    2d44:	aa 81       	ldd	r26, Y+2	; 0x02
    2d46:	b9 81       	ldd	r27, Y+1	; 0x01
    2d48:	ce 0f       	add	r28, r30
    2d4a:	d1 1d       	adc	r29, r1
    2d4c:	0f b6       	in	r0, 0x3f	; 63
    2d4e:	f8 94       	cli
    2d50:	de bf       	out	0x3e, r29	; 62
    2d52:	0f be       	out	0x3f, r0	; 63
    2d54:	cd bf       	out	0x3d, r28	; 61
    2d56:	ed 01       	movw	r28, r26
    2d58:	08 95       	ret

00002d5a <itoa>:
    2d5a:	fb 01       	movw	r30, r22
    2d5c:	9f 01       	movw	r18, r30
    2d5e:	e8 94       	clt
    2d60:	42 30       	cpi	r20, 0x02	; 2
    2d62:	c4 f0       	brlt	.+48     	; 0x2d94 <itoa+0x3a>
    2d64:	45 32       	cpi	r20, 0x25	; 37
    2d66:	b4 f4       	brge	.+44     	; 0x2d94 <itoa+0x3a>
    2d68:	4a 30       	cpi	r20, 0x0A	; 10
    2d6a:	29 f4       	brne	.+10     	; 0x2d76 <itoa+0x1c>
    2d6c:	97 fb       	bst	r25, 7
    2d6e:	1e f4       	brtc	.+6      	; 0x2d76 <itoa+0x1c>
    2d70:	90 95       	com	r25
    2d72:	81 95       	neg	r24
    2d74:	9f 4f       	sbci	r25, 0xFF	; 255
    2d76:	64 2f       	mov	r22, r20
    2d78:	77 27       	eor	r23, r23
    2d7a:	0e 94 40 16 	call	0x2c80	; 0x2c80 <__udivmodhi4>
    2d7e:	80 5d       	subi	r24, 0xD0	; 208
    2d80:	8a 33       	cpi	r24, 0x3A	; 58
    2d82:	0c f0       	brlt	.+2      	; 0x2d86 <itoa+0x2c>
    2d84:	89 5d       	subi	r24, 0xD9	; 217
    2d86:	81 93       	st	Z+, r24
    2d88:	cb 01       	movw	r24, r22
    2d8a:	00 97       	sbiw	r24, 0x00	; 0
    2d8c:	a1 f7       	brne	.-24     	; 0x2d76 <itoa+0x1c>
    2d8e:	16 f4       	brtc	.+4      	; 0x2d94 <itoa+0x3a>
    2d90:	5d e2       	ldi	r21, 0x2D	; 45
    2d92:	51 93       	st	Z+, r21
    2d94:	10 82       	st	Z, r1
    2d96:	c9 01       	movw	r24, r18
    2d98:	0c 94 ce 16 	jmp	0x2d9c	; 0x2d9c <strrev>

00002d9c <strrev>:
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	fc 01       	movw	r30, r24
    2da0:	67 2f       	mov	r22, r23
    2da2:	71 91       	ld	r23, Z+
    2da4:	77 23       	and	r23, r23
    2da6:	e1 f7       	brne	.-8      	; 0x2da0 <strrev+0x4>
    2da8:	32 97       	sbiw	r30, 0x02	; 2
    2daa:	04 c0       	rjmp	.+8      	; 0x2db4 <strrev+0x18>
    2dac:	7c 91       	ld	r23, X
    2dae:	6d 93       	st	X+, r22
    2db0:	70 83       	st	Z, r23
    2db2:	62 91       	ld	r22, -Z
    2db4:	ae 17       	cp	r26, r30
    2db6:	bf 07       	cpc	r27, r31
    2db8:	c8 f3       	brcs	.-14     	; 0x2dac <strrev+0x10>
    2dba:	08 95       	ret

00002dbc <_exit>:
    2dbc:	f8 94       	cli

00002dbe <__stop_program>:
    2dbe:	ff cf       	rjmp	.-2      	; 0x2dbe <__stop_program>
